<?xml version="1.0" encoding="UTF-8" ?>
<doc version="0.99.1384-pre-beta" name="Engine Types">
<class name="Animation" inherits="Resource" category="Resources">
	<brief_description>
	Contains data used to animate everything in the engine.
	</brief_description>
	<description>
	An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (signals) to the track. [html br/] Animations are just data containers, and must be added to odes such as an [AnimationPlayer] or [AnimationTreePlayer] to be played back.
	</description>
	<methods>
		<method name="add_track"  >
			<argument index="0" name="type" type="int">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			Add a track to the Animation. The track type must be specified as any of the values in te TYPE_* enumeration.
			</description>
		</method>
		<method name="remove_track"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Remove a track by specifying the track index.
			</description>
		</method>
		<method name="get_track_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the amount of tracks in the animation.
			</description>
		</method>
		<method name="track_get_type" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Get the type of a track.
			</description>
		</method>
		<method name="track_get_path" qualifiers="const" >
			<return type="NodePath">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Get the path of a track. for more information on the path format, see [method track_set_path]
			</description>
		</method>
		<method name="track_set_path"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="path" type="NodePath">
			</argument>
			<description>
			Set the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by &quot;:&quot;. Example: &quot;character/skeleton:ankle&quot; or &quot;character/mesh:transform/local:&quot;
			</description>
		</method>
		<method name="track_move_up"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_move_down"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transform_track_insert_key"  >
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time" type="real">
			</argument>
			<argument index="2" name="loc" type="Vector3">
			</argument>
			<argument index="3" name="rot" type="Quat">
			</argument>
			<argument index="4" name="scale" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_insert_key"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key" type="real">
			</argument>
			<argument index="2" name="arg2" type="var">
			</argument>
			<argument index="3" name="arg3" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_remove_key"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_get_key_count" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Return the amount of keys in a given track.
			</description>
		</method>
		<method name="track_get_key_value" qualifiers="const" >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_get_key_time" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			Return the time at which the key is located.
			</description>
		</method>
		<method name="track_find_key" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time" type="real">
			</argument>
			<argument index="2" name="exact" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_set_interpolation_type"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="interpolation" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_get_interpolation_type" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transform_track_interpolate" qualifiers="const" >
			<return type="Array">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="value_track_interpolate" qualifiers="const" >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend_track_interpolate" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="property_track_get_key_indices" qualifiers="const" >
			<return type="IntArray">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<argument index="2" name="delta" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="property_track_get_key_value" qualifiers="const" >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="property_track_get_name" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="method_track_get_key_indices" qualifiers="const" >
			<return type="IntArray">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<argument index="2" name="delta" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="method_track_get_name" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="method_track_get_params" qualifiers="const" >
			<return type="Array">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_length"  >
			<argument index="0" name="time_sec" type="real">
			</argument>
			<description>
			Set the total length of the animation (in seconds). Note that length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping.
			</description>
		</method>
		<method name="get_length" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the total length of the animation (in seconds).
			</description>
		</method>
		<method name="set_loop"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			Set a flag indicating that the animation must loop. This is uses for correct interpolation of animation cycles, and for hinting the player that it must restart the animation once it&apos;s over.
			</description>
		</method>
		<method name="has_loop" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return wether the animation has the loop flag set.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="INTERPOLATION_CUBIC" value="2">
		</constant>
		<constant name="TYPE_TRANSFORM" value="0">
			Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are Interpolated.
		</constant>
		<constant name="TYPE_BLEND" value="4">
		</constant>
		<constant name="TYPE_PROPERTY" value="2">
			TODO will be changed and bleh
		</constant>
		<constant name="TYPE_VALUE" value="1">
			Value tracks set values in node properties, but only those which can be Interpolated.
		</constant>
		<constant name="INTERPOLATION_NEAREST" value="0">
		</constant>
		<constant name="INTERPOLATION_LINEAR" value="1">
		</constant>
		<constant name="TYPE_METHOD" value="3">
		</constant>
	</constants>
</class>
<class name="AnimationPlayer" inherits="Misc" category="Nodes/Animation Nodes">
	<brief_description>
	Container and player of [Animaton] resources.
	</brief_description>
	<description>
	An animation player is used for general purpose playback of [Animation] resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in diferent channels.
	</description>
	<methods>
		<method name="add_animation"  >
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="animation" type="Object">
			</argument>
			<description>
			Add an animation resource to the player, which will be later referenced by the &quot;name&quot; argument.
			</description>
		</method>
		<method name="remove_animation"  >
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			Remove an animation from the player (by supplying the same name used to add it).
			</description>
		</method>
		<method name="rename_animation"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="newname" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_animation" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			Request wether an [Animation] name exist within the player.
			</description>
		</method>
		<method name="get_animation" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			Get an [Animation] resource by requesting a name.
			</description>
		</method>
		<method name="get_animation_list" qualifiers="const" >
			<return type="StringArray">
			</return>
			<description>
			Get the list of names of the animations stored in the player.
			</description>
		</method>
		<method name="set_blend_time"  >
			<argument index="0" name="anim_from" type="String">
			</argument>
			<argument index="1" name="anim_to" type="String">
			</argument>
			<argument index="2" name="sec" type="real">
			</argument>
			<description>
			Specify a blend time (in seconds) between two animations, referemced by their names.
			</description>
		</method>
		<method name="get_blend_time" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="anim_from" type="String">
			</argument>
			<argument index="1" name="anim_to" type="String">
			</argument>
			<description>
			Get the blend time between two animations, referemced by their names.
			</description>
		</method>
		<method name="play"  >
			<argument index="0" name="name" type="String" default="&quot;&quot;">
			</argument>
			<argument index="1" name="channel" type="int" default="0">
			</argument>
			<description>
			Start playback of an animation (referenced by &quot;name&quot;). Optionally a channel can be specified.
			</description>
		</method>
		<method name="stop"  >
			<argument index="0" name="channel" type="int" default="0">
			</argument>
			<description>
			Start playback of an animation channel. (or channel 0 if none is provided).
			</description>
		</method>
		<method name="stop_all"  >
			<description>
			Stop playback on all animation channels.
			</description>
		</method>
		<method name="is_playing" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="channel" type="int" default="0">
			</argument>
			<description>
			Return wether an animation chanel is playing (or channel 0 if none is provided).
			</description>
		</method>
		<method name="get_current_animation" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="channel" type="int" default="0">
			</argument>
			<description>
			Return the name of the animation being played in a channel (or channel 0 if none is provided).
			</description>
		</method>
		<method name="set_pause"  >
			<argument index="0" name="paused" type="bool">
			</argument>
			<description>
			Pause the playback in all animation channels.
			</description>
		</method>
		<method name="is_paused" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return [html i]true[html /i] if all playback is paused.
			</description>
		</method>
		<method name="set_speed"  >
			<argument index="0" name="speed" type="real">
			</argument>
			<argument index="1" name="channel" type="int" default="0">
			</argument>
			<description>
			Set a speed scaling ratio in a given animation channel (or channel 0 if none is provided). Default ratio is [html i]1[html /i] (no scaling).
			</description>
		</method>
		<method name="get_speed" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="channel" type="int" default="0">
			</argument>
			<description>
			Get the speed scaling ratio in a given animation channel (or channel 0 if none is provided). Default ratio is [html i]1[html /i] (no scaling).
			</description>
		</method>
		<method name="seek"  >
			<argument index="0" name="pos_sec" type="real">
			</argument>
			<argument index="1" name="channel" type="int" default="0">
			</argument>
			<description>
			Seek the animation in an animation channel (or channel 0 if none is provided) to a specific position (in seconds).
			</description>
		</method>
		<method name="get_pos" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="channel" type="int" default="0">
			</argument>
			<description>
			Return the playback position (in seconds) in an animation channel (or channel 0 if none is provided)
			</description>
		</method>
		<method name="find_animation" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="animation" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_caches"  >
			<description>
			The animation player creates caches for faster access to the nodes it will animate. However, if a specific node is removed, it may not notice it, so clear_caches will force the player to search for the nodes again.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="MAX_CHANNELS" value="8">
			Maximum amount of animation channels.
		</constant>
	</constants>
</class>
<class name="AnimationTreePlayer" inherits="Node" category="Nodes/Animation Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_node"  >
			<argument index="0" name="type" type="int">
			</argument>
			<argument index="1" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_node_id" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_set_name"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_get_name" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_get_input_count" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="animation_node_set_animation"  >
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="animation_node_get_animation" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_set_fadein_time"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_get_fadein_time" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_set_fadeout_time"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_get_fadeout_time" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_set_autorestart"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_set_autorestart_delay"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="delay_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_set_autorestart_random_delay"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="rand_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_has_autorestart" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_get_autorestart_delay" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_get_autorestart_random_delay" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_start"  >
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_stop"  >
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_is_active" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mix_node_set_amount"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="ratio" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="mix_node_get_amount" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend2_node_set_amount"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="blend" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend2_node_get_amount" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend3_node_set_amount"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="blend" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend3_node_get_amount" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend4_node_set_amount"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="blend" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend4_node_get_amount" qualifiers="const" >
			<return type="Vector2">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="timescale_node_set_scale"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="scale" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="timescale_node_get_scale" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="timeseek_node_seek"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="pos_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_set_input_count"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="count" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_get_input_count" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_delete_input"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_set_input_auto_advance"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="input_idx" type="int">
			</argument>
			<argument index="2" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_has_input_auto_advance" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_set_xfade_time"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_get_xfade_time" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_set_current"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_get_current" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_set_pos"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="screen_pos" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_get_pos" qualifiers="const" >
			<return type="Vector2">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_node"  >
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="connect"  >
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="dst_id" type="int">
			</argument>
			<argument index="2" name="dst_input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_connected" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="dst_id" type="int">
			</argument>
			<argument index="2" name="dst_input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="disconnect"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="dst_input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_active"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_active" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_base_path"  >
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_base_path" qualifiers="const" >
			<return type="NodePath">
			</return>
			<description>
			</description>
		</method>
		<method name="reset"  >
			<description>
			</description>
		</method>
		<method name="recompute_caches"  >
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="AudioServer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="sample_create"  >
			<return type="RID">
			</return>
			<argument index="0" name="format" type="int">
			</argument>
			<argument index="1" name="stereo" type="bool">
			</argument>
			<argument index="2" name="length" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_description"  >
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="description" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_description" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_format" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_is_stereo" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_length" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_signed_data"  >
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="data" type="RealArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_data"  >
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RawArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_data" qualifiers="const" >
			<return type="RawArray">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_mix_rate"  >
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="mix_rate" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_mix_rate" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_loop_format"  >
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="loop_format" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_loop_format" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_loop_begin"  >
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_loop_begin" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_loop_end"  >
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_loop_end" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="voice_play"  >
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_volume"  >
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="volume" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_pan"  >
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="pan" type="real">
			</argument>
			<argument index="2" name="depth" type="real" default="0">
			</argument>
			<argument index="3" name="height" type="real" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_filter"  >
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="type" type="int">
			</argument>
			<argument index="2" name="cutoff" type="real">
			</argument>
			<argument index="3" name="resonance" type="real">
			</argument>
			<argument index="4" name="gain" type="real" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_chorus"  >
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="chorus" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_reverb"  >
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="room" type="int">
			</argument>
			<argument index="2" name="reverb" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_mix_rate"  >
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="rate" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_positional"  >
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_volume" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_pan" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_pan_height" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_pan_depth" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_filter_type" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_filter_cutoff" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_filter_resonance" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_chorus" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_reverb_type" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_reverb" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_mix_rate" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_is_positional" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_stop"  >
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="free"  >
			<argument index="0" name="rid" type="RID">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="SAMPLE_LOOP_PING_PONG" value="2">
		</constant>
		<constant name="SAMPLE_FORMAT_IMA_ADPCM" value="2">
		</constant>
		<constant name="FILTER_HIPASS" value="3">
		</constant>
		<constant name="FILTER_NONE" value="0">
		</constant>
		<constant name="REVERB_HALL" value="3">
		</constant>
		<constant name="REVERB_MEDIUM" value="1">
		</constant>
		<constant name="REVERB_SMALL" value="0">
		</constant>
		<constant name="FILTER_LOWPASS" value="1">
		</constant>
		<constant name="SAMPLE_LOOP_FORWARD" value="1">
		</constant>
		<constant name="REVERB_LARGE" value="2">
		</constant>
		<constant name="SAMPLE_FORMAT_PCM16" value="1">
		</constant>
		<constant name="FILTER_BANDLIMIT" value="6">
		</constant>
		<constant name="FILTER_NOTCH" value="4">
		</constant>
		<constant name="FILTER_BANDPASS" value="2">
		</constant>
		<constant name="SAMPLE_FORMAT_PCM8" value="0">
		</constant>
		<constant name="SAMPLE_LOOP_NONE" value="0">
		</constant>
	</constants>
</class>
<class name="AudioServerSW" inherits="AudioServer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="AudioStream" inherits="Resource" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="play"  >
			<description>
			</description>
		</method>
		<method name="stop"  >
			<description>
			</description>
		</method>
		<method name="is_playing" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_loop"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_loop" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_stream_name" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_loop_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="seek_pos"  >
			<argument index="0" name="pos" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_update_mode" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="update"  >
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="UPDATE_IDLE" value="1">
		</constant>
		<constant name="UPDATE_THREAD" value="2">
		</constant>
		<constant name="UPDATE_NONE" value="0">
		</constant>
	</constants>
</class>
<class name="AudioStreamOGG" inherits="AudioStream" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="BCSFX" inherits="ScenarioFX" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="BGColorFX" inherits="ScenarioFX" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="BGImageFX" inherits="ScenarioFX" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="BaseButton" inherits="Control" category="Nodes/GUI Nodes">
	<brief_description>
	Provides a base class for different kinds of buttons.
	</brief_description>
	<description>
	BaseButton is the abstract base class for buttons, so it shouldn&apos;t be used directly (It doesnt display anything). Other types of buttons inherit from it.
	</description>
	<methods>
		<method name="set_pressed"  >
			<argument index="0" name="pressed" type="bool">
			</argument>
			<description>
			Set the button to pressed state (only if toggle_mode is active).
			</description>
		</method>
		<method name="is_pressed" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return when the button is pressed (only if toggle_mode is active).
			</description>
		</method>
		<method name="set_toggle_mode"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			Set the button toggle_mode property. Toggle mode makes the button flip state between pressed and unpressed each time its area is clicked.
			</description>
		</method>
		<method name="is_toggle_mode" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return the toggle_mode property (see [method set_toggle_mode]).
			</description>
		</method>
		<method name="set_disabled"  >
			<argument index="0" name="disabled" type="bool">
			</argument>
			<description>
			Set the button into disabled state. When a button is disabled, it can&apos;t be clicked or toggled.
			</description>
		</method>
		<method name="is_disabled" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return wether the button is in disabled state (see [method set_disabled]).
			</description>
		</method>
		<method name="set_click_on_press"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			Set the button click_on_press mode. This mode generates click signals when a mousebutton or key is just pressed (by default signals are generated when the button/keys are released and both press and release occur in the visual area of the Button).
			</description>
		</method>
		<method name="get_click_on_press" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return the state of the click_on_press property (see [method set_click_on_press]).
			</description>
		</method>
	</methods>
	<signals>
		<signal name="toggled">
			<argument index="0" name="pressed" type="bool">
			</argument>
			<description>
			This signal is emitted when the button was just toggled between pressed and normal states (only if toggle_mode is active). The new state is contained in the [html i]pressed[html /i] argument.
			</description>
		</signal>
		<signal name="pressed">
			<description>
			This signal is emitted every time the button is pressed or toggled.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="BodyShape" inherits="Spatial" category="Nodes/3D/3D Physics Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="BoxShape" inherits="Shape" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_extents"  >
			<argument index="0" name="extents" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_extents" qualifiers="const" >
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Button" inherits="BaseButton" category="Nodes/GUI Nodes">
	<brief_description>
	Standard themed Button.
	</brief_description>
	<description>
	Button is just the standard themed button: [html image src=&quot;images/button_example.png&quot;/] It can contain a text and an icon, and will display them according to the current theme.
	</description>
	<methods>
		<method name="set_text"  >
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			Set the button text, which will be displayed inside the button area.
			</description>
		</method>
		<method name="get_text" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			Return the button text.
			</description>
		</method>
		<method name="set_icon"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			Set the button icon, which will be displayed to the left of the text.
			</description>
		</method>
		<method name="get_icon" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return the button icon.
			</description>
		</method>
		<method name="set_flat"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			Set the [html i]flat[html /i] property of a Button. Flat buttons don&apos;t display decoration unless hoevered or pressed.
			</description>
		</method>
		<method name="set_clip_text"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			Set the [html i]clip_text[html /i] property of a Button. When this property is enabled, text that is too large to fit the button is clipped, when disabled (default) the Button will always be wide enough to hold the text.
			</description>
		</method>
		<method name="get_clip_text" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return the state of the [html i]clip_text[html /i] property (see [method set_clip_text])
			</description>
		</method>
		<method name="is_flat" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return the state of the [html i]flat[html /i] property (see [method set_flat])
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Camera" inherits="Spatial" category="Nodes/3D">
	<brief_description>
	Camera node, displays from a point of view.
	</brief_description>
	<description>
	Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest [Viewport] node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the Camera will register in the global viewport. In other words, a Camera just provides [html i]3D[html /i] display capabilities to a [Viewport], and, without one, a [Scene] registered in that [Viewport] (or higher viewports) can&apos;t be displayed.
	</description>
	<methods>
		<method name="project_ray_normal" qualifiers="const" >
			<return type="Vector3">
			</return>
			<argument index="0" name="screen_point" type="Vector2">
			</argument>
			<description>
			Return a normal vector in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera proyection. This is useful for casting rays in the form of (origin,normal) for object intersection or picking.
			</description>
		</method>
		<method name="project_ray_origin" qualifiers="const" >
			<return type="Vector3">
			</return>
			<argument index="0" name="screen_point" type="Vector2">
			</argument>
			<description>
			Return a 3D position in worldspace, that is the result of projecting a point on the [Viewport] rectangle by the camera proyection. This is useful for casting rays in the form of (origin,normal) for object intersection or picking.
			</description>
		</method>
		<method name="unproject_position" qualifiers="const" >
			<return type="Vector2">
			</return>
			<argument index="0" name="world_point" type="Vector3">
			</argument>
			<description>
			Return how a 3D point in worldpsace maps to a 2D coordinate in the [Viewport] rectangle.
			</description>
		</method>
		<method name="set_perspective"  >
			<argument index="0" name="fov" type="real">
			</argument>
			<argument index="1" name="z_near" type="real">
			</argument>
			<argument index="2" name="z_far" type="real">
			</argument>
			<description>
			Set the camera projection to perspective mode, by specifying a [html i]FOV[html /i] angle in degrees (FOV means Field of View), and the [html i]near[html /i] and [html i]far[html /i] clip planes in worldspace units.
			</description>
		</method>
		<method name="set_orthogonal"  >
			<argument index="0" name="size" type="real">
			</argument>
			<argument index="1" name="z_near" type="real">
			</argument>
			<argument index="2" name="z_far" type="real">
			</argument>
			<description>
			Set the camera projection to orthogonal mode, by specifying a rectangle and the [html i]near[html /i] and [html i]far[html /i] clip planes in worldspace units. (As a hint, 2D games often use this projection, with values specified in pixels)
			</description>
		</method>
		<method name="make_current"  >
			<description>
			Make this camera the current Camera for the [Viewport] (see class description). If the Camera Node is outside the scene tree, it will attempt to become current once it&apos;s added.
			</description>
		</method>
		<method name="clear_current"  >
			<description>
			</description>
		</method>
		<method name="is_current" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return wether the Camera is the current one in the [Viewport], or plans to become current (if outside the scene tree).
			</description>
		</method>
		<method name="get_camera_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<description>
			Get the camera transform. Subclassed cameras (such as CharacterCamera) may provide different transforms than the [Node] transform.
			</description>
		</method>
		<method name="get_fov" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PROJECTION_PERSPECTIVE" value="0">
			Perspective Projection (object&apos;s size on the screen becomes smaller when far away).
		</constant>
		<constant name="PROJECTION_ORTHOGONAL" value="1">
			Orthogonal Projection (objects remain the same size on the screen no matter how far away they are).
		</constant>
	</constants>
</class>
<class name="CanvasItem" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="edit_set_state"  >
			<argument index="0" name="state" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="edit_get" qualifiers="const" >
			<description>
			</description>
		</method>
		<method name="edit_set_rect"  >
			<argument index="0" name="rect" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="edit_rotate"  >
			<argument index="0" name="degrees" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_rect" qualifiers="const" >
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_canvas_item" qualifiers="const" >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="is_visible" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_hidden" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="show"  >
			<description>
			</description>
		</method>
		<method name="hide"  >
			<description>
			</description>
		</method>
		<method name="update"  >
			<description>
			</description>
		</method>
		<method name="set_as_toplevel"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_set_as_toplevel" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_blend_mode"  >
			<argument index="0" name="blend_mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_blend_mode" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_opacity"  >
			<argument index="0" name="opacity" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_opacity" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_self_opacity"  >
			<argument index="0" name="self_opacity" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_self_opacity" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="item_rect_changed">
			<description>
			</description>
		</signal>
		<signal name="draw">
			<description>
			</description>
		</signal>
		<signal name="visibility_changed">
			<description>
			</description>
		</signal>
		<signal name="hide">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_EXIT_CANVAS" value="33">
		</constant>
		<constant name="NOTIFICATION_DRAW" value="30">
		</constant>
		<constant name="BLEND_MODE_MUL" value="3">
		</constant>
		<constant name="BLEND_MODE_MIX" value="0">
		</constant>
		<constant name="NOTIFICATION_ENTER_CANVAS" value="32">
		</constant>
		<constant name="NOTIFICATION_VISIBILITY_CHANGED" value="31">
		</constant>
		<constant name="BLEND_MODE_ADD" value="1">
		</constant>
		<constant name="BLEND_MODE_SUB" value="2">
		</constant>
	</constants>
</class>
<class name="CapsuleShape" inherits="Shape" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_radius"  >
			<argument index="0" name="radius" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_radius" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_height"  >
			<argument index="0" name="height" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_height" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="CheckButton" inherits="BaseButton" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_text"  >
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_text" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ColorPicker" inherits="Control" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_color"  >
			<argument index="0" name="arg0" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color" qualifiers="const" >
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="color_changed">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="ConcavePolygonShape" inherits="Shape" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_faces"  >
			<argument index="0" name="faces" type="Vector3Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_faces" qualifiers="const" >
			<return type="Vector3Array">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ConfirmationDialog" inherits="Popup" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_ok"  >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_cancel"  >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_text"  >
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_hide_on_ok"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_hide_on_ok" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="register_text_enter"  >
			<argument index="0" name="line_edit" type="Object">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="confirmed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="Control" inherits="CanvasItem" category="Core">
	<brief_description>
	Control is the base class Node for all the GUI components.
	</brief_description>
	<description>
	Control is the base class Node for all the GUI components. Every GUI component inherits from it, directly or indirectly. Control Nodes contain positions relative to their parent control nodes. In this way, sections of the scene tree made of contiguous Control Nodes, become user interfaces.[html br/]&#10;&#9;Controls contain a [html i]canvas item[html /i] RID from the visual server, and can draw to it when receiving a NOTIFICATION_DRAW.[html br/]&#10;&#9;TODO: Explain margins and anchors[html br/]&#10;&#9;TODO: explain focus[html br/]
	</description>
	<methods>
		<method name="accept_event"  >
			<description>
			</description>
		</method>
		<method name="get_minimum_size" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			Return the minimum size this Control can shrink to. A control will never be displayed or resized smaller than its minimum size.
			</description>
		</method>
		<method name="is_window" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return wether this control is a [html i]window[html /i]. Controls are considered windows when their parent [Node] is not a Control.
			</description>
		</method>
		<method name="get_window" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return the [html i]window[html /i] for this control, ascending the scene tree (see [method is_window]).
			</description>
		</method>
		<method name="set_anchor"  >
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="anchor_mode" type="int">
			</argument>
			<description>
			Change the anchor (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) type for a margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Changing the anchor mode converts the current margin offset from the previos anchor mode to the new one, so margin offsets ([method set_margin]) must be done after setting anchors, or at the same time ([method set_anchor_and_margin]).
			</description>
		</method>
		<method name="get_anchor" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			Return the anchor type (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) for a given margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM).
			</description>
		</method>
		<method name="set_margin"  >
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="offset" type="real">
			</argument>
			<description>
			Set a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being set depends on the anchor mode.
			</description>
		</method>
		<method name="set_anchor_and_margin"  >
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="anchor_mode" type="int">
			</argument>
			<argument index="2" name="offset" type="real">
			</argument>
			<description>
			Change the anchor (ANCHOR_BEGIN, ANCHOR_END, ANCHOR_RATIO) type for a margin (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM), and also set its offset. This is a helper (see [method set_anchor] and [method set_margin]).
			</description>
		</method>
		<method name="set_begin"  >
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<description>
			Sets MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).
			</description>
		</method>
		<method name="set_end"  >
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<description>
			Sets MARGIN_RIGHT and MARGIN_BOTTOM at the same time. This is a helper (see [method set_margin]).
			</description>
		</method>
		<method name="set_pos"  >
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<description>
			Move the Control to a new position, relative to the top-left corner of the parent Control, changing all margins if needed and without changing current anchor mode. This is a helper (see [method set_margin]).
			</description>
		</method>
		<method name="set_size"  >
			<argument index="0" name="size" type="Vector2">
			</argument>
			<description>
			Changes MARGIN_RIGHT and MARGIN_BOTTOM to fit a given size. This is a helper (see [method set_margin]).
			</description>
		</method>
		<method name="set_global_pos"  >
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<description>
			Move the Control to a new position, relative to the top-left corner of the [html i]window[html /i] Control, and without changing current anchor mode. (see [method set_margin]).
			</description>
		</method>
		<method name="get_margin" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			Return a margin offset. Margin can be one of (MARGIN_LEFT, MARGIN_TOP, MARGIN_RIGHT, MARGIN_BOTTOM). Offset value being returned depends on the anchor mode.
			</description>
		</method>
		<method name="get_begin" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_end" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			Returns MARGIN_LEFT and MARGIN_TOP at the same time. This is a helper (see [method set_margin]).
			</description>
		</method>
		<method name="get_pos" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			Returns the Control position, relative to the top-left corner of the parent Control and independly of the anchor mode.
			</description>
		</method>
		<method name="get_size" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			Returns the size of the Control, computed from all margins, however the size returned will [html b]never be smaller than the minimum size reported by [method get_minimum_size][html /b]. This means that even if end position of the Control rectangle is smaller than the begin position, the Control will still display and interact correctly. (see description, [method get_minimum_size], [method set_margin], [method set_anchor]).
			</description>
		</method>
		<method name="get_global_pos" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			Returns the Control position, relative to the top-left corner of the parent Control and independent of the anchor mode.
			</description>
		</method>
		<method name="get_rect" qualifiers="const" >
			<return type="Rect2">
			</return>
			<description>
			Return position and size of the Control, relative to the top-left corner of the parent Control. This is a helper (see [method get_pos],[method get_size]).
			</description>
		</method>
		<method name="get_global_rect" qualifiers="const" >
			<return type="Rect2">
			</return>
			<description>
			Return position and size of the Control, relative to the top-left corner of the [html i]window[html /i] Control. This is a helper (see [method get_global_pos],[method get_size]).
			</description>
		</method>
		<method name="set_area_as_parent_rect"  >
			<description>
			Change all margins and anchors, so this Control always takes up the same area as the parent Control. This is a helper (see [method set_anchor],[method set_margin]).
			</description>
		</method>
		<method name="show_modal"  >
			<argument index="0" name="exclusive" type="bool" default="false">
			</argument>
			<description>
			Display a Control as modal. Control must be a subwindow (see [method set_as_subwindow]). Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.
			</description>
		</method>
		<method name="set_focus_mode"  >
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			Set the focus access mode for the control (FOCUS_NONE, FOCUS_CLICK, FOCUS_ALL). Only one Control can be focused at the same time, and it will receive keyboard signals.
			</description>
		</method>
		<method name="has_focus" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return wether the Control is the current focused control (see [method set_focus_mode]).
			</description>
		</method>
		<method name="grab_focus"  >
			<description>
			Steal the focus from another control and become the focused control (see [method set_focus_mode]).
			</description>
		</method>
		<method name="set_theme"  >
			<argument index="0" name="theme" type="Object">
			</argument>
			<description>
			Override whole the [Theme] for this Control and all its children controls.
			</description>
		</method>
		<method name="get_theme" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return a [Theme] override, if one exists (see [method set_theme]).
			</description>
		</method>
		<method name="add_icon_override"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="texture" type="Object">
			</argument>
			<description>
			Override a single icon ([Texture]) in the theme of this Control. If texture is empty, override is cleared.
			</description>
		</method>
		<method name="add_style_override"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="stylebox" type="Object">
			</argument>
			<description>
			Override a single stylebox ([Stylebox]) in the theme of this Control. If stylebox is empty, override is cleared.
			</description>
		</method>
		<method name="add_font_override"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="font" type="Object">
			</argument>
			<description>
			Override a single font (font) in the theme of this Control. If font is empty, override is cleared.
			</description>
		</method>
		<method name="add_color_override"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_constant_override"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="constant" type="int">
			</argument>
			<description>
			Override a single constant (integer) in the theme of this Control. If constant equals Theme.INVALID_CONSTANT, override is cleared.
			</description>
		</method>
		<method name="get_parent_control" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return the parent Control. Unlike get_parent() in [Node], only returns a valid object if the parent is a Control.
			</description>
		</method>
		<method name="set_tooltip"  >
			<argument index="0" name="tooltip" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tooltip" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="atpos" type="Vector2" default="Vector2(0,0)">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_cursor_shape"  >
			<argument index="0" name="shape" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_default_cursor_shape" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_cursor_shape" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="pos" type="Vector2" default="Vector2(0,0)">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_focus_neighbour"  >
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="neighbour" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_focus_neighbour" qualifiers="const" >
			<return type="NodePath">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="focus_enter">
			<description>
			</description>
		</signal>
		<signal name="mouse_enter">
			<description>
			</description>
		</signal>
		<signal name="resized">
			<description>
			</description>
		</signal>
		<signal name="focus_exit">
			<description>
			</description>
		</signal>
		<signal name="input_event">
			<description>
			</description>
		</signal>
		<signal name="mouse_exit">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="CURSOR_FDIAGSIZE" value="12">
		</constant>
		<constant name="CURSOR_CAN_DROP" value="7">
		</constant>
		<constant name="CURSOR_DRAG" value="6">
		</constant>
		<constant name="CURSOR_IBEAM" value="1">
		</constant>
		<constant name="NOTIFICATION_FOCUS_ENTER" value="37">
			Control gained focus.
		</constant>
		<constant name="CURSOR_MOVE" value="13">
		</constant>
		<constant name="NOTIFICATION_MOUSE_ENTER" value="35">
			Mouse pointer entered the area of the Control.
		</constant>
		<constant name="NOTIFICATION_RESIZED" value="34">
			Control changed size (get_size() reports the new size).
		</constant>
		<constant name="FOCUS_CLICK" value="1">
			Control can acquire focus only if clicked.
		</constant>
		<constant name="CURSOR_HELP" value="16">
		</constant>
		<constant name="CURSOR_VSIZE" value="9">
		</constant>
		<constant name="CURSOR_VSPLIT" value="14">
		</constant>
		<constant name="CURSOR_BDIAGSIZE" value="11">
		</constant>
		<constant name="CURSOR_CROSS" value="3">
		</constant>
		<constant name="CURSOR_POINTING_HAND" value="2">
		</constant>
		<constant name="NOTIFICATION_FOCUS_EXIT" value="38">
			Control lost focus.
		</constant>
		<constant name="FOCUS_NONE" value="0">
			Control can&apos;t acquire focus.
		</constant>
		<constant name="ANCHOR_BEGIN" value="0">
			X is relative to MARGIN_LEFT,  Y is relative to MARGIN_TOP,
		</constant>
		<constant name="CURSOR_HSIZE" value="10">
		</constant>
		<constant name="CURSOR_BUSY" value="5">
		</constant>
		<constant name="CURSOR_ARROW" value="0">
		</constant>
		<constant name="NOTIFICATION_MODAL_CLOSE" value="40">
		</constant>
		<constant name="NOTIFICATION_MOUSE_EXIT" value="36">
			Mouse pointer exited the area of the Control.
		</constant>
		<constant name="FOCUS_ALL" value="2">
			Control can acquire focus if clicked, or by pressing TAB/Directionals in the keyboard from another Control.
		</constant>
		<constant name="CURSOR_HSPLIT" value="15">
		</constant>
		<constant name="ANCHOR_RATIO" value="2">
			X and Y are a ratio (0 to 1) relative to the parent size 0 is left/top, 1 is right/bottom.
		</constant>
		<constant name="ANCHOR_END" value="1">
			X is relative to -MARGIN_RIGHT,  Y is relative to -MARGIN_BOTTOM,
		</constant>
		<constant name="CURSOR_FORBIDDEN" value="8">
		</constant>
		<constant name="CURSOR_WAIT" value="4">
		</constant>
		<constant name="NOTIFICATION_THEME_CHANGED" value="39">
		</constant>
	</constants>
</class>
<class name="ConvexPolygonShape" inherits="Shape" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_planes"  >
			<argument index="0" name="planes" type="Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_planes" qualifiers="const" >
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="GridMap" inherits="Spatial" category="Nodes/3D">
	<brief_description>
	GridMap is like a tile map, but in 3D.
	</brief_description>
	<description>
	GridMap is a 3D Tile map, using [html i]3D Cells[html /i] instead of tiles. On each cell, a mesh and a collision volume can be placed from a [MeshLibrary]. GridMap is used for designing worlds quickly. Despite that GridMaps can contain up to hundreds millions of cells, they are very optimized, and only use resources for the cells that contain items.
	</description>
	<methods>
		<method name="set_theme"  >
			<argument index="0" name="theme" type="Object">
			</argument>
			<description>
			Set a MeshLibrary. Cell indices refer to items in the theme.
			</description>
		</method>
		<method name="get_theme" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Get the current MeshLibrary (if exists).
			</description>
		</method>
		<method name="set_cell_size"  >
			<argument index="0" name="size" type="real">
			</argument>
			<description>
			Set the size of a cell, in worldpsace units. All cells in a GridMap are the same size.
			</description>
		</method>
		<method name="get_cell_size" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the current cell size.
			</description>
		</method>
		<method name="set_octant_size"  >
			<argument index="0" name="size" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_octant_size" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_width"  >
			<argument index="0" name="width" type="int">
			</argument>
			<description>
			Set the width of the GridMap. Width is the amount of cells i the direction of the X coordinate.
			</description>
		</method>
		<method name="get_width" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Get the width of the GridMap. Width is the amount of cells i the direction of the X coordinate.
			</description>
		</method>
		<method name="set_height"  >
			<argument index="0" name="height" type="int">
			</argument>
			<description>
			Set the height of the GridMap. Height is the amount of cells i the direction of the Y coordinate.
			</description>
		</method>
		<method name="get_height" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Get the height of the GridMap. Height is the amount of cells i the direction of the Y coordinate.
			</description>
		</method>
		<method name="set_depth"  >
			<argument index="0" name="depth" type="int">
			</argument>
			<description>
			Set the depth of the GridMap. Depth is the amount of cells i the direction of the Z coordinate.
			</description>
		</method>
		<method name="get_depth" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Get the depth of the GridMap. Depth is the amount of cells i the direction of the Z coordinate.
			</description>
		</method>
		<method name="set_cell_item"  >
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="z" type="int">
			</argument>
			<argument index="3" name="item" type="int">
			</argument>
			<argument index="4" name="orientation" type="int" default="0">
			</argument>
			<description>
			Set a cell item (x,y,z pos). Cell items are indices to items in the [MeshLibrary].
			</description>
		</method>
		<method name="get_cell_item" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="z" type="int">
			</argument>
			<description>
			Get a cell item (x,y,z pos). Cell items are indices to items in the [MeshLibrary].
			</description>
		</method>
		<method name="get_cell_item_orientation" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="z" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="resource_changed"  >
			<argument index="0" name="arg0" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_center_x"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_center_x" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_center_y"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_center_y" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_center_z"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_center_z" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_clip"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<argument index="1" name="clipabove" type="bool" default="true">
			</argument>
			<argument index="2" name="floor" type="int" default="0">
			</argument>
			<argument index="3" name="axis" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="crate_area"  >
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="area" type="AABB">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_bounds" qualifiers="const" >
			<return type="AABB">
			</return>
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_exterior_portal"  >
			<argument index="0" name="area" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_name"  >
			<argument index="0" name="area" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_name" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_is_exterior_portal" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_portal_disable_distance"  >
			<argument index="0" name="area" type="int">
			</argument>
			<argument index="1" name="distance" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_portal_disable_distance" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_portal_disable_color"  >
			<argument index="0" name="area" type="int">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_portal_disable_color" qualifiers="const" >
			<return type="Color">
			</return>
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="erase_area"  >
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_unused_area_id" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="INVALID_CELL_ITEM" value="-1">
			Value indicating that a cell item is not used or invalid.
		</constant>
	</constants>
</class>
<class name="MeshLibrary" inherits="Resource" category="Resources">
	<brief_description>
	Theme for a [GridMap].
	</brief_description>
	<description>
	MeshLibrary is [Resource] containing the data used in a [GridMap]. It&apos;s filled with items, each containing a mesh and a collision shape.
	</description>
	<methods>
		<method name="create_item"  >
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			Create a new item, and assign it a given id.
			</description>
		</method>
		<method name="set_item_name"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
			Set the name of an item, referenced by id.
			</description>
		</method>
		<method name="set_item_mesh"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="mesh" type="Object">
			</argument>
			<description>
			Set the [Mesh] of an item, referenced by id.
			</description>
		</method>
		<method name="set_item_shape"  >
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="shape" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_name" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			Get the name of an item, referenced by id.
			</description>
		</method>
		<method name="get_item_mesh" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			Get the [Mesh] of an item, referenced by id.
			</description>
		</method>
		<method name="get_item_shape" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_item"  >
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			Remove an item, referenced by id.
			</description>
		</method>
		<method name="clear"  >
			<description>
			Clear all items contained in this resource.
			</description>
		</method>
		<method name="get_item_list" qualifiers="const" >
			<return type="IntArray">
			</return>
			<description>
			Get the list of item IDs contained in this theme.
			</description>
		</method>
		<method name="get_last_unused_item_id" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Get the last unused item id. This is useful for creating new item IDs.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="CylinderShape" inherits="Shape" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_radius"  >
			<argument index="0" name="radius" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_radius" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_height"  >
			<argument index="0" name="height" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_height" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="DOFBlurFX" inherits="ScenarioFX" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="DirectionalLight" inherits="Light" category="Nodes/3D/3D Visual Nodes/3D Light Nodes">
	<brief_description>
	Directional Light, such as the Sun or the Moon.
	</brief_description>
	<description>
	A DirectionalLight is a type of [Light] node that emits light constantly in one direction (the negative z axis of the node). It is used lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldpace location of the DirectionalLight transform (origin) is ignored, only the basis is used do determine light direction.
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="DynamicBody" inherits="PhysicsBody" category="Nodes/3D">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_mass"  >
			<argument index="0" name="mass" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_friction"  >
			<argument index="0" name="friction" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_bounce"  >
			<argument index="0" name="bounce" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mass" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_friction" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_bounce" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_linear_velocity"  >
			<argument index="0" name="linear_velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_linear_velocity" qualifiers="const" >
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_angular_velocity"  >
			<argument index="0" name="angular_velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_angular_velocity" qualifiers="const" >
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_sleeping"  >
			<argument index="0" name="sleeping" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_sleeping" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_applied_force"  >
			<argument index="0" name="applied_force" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_applied_force" qualifiers="const" >
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_applied_torque"  >
			<argument index="0" name="applied_torque" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_applied_torque" qualifiers="const" >
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="apply_local_impulse"  >
			<argument index="0" name="pos" type="Vector3">
			</argument>
			<argument index="1" name="impulse" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_axis_velocity"  >
			<argument index="0" name="axis_velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_direct_state_control"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_direct_state_control_enabled" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_omit_force_integration"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_omitting_force_integration" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="DynamicCharacterBody" inherits="DynamicBody" category="Nodes/3D">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="DynamicCustomBody" inherits="DynamicBody" category="Nodes/3D">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_mode"  >
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="DynamicRigidBody" inherits="DynamicBody" category="Nodes/3D">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="FileDialog" inherits="Popup" category="Nodes/GUI Nodes">
	<brief_description>
	Dialog for selecting files or directories in the filesystem.
	</brief_description>
	<description>
	FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks.
	</description>
	<methods>
		<method name="clear_filters"  >
			<description>
			Clear all the added filters in the dialog.
			</description>
		</method>
		<method name="add_filter"  >
			<argument index="0" name="filter" type="String">
			</argument>
			<description>
			Add a custom filter. Filter format is: &quot;mask ; description.
			</description>
		</method>
		<method name="get_current_dir" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			Get the current working directory of the file dialog.
			</description>
		</method>
		<method name="get_current_file" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			Get the current selected file of the file dialog (empty if none).
			</description>
		</method>
		<method name="get_current_path" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			Get the current selected path (directory and file) of the file dialog (empty if none).
			</description>
		</method>
		<method name="set_current_dir"  >
			<argument index="0" name="dir" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_current_file"  >
			<argument index="0" name="file" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_current_path"  >
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_mode"  >
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			Set the file dialog mode from the MODE_* enum.
			</description>
		</method>
		<method name="get_mode" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Get the file dialog mode from the MODE_* enum.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="dir_selected">
			<argument index="0" name="dir" type="String">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="file_selected">
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			Event emitted when the user selects a file (double clicks it or presses the OK button).
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="MODE_OPEN_DIR" value="1">
		</constant>
		<constant name="MODE_OPEN_FILE" value="0">
			Editor will not allow to select nonexistent files.
		</constant>
		<constant name="MODE_SAVE_FILE" value="2">
			Editor will warn when a file exists.
		</constant>
	</constants>
</class>
<class name="FixedMaterial" inherits="Material" category="Resources">
	<brief_description>
	Simple Material with a fixed parameter set.
	</brief_description>
	<description>
	FixedMaterial is a simple type of material [Resource], which contains a fixed amount of paramters. It is the only type of material supported in fixed-pipeline devices and APIs. It is also an often a better alternative to [ShaderMaterial] for most simple use cases.
	</description>
	<methods>
		<method name="set_shader"  >
			<argument index="0" name="shader" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shader" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_parameter"  >
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="value" type="var">
			</argument>
			<description>
			Set a parameter, parameters are defined in the PARAM_* enum. The type of each parameter may change, so it&apos;s best to check the enum.
			</description>
		</method>
		<method name="get_parameter" qualifiers="const" >
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			Return a parameter, parameters are defined in the PARAM_* enum. The type of each parameter may change, so it&apos;s best to check the enum.
			</description>
		</method>
		<method name="set_texture"  >
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="texture" type="Object">
			</argument>
			<description>
			Set a texture. Textures change parameters per texel and are mapped to the model depending on the texcoord mode (see [method set_texcoord_mode]).
			</description>
		</method>
		<method name="get_texture" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			Return a texture. Textures change parameters per texel and are mapped to the model depending on the texcoord mode (see [method set_texcoord_mode]).
			</description>
		</method>
		<method name="set_texgen_mode"  >
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			Set the texture coordinate generation mode. Materials have a unique, texgen mode which can generate texture coordinates on the fly. Texgen mode must be one of the values from the TEXGEN_* enum. TEXGEN can be selected as a texture coordinate mode (see [method set_texcoord_mode]).
			</description>
		</method>
		<method name="get_texgen_mode" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the texture coordinate generation mode. Materials have a unique, texgen mode which can generate texture coordinates on the fly. Texgen mode must be one of the values from the TEXGEN_* enum. TEXGEN can be selected as a texture coordinate mode (see [method set_texcoord_mode]).
			</description>
		</method>
		<method name="set_texcoord_mode"  >
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="mode" type="int">
			</argument>
			<description>
			Set the texture coordinate mode. Each texture param (from the PARAM_* enum) has one. It defines how the textures are mapped to the object.
			</description>
		</method>
		<method name="get_texcoord_mode" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			Return the texture coordinate mode. Each texture param (from the PARAM_* enum) has one. It defines how the textures are mapped to the object.
			</description>
		</method>
		<method name="set_uv_transform"  >
			<argument index="0" name="transform" type="Transform">
			</argument>
			<description>
			Sets a special transform used to post-transform UV coordinates of the uv_xfrom tecoord mode: TEXCOORD_UV_TRANSFORM
			</description>
		</method>
		<method name="get_uv_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<description>
			Returns the special transform used to post-transform UV coordinates of the uv_xfrom tecoord mode: TEXCOORD_UV_TRANSFORM
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PARAM_SPECULAR_EXP" value="4">
			Specular Exponent (size of the specular dot)
		</constant>
		<constant name="PARAM_DETAIL" value="1">
			Detail Layer for diffuse lighting.
		</constant>
		<constant name="TEXCOORD_UV2" value="2">
			Read texture coordinates from the UV2 array.
		</constant>
		<constant name="TEXGEN_SCREENZ" value="3">
			Use the screen coordinates as UV, scaled by depth and the screenz coefficient.
		</constant>
		<constant name="TEXCOORD_UV_TRANSFORM" value="1">
			Read texture coordinates from the UV array and transform them by uv_xform.
		</constant>
		<constant name="TEXGEN_LOCAL_XY" value="0">
			Use object local X and Y coordinates as UV.
		</constant>
		<constant name="PARAM_SHADE_PARAM" value="8">
		</constant>
		<constant name="PARAM_MAX" value="9">
			Maximum amount of parameters
		</constant>
		<constant name="PARAM_DIFFUSE" value="0">
			Diffuse Lighting (light scattered from surface).
		</constant>
		<constant name="PARAM_EMISSION" value="3">
			Emission Lighting (light emitted from the surface)
		</constant>
		<constant name="PARAM_SPECULAR" value="2">
			Specular Lighting (light reflected from the surface).
		</constant>
		<constant name="PARAM_DETAIL_MIX" value="6">
			Mix coefficient for the detail layer.
		</constant>
		<constant name="TEXGEN_SPHERE" value="1">
			Use view normal reflected by object normal as UV.
		</constant>
		<constant name="PARAM_NORMAL" value="7">
			Normal Map (irregularity map).
		</constant>
		<constant name="PARAM_GLOW" value="5">
			Glow (Visible emitted scattered light).
		</constant>
		<constant name="TEXCOORD_UV" value="0">
			Read texture coordinates from the UV array.
		</constant>
		<constant name="TEXCOORD_TEXGEN" value="3">
			Use texture coordinates from the texgen.
		</constant>
		<constant name="TEXGEN_SCREEN" value="2">
			Use the screen coordinates as UV.
		</constant>
	</constants>
</class>
<class name="FogFX" inherits="ScenarioFX" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="FollowCamera" inherits="Camera" category="Nodes/3D">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_orbit"  >
			<argument index="0" name="orbit" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_orbit" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_orbit_x"  >
			<argument index="0" name="x" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_orbit_y"  >
			<argument index="0" name="y" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_min_orbit_x"  >
			<argument index="0" name="x" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_min_orbit_x" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_max_orbit_x"  >
			<argument index="0" name="x" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_max_orbit_x" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_height"  >
			<argument index="0" name="height" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_height" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_inclination"  >
			<argument index="0" name="inclination" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_inclination" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="rotate_orbit"  >
			<argument index="0" name="arg0" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_distance"  >
			<argument index="0" name="distance" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_distance" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_max_distance"  >
			<argument index="0" name="max_distance" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_max_distance" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_min_distance"  >
			<argument index="0" name="min_distance" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_min_distance" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_clip"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_clip" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autoturn"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_autoturn" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autoturn_tolerance"  >
			<argument index="0" name="degrees" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_autoturn_tolerance" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autoturn_speed"  >
			<argument index="0" name="speed" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_autoturn_speed" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_smoothing"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_smoothing" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_rotation_smoothing"  >
			<argument index="0" name="amount" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_rotation_smoothing" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_translation_smoothing"  >
			<argument index="0" name="amount" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_translation_smoothing" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_use_lookat_target"  >
			<argument index="0" name="use" type="bool">
			</argument>
			<argument index="1" name="lookat" type="Vector3" default="Vector3(0, 0, 0)">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Font" inherits="Resource" category="Resources">
	<brief_description>
	Internationalized font and text drawing support.
	</brief_description>
	<description>
	Font contains an unicode compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts. TODO check wikipedia for graph of ascent/baseline/descent/height/etc.
	</description>
	<methods>
		<method name="set_height"  >
			<argument index="0" name="px" type="real">
			</argument>
			<description>
			Set the total font height (ascent plus descent) in pixels.
			</description>
		</method>
		<method name="get_height" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the total font height (ascent plus descent) in pixels.
			</description>
		</method>
		<method name="set_ascent"  >
			<argument index="0" name="px" type="real">
			</argument>
			<description>
			Set the font ascent (number of pixels above the baseline).
			</description>
		</method>
		<method name="get_ascent" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the font ascent (number of pixels above the baseline).
			</description>
		</method>
		<method name="get_descent" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the font descent (number of pixels below the baseline).
			</description>
		</method>
		<method name="add_kerning_pair"  >
			<argument index="0" name="char_a" type="int">
			</argument>
			<argument index="1" name="char_b" type="int">
			</argument>
			<argument index="2" name="kerning" type="int">
			</argument>
			<description>
			Add a kerning pair to the [Font] as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.
			</description>
		</method>
		<method name="get_kerning_pair" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			Return a kerning pair as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character.
			</description>
		</method>
		<method name="add_texture"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			Add a texture to the [Font].
			</description>
		</method>
		<method name="add_char"  >
			<argument index="0" name="character" type="int">
			</argument>
			<argument index="1" name="texture" type="int">
			</argument>
			<argument index="2" name="rect" type="Rect2">
			</argument>
			<argument index="3" name="align" type="Vector2" default="Vector2(0,0)">
			</argument>
			<argument index="4" name="advance" type="real" default="-1">
			</argument>
			<description>
			Add a character to the font, where &quot;character&quot; is the unicode value, &quot;texture&quot; is the texture index, &quot;rect&quot; is the region in the texture (in pixels!), &quot;align&quot; is the (optional) alignment for the character and &quot;advance&quot; is the (optional) advance.
			</description>
		</method>
		<method name="get_char_size" qualifiers="const" >
			<return type="Vector2">
			</return>
			<argument index="0" name="char" type="int">
			</argument>
			<argument index="1" name="next" type="int" default="0">
			</argument>
			<description>
			Return the size of a character, optionally taking kerning into account if the next character is provided.
			</description>
		</method>
		<method name="get_string_size" qualifiers="const" >
			<return type="Vector2">
			</return>
			<argument index="0" name="string" type="String">
			</argument>
			<description>
			Return the size of a string, taking kerning and advance into account.
			</description>
		</method>
		<method name="clear"  >
			<description>
			Clear all the font data.
			</description>
		</method>
		<method name="draw" qualifiers="const" >
			<argument index="0" name="canvas_item" type="RID">
			</argument>
			<argument index="1" name="pos" type="Vector2">
			</argument>
			<argument index="2" name="string" type="String">
			</argument>
			<argument index="3" name="modulate" type="Color" default="Color(1,1,1,1)">
			</argument>
			<argument index="4" name="clip_w" type="int" default="-1">
			</argument>
			<description>
			Draw &quot;string&quot; into a canvas item using the font at a given &quot;pos&quot; position, with &quot;modulate&quot; color, and optionally clipping the width. &quot;pos&quot; specifies te baseline, not the top. To draw from the top, [html i]ascent[html /i] must be added to the Y axis.
			</description>
		</method>
		<method name="draw_char" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="canvas_item" type="RID">
			</argument>
			<argument index="1" name="pos" type="Vector2">
			</argument>
			<argument index="2" name="char" type="int">
			</argument>
			<argument index="3" name="next" type="int" default="-1">
			</argument>
			<argument index="4" name="modulate" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			Draw character &quot;char&quot; into a canvas item using the font at a given &quot;pos&quot; position, with &quot;modulate&quot; color, and optionally kerning if &quot;next&quot; is apassed. clipping the width. &quot;pos&quot; specifies te baseline, not the top. To draw from the top, [html i]ascent[html /i] must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="GammaFX" inherits="ScenarioFX" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="_Geometry" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="build_box_planes"  >
			<return type="Array">
			</return>
			<argument index="0" name="extents" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="build_cylinder_planes"  >
			<return type="Array">
			</return>
			<argument index="0" name="radius" type="real">
			</argument>
			<argument index="1" name="height" type="real">
			</argument>
			<argument index="2" name="sides" type="int">
			</argument>
			<argument index="3" name="axis" type="int" default="2">
			</argument>
			<description>
			</description>
		</method>
		<method name="build_capsule_planes"  >
			<return type="Array">
			</return>
			<argument index="0" name="radius" type="real">
			</argument>
			<argument index="1" name="height" type="real">
			</argument>
			<argument index="2" name="sides" type="int">
			</argument>
			<argument index="3" name="lats" type="int">
			</argument>
			<argument index="4" name="axis" type="int" default="2">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Globals" inherits="Object" category="Core">
	<brief_description>
	Contains global variables accessible from everywhere.
	</brief_description>
	<description>
	Contains global variables accessible from everywhere. Use the normal [Object] API, such as &quot;Globals.get(variable)&quot;, &quot;Globals.set(variable,value)&quot; or &quot;Globals.has(variable)&quot; to access them. Variables stored in engine.cfg are also loaded into globals, making this object very useful for reading custom game configuration options.
	</description>
	<methods>
		<method name="has" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_order"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_order" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_persisting"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_persisting" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear"  >
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="localize_path" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="globalize_path" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="GlowFX" inherits="ScenarioFX" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="HDRFX" inherits="ScenarioFX" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="HScrollBar" inherits="ScrollBar" category="Nodes/GUI Nodes">
	<brief_description>
	Horizontal version of [ScrollBar], which goes from top (min) to bottom (max).
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="HSeparator" inherits="Separator" category="Nodes/GUI Nodes">
	<brief_description>
	Horizontal version of [Separator].
	</brief_description>
	<description>
	Horizontal version of [Separator]. It is used to separate objects vertiacally, though (but it looks horizontal!).
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="HSlider" inherits="Slider" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="IP" inherits="Object" category="Networking">
	<brief_description>
	IP Protocol support functions.
	</brief_description>
	<description>
	IP contains some support functions for the IPv4 protocol. TCP/IP support is in different classes (see [TCP_Client], [TCP_Server]). IP provides hostname resolution support, both blocking and threaded.
	</description>
	<methods>
		<method name="resolve_hostname"  >
			<return type="String">
			</return>
			<argument index="0" name="host" type="String">
			</argument>
			<description>
			Resolve a given hostname, blocking. Resolved hostname is returned as an IP.
			</description>
		</method>
		<method name="resolve_hostname_queue_item"  >
			<return type="int">
			</return>
			<argument index="0" name="host" type="String">
			</argument>
			<description>
			Create a queue item for resolving a given hostname. The queue ID is returned, or RESOLVER_INVALID_ID on error.
			</description>
		</method>
		<method name="get_resolve_item_status" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			Return the status of hostname queued for resolving, given it&apos;s queue ID. Returned status can be any of the RESOLVER_STATUS_* enumeration.
			</description>
		</method>
		<method name="get_resolve_item_address" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			Return a resolved item address, or an empty string if an error happened or resolution didn&apos;t happen yet (see [method get_resolve_item_status]).
			</description>
		</method>
		<method name="erase_resolve_item"  >
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			Erase a queue ID, removing it from the queue if needed. This should be used after a queue is completed to free it and enable more queries to happen.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="RESOLVER_INVALID_ID" value="-1">
		</constant>
		<constant name="RESOLVER_MAX_QUERIES" value="32">
		</constant>
		<constant name="RESOLVER_STATUS_NONE" value="0">
		</constant>
		<constant name="RESOLVER_STATUS_ERROR" value="3">
		</constant>
		<constant name="RESOLVER_STATUS_WAITING" value="1">
		</constant>
		<constant name="RESOLVER_STATUS_DONE" value="2">
		</constant>
	</constants>
</class>
<class name="IP_Unix" inherits="IP" category="Networking">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="InputMap" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Label" inherits="Range" category="Nodes/GUI Nodes">
	<brief_description>
	Control that displays formatted text.
	</brief_description>
	<description>
	Label is a control that displays formatted text, optionally autowrapping it to the [Control] area. It inherits from range to be able to scroll wrapped text vertically.
	</description>
	<methods>
		<method name="set_align"  >
			<argument index="0" name="align" type="int">
			</argument>
			<description>
			Set the alignmend mode to any of the ALIGN_* enumeration values.
			</description>
		</method>
		<method name="get_align" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the alignmend mode (any of the ALIGN_* enumeration values).
			</description>
		</method>
		<method name="set_text"  >
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			Set the label text. Text can contain newlines.
			</description>
		</method>
		<method name="get_text" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			Return the label text. Text can contain newlines.
			</description>
		</method>
		<method name="set_autowrap"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			Set [html i]autowrap[html /i] mode. When enabled, autowrap will fit text to the control width, breaking sentences when they exceed the available horizontal space. When disabled, the label minimum width becomes the width of the longest row, and the minimum height large enough to fit all rows.
			</description>
		</method>
		<method name="has_autowrap" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return the state of the [html i]autowrap[html /i] mode (see [method set_autowrap]).
			</description>
		</method>
	</methods>
	<constants>
		<constant name="ALIGN_CENTER" value="1">
			Align rows centered.
		</constant>
		<constant name="ALIGN_LEFT" value="0">
			Align rows to the left (default).
		</constant>
		<constant name="ALIGN_RIGHT" value="2">
			Align rows to the right (default).
		</constant>
		<constant name="ALIGN_FILL" value="3">
			Expand row whitespaces to fit the width.
		</constant>
	</constants>
</class>
<class name="Light" inherits="VisualInstance" category="Nodes/3D/3D Visual Nodes/3D Light Nodes">
	<brief_description>
	Provides a base class for different kinds of light nodes.
	</brief_description>
	<description>
	Light is the abstract base class for light nodes, so it shouldn&apos;t be used directly (It can&apos;t be instanced). Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.
	</description>
	<methods>
		<method name="set_parameter"  >
			<argument index="0" name="variable" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_parameter" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_color"  >
			<argument index="0" name="color" type="int">
			</argument>
			<argument index="1" name="value" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color" qualifiers="const" >
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_project_shadows"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_project_shadows" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_projector"  >
			<argument index="0" name="projector" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_projector" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_operator"  >
			<argument index="0" name="operator" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_operator" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="COLOR_DIFFUSE" value="1">
		</constant>
		<constant name="PARAM_SPOT_ANGLE" value="1">
		</constant>
		<constant name="PARAM_ATTENUATION" value="4">
		</constant>
		<constant name="COLOR_SPECULAR" value="2">
		</constant>
		<constant name="COLOR_AMBIENT" value="0">
		</constant>
		<constant name="PARAM_SHADOW_DARKENING" value="5">
		</constant>
		<constant name="PARAM_RADIUS" value="2">
		</constant>
		<constant name="PARAM_SPOT_ATTENUATION" value="4">
		</constant>
		<constant name="PARAM_ENERGY" value="3">
		</constant>
	</constants>
</class>
<class name="LineEdit" inherits="Control" category="Nodes/GUI Nodes">
	<brief_description>
	Control that provides single line string editing.
	</brief_description>
	<description>
	LineEdit provides a single line string editor, used for text fields.
	</description>
	<methods>
		<method name="clear"  >
			<description>
			Clear the [LineEdit] text.
			</description>
		</method>
		<method name="select_all"  >
			<description>
			Select the whole string.
			</description>
		</method>
		<method name="set_text"  >
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			Set the text in the [LineEdit], clearing the existing one and the selection.
			</description>
		</method>
		<method name="get_text" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			Return the text in the [LineEdit].
			</description>
		</method>
		<method name="set_cursor_pos"  >
			<argument index="0" name="pos" type="int">
			</argument>
			<description>
			Set the cursor position inside the [LineEdit], causing it to scroll if needed.
			</description>
		</method>
		<method name="get_cursor_pos" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the cursor position inside the [LineEdit].
			</description>
		</method>
		<method name="set_max_length"  >
			<argument index="0" name="chars" type="int">
			</argument>
			<description>
			Set the maximum amount of characters the [LineEdit] can edit, and cropping existing text in case it exceeds that limit. Setting 0 removes the limit.
			</description>
		</method>
		<method name="get_max_length" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the maximum amount of characters the [LineEdit] can edit. If 0 is returned, no limit exists.
			</description>
		</method>
		<method name="append_at_cursor"  >
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			Append text at cursor, scrolling the [LineEdit] when needed.
			</description>
		</method>
		<method name="set_editable"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			Set the [html i]editable[html /i] status of the [LineEdit]. When disabled, existing text can&apos;t be modified and new text can&apos;t be added.
			</description>
		</method>
		<method name="is_editable" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return the [html i]editable[html /i] status of the [LineEdit] (see [method set_editable]).
			</description>
		</method>
		<method name="set_secret"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			Set the [html i]secret[html /i] status of the [LineEdit]. When enabled, every character is displayed as &quot;*&quot;.
			</description>
		</method>
		<method name="is_secret" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return the [html i]secret[html /i] status of the [LineEdit] (see [method set_secret]).
			</description>
		</method>
		<method name="select" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="text_entered">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			This signal is emitted when the user presses KEY_ENTER on the [LineEdit]. This signal is often used as an alternate confirmation mechanism in dialogs.
			</description>
		</signal>
		<signal name="text_changed">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			When the text changes, this signal is emitted.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="MainLoop" inherits="Object" category="Main Loop">
	<brief_description>
	Main loop is the abstract main loop base class.
	</brief_description>
	<description>
	Main loop is the abstract main loop base class. All other main loop classes are derived from it. Upon application start, a [MainLoop] has to be provided to OS, else the application will exit. This happens automatically (and a [SceneMainLoop] is created), unless a main [Script] is supplied, which may or not create and return a [MainLoop].
	</description>
	<methods>
	</methods>
	<constants>
		<constant name="NOTIFICATION_WM_QUIT_REQUEST" value="7">
		</constant>
		<constant name="NOTIFICATION_WM_FOCUS_IN" value="5">
		</constant>
		<constant name="NOTIFICATION_WM_FOCUS_OUT" value="6">
		</constant>
	</constants>
</class>
<class name="Material" inherits="Resource" category="Resources">
	<brief_description>
	Abstract base [Resource] for coloring and shading geometry.
	</brief_description>
	<description>
	Material is a base [Resource] used for coloring and shading geometry. All materials inherit from it and almost all [VisualInstance] derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here.
	</description>
	<methods>
		<method name="set_flag"  >
			<argument index="0" name="flag" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			Set a [Material] flag, which toggles on or off a behavior when rendering. See enumeration FLAG_* for a list.
			</description>
		</method>
		<method name="get_flag" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="flag" type="int">
			</argument>
			<description>
			Return a [Material] flag, which toggles on or off a behavior when rendering. See enumeration FLAG_* for a list.
			</description>
		</method>
		<method name="set_hint"  >
			<argument index="0" name="hint" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_hint" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="hint" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_blend_mode"  >
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			Set blend mode for the material, which can be one of BLEND_MODE_MIX (default), BLEND_MODE_ADD, BLEND_MODE_SUB. Keep in mind that only BLEND_MODE_MIX ensures that the material [html i]may[html /i] be opaque, any other blend mode will render with alpha blending enabled in raster-based [VisualServer] implementations.
			</description>
		</method>
		<method name="get_blend_mode" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return blend mode for the material, which can be one of BLEND_MODE_MIX (default), BLEND_MODE_ADD, BLEND_MODE_SUB. Keep in mind that only BLEND_MODE_MIX ensures that the material [html i]may[html /i] be opaque, any other blend mode will render with alpha blending enabled in raster-based [VisualServer] implementations.
			</description>
		</method>
		<method name="set_shade_model"  >
			<argument index="0" name="model" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shade_model" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_line_width"  >
			<argument index="0" name="width" type="real">
			</argument>
			<description>
			Set the line width for geometry drawn with FLAG_WIREFRAME enabled, or LINE primitives. Note that not all hardware or VisualServer backends support this (like DirectX).
			</description>
		</method>
		<method name="get_line_width" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the line width for geometry drawn with FLAG_WIREFRAME enabled, or LINE primitives. Note that not all hardware or VisualServer backends support this (like DirectX).
			</description>
		</method>
		<method name="set_shader_param"  >
			<argument index="0" name="param" type="String">
			</argument>
			<argument index="1" name="arg1" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shader_param" qualifiers="const" >
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="SHADE_MODEL_FRESNEL" value="2">
		</constant>
		<constant name="SHADE_MODEL_LAMBERT" value="0">
		</constant>
		<constant name="HINT_DECAL" value="0">
		</constant>
		<constant name="FLAG_WIREFRAME" value="5">
			Triangle geometry is drawn as lines if this flag is enabled.
		</constant>
		<constant name="SHADE_MODEL_TOON" value="3">
		</constant>
		<constant name="SHADE_MODEL_LAMBERT_WRAP" value="1">
		</constant>
		<constant name="HINT_NO_SHADOW" value="2">
		</constant>
		<constant name="FLAG_DOUBLE_SIDED" value="1">
			Both front facing and back facing triangles are rendered when this flag is enabled.
		</constant>
		<constant name="FLAG_BILLBOARD_TOGGLE" value="6">
			Geometry world transform is computed as billboard if this flag is enabled, often used for impostors.
		</constant>
		<constant name="FLAG_UNSHADED" value="3">
			Shading (lighting) is disabled when this flag is enabled.
		</constant>
		<constant name="BLEND_MODE_MIX" value="0">
			Use the regular alpha blending equation (source and dest colors are faded) (default).
		</constant>
		<constant name="SHADE_MODEL_CUSTOM_0" value="4">
		</constant>
		<constant name="SHADE_MODEL_CUSTOM_1" value="5">
		</constant>
		<constant name="FLAG_MAX" value="7">
			Maximum amount of flags
		</constant>
		<constant name="FLAG_VISIBLE" value="0">
			Geometry is visible when this flag is enabled (default).
		</constant>
		<constant name="SHADE_MODEL_CUSTOM_2" value="6">
		</constant>
		<constant name="HINT_MAX" value="4">
		</constant>
		<constant name="HINT_NO_DEPTH_DRAW" value="3">
		</constant>
		<constant name="BLEND_MODE_ADD" value="1">
			Use additive blending equation, often used for particle effects such as fire or light decals.
		</constant>
		<constant name="SHADE_MODEL_CUSTOM_3" value="7">
		</constant>
		<constant name="HINT_OPAQUE_PRE_PASS" value="1">
		</constant>
		<constant name="FLAG_ONTOP" value="4">
		</constant>
		<constant name="BLEND_MODE_SUB" value="2">
			Use substractive blending equation, often used for some smoke effects or types of glass.
		</constant>
		<constant name="FLAG_INVERT_FACES" value="2">
			Front facing and back facing order is swapped when this flag is enabled.
		</constant>
	</constants>
</class>
<class name="MenuButton" inherits="Button" category="Nodes/GUI Nodes">
	<brief_description>
	Special button that brings up a [PopupMenu] when clicked.
	</brief_description>
	<description>
	Special button that brings up a [PopupMenu] when clicked. That&apos;s pretty much all it does, as it&apos;s just a helper class when bulding GUIs.
	</description>
	<methods>
		<method name="get_popup"  >
			<return type="Object">
			</return>
			<description>
			Return the [PopupMenu] contained in this button.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="about_to_show">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="Mesh" inherits="Resource" category="Resources">
	<brief_description>
	A [Resource] that contains vertex-array based geometry.
	</brief_description>
	<description>
	Mesh is a type of [Resource] that contains vertex-array based geometry, divided in [html i]surfaces[html /i]. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is prefered to a single surface, because objects created in 3D editing software commonly contain multiple materials.
	</description>
	<methods>
		<method name="add_morph_target"  >
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_morph_target_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_morph_target" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_morph_targets"  >
			<description>
			</description>
		</method>
		<method name="add_surface"  >
			<argument index="0" name="primitive" type="int">
			</argument>
			<argument index="1" name="format" type="int">
			</argument>
			<argument index="2" name="array_len" type="int">
			</argument>
			<argument index="3" name="index_array_len" type="int">
			</argument>
			<description>
			Create a new surface ([method get_surface_count] will become surf_idx for this.[html br/]&#10;&#9;&#9;&#9;Surfaces are created to be rendered using a &quot;primitive&quot;, which may be PRIMITIVE_POINTS, PRIMITIVE_LINES, PRIMITIVE_LINE_STRIP, PRIMITIVE_LINE_LOOP, PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP, PRIMITIVE_TRIANGLE_FAN. (As a note, when using indices, it is recommended to only use just points, lines or triangles).[html br/]&#10;&#9;&#9;&#9;The format of a surface determines which arrays it will allocate and hold, so &quot;format&quot; is a combination of ARRAY_FORMAT_* mask constants ORed together. ARRAY_FORMAT_VERTEX must be always present. &quot;array_len&quot; determines the amount of vertices in the array (not primitives!). if ARRAY_FORMAT_INDEX is in the format mask, then it means that an index array will be allocated and &quot;index_array_len&quot; must be passed.
			</description>
		</method>
		<method name="get_surface_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the amount of surfaces that the [Mesh] holds.
			</description>
		</method>
		<method name="surface_remove"  >
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			Remove a surface at position surf_idx, shifting greater surfaces one surf_idx slot down.
			</description>
		</method>
		<method name="surface_set_array"  >
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<argument index="1" name="array" type="int">
			</argument>
			<argument index="2" name="data" type="var">
			</argument>
			<description>
			Set a surface array, array must be defined in the format (see [method add_surface]), and which array being set in &quot;data&quot; must be indicated passing a value from the ARRAY_* enum (NOT THE ARRAY_FORMAT_ enum!!). A Mesh can&apos;t be displayed (error will be reported) if an array that is present in the format was not set.
			</description>
		</method>
		<method name="surface_get_array" qualifiers="const" >
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<argument index="1" name="array" type="int">
			</argument>
			<description>
			Return a surface array, array must be defined in the format (see [method add_surface]), and which array being returned must be indicated passing a value from the ARRAY_* enum (NOT THE ARRAY_FORMAT_ enum!!) (see [method add_surface]).
			</description>
		</method>
		<method name="surface_get_array_len" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			Return the length in vertices of the vertex array in the requested surface (see [method add_surface]).
			</description>
		</method>
		<method name="surface_get_array_index_len" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			Return the length in indices of the index array in the requested surface (see [method add_surface]).
			</description>
		</method>
		<method name="surface_get_format" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			Return the format mask of the requested surface (see [method add_surface]).
			</description>
		</method>
		<method name="surface_get_primitive_type" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			Return the primitive type of the requested surface (see [method add_surface]).
			</description>
		</method>
		<method name="surface_set_material"  >
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<argument index="1" name="arg1" type="Object">
			</argument>
			<description>
			Set a [Material] for a given surface. Surface will be rendered using this material.
			</description>
		</method>
		<method name="surface_get_material" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			Return a [Material] in a given surface. Surface is rendered using this material.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PRIMITIVE_LINES" value="1">
			Render array as lines (every two vertices a line is created).
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV2" value="32">
		</constant>
		<constant name="ARRAY_TEX_UV2" value="5">
		</constant>
		<constant name="ARRAY_WEIGHTS_SIZE" value="4">
			Amount of weights/bone indices per vertex (always 4).
		</constant>
		<constant name="ARRAY_FORMAT_VERTEX" value="1">
			Array format will include vertices (mandatory).
		</constant>
		<constant name="ARRAY_VERTEX" value="0">
			Vertex array (array of [Vector3]() vertices).
		</constant>
		<constant name="PRIMITIVE_POINTS" value="0">
			Render array as points (one vertex equals one point).
		</constant>
		<constant name="ARRAY_FORMAT_BONES" value="64">
			Array format will include bone indices.
		</constant>
		<constant name="ARRAY_FORMAT_COLOR" value="8">
			Array format will include a color array.
		</constant>
		<constant name="ARRAY_BONES" value="6">
			Array of bone indices, as a float array. Each element in groups of 4 floats.
		</constant>
		<constant name="ARRAY_COLOR" value="3">
			Vertex array (array of [Color]() colors).
		</constant>
		<constant name="ARRAY_FORMAT_INDEX" value="256">
			Index array will be used.
		</constant>
		<constant name="ARRAY_INDEX" value="8">
			Array of integers, used as indices referencing vertices. No index can be beyond the vertex array size.
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_STRIP" value="5">
			Render array as triangle strips.
		</constant>
		<constant name="ARRAY_FORMAT_TANGENT" value="4">
			Array format will include tangents
		</constant>
		<constant name="ARRAY_FORMAT_NORMAL" value="2">
			Array format will include normals
		</constant>
		<constant name="ARRAY_TANGENT" value="2">
			Tangent array, array of groups of 4 floats. first 3 floats determine the tangent, and the last the binormal direction as -1 or 1.
		</constant>
		<constant name="ARRAY_NORMAL" value="1">
			Normal array (array of [Vector3]() normals).
		</constant>
		<constant name="PRIMITIVE_TRIANGLES" value="4">
			Render array as triangles (every three vertices a triangle is created).
		</constant>
		<constant name="PRIMITIVE_LINE_LOOP" value="3">
			Render array as line loop (like line strip, but closed).
		</constant>
		<constant name="PRIMITIVE_LINE_STRIP" value="2">
			Render array as line strip.
		</constant>
		<constant name="ARRAY_FORMAT_WEIGHTS" value="128">
			Array format will include bone weights.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV" value="16">
			Array format will include UVs.
		</constant>
		<constant name="ARRAY_WEIGHTS" value="7">
			Array of bone weights, as a float array. Each element in groups of 4 floats.
		</constant>
		<constant name="ARRAY_TEX_UV" value="4">
			UV array (array of [Vector3]() UVs or float array of groups of 2 floats (u,v)).
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_FAN" value="6">
			Render array as triangle fans.
		</constant>
		<constant name="NO_INDEX_ARRAY" value="-1">
			Default value used for index_array_len when no indices are present.
		</constant>
	</constants>
</class>
<class name="MeshInstance" inherits="VisualInstance" category="Nodes/3D/3D Visual Nodes">
	<brief_description>
	Node that instances meshes into a [Scenario].
	</brief_description>
	<description>
	MeshInstance is a [Node] that takes a [Mesh] resource and adds it to the current [Scenario] by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a sigle [Mesh] in many places. This allows to reuse geometry and save on resources. When a [Mesh] has to be instanced more than thousands of times at close proximity, consider using a [MultiMesh] in a [MultiMeshInstance] instead.
	</description>
	<methods>
		<method name="set_mesh"  >
			<argument index="0" name="mesh" type="Object">
			</argument>
			<description>
			Set the [Mesh] resource for the instance.
			</description>
		</method>
		<method name="get_mesh" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return the current [Mesh] resource for the instance.
			</description>
		</method>
		<method name="get_aabb" qualifiers="const" >
			<return type="AABB">
			</return>
			<description>
			Return the AABB of the mesh, in local coordinates.
			</description>
		</method>
		<method name="create_trimesh_collision"  >
			<description>
			This helper creates a [StaticBody] child [Node] using the mesh geometry as collision. It&apos;s mainly used for testing.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Misc" inherits="Node" category="Core">
	<brief_description>
	Soon to be removed, bye bye.
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="MultiMesh" inherits="Resource" category="Resources">
	<brief_description>
	Provides high perfomance mesh instancing.
	</brief_description>
	<description>
	MultiMesh provides low level mesh instancing. If the amount of [Mesh] instances needed goes from hundreds to thousands (and most need to be visible at close proximity) creating such a large amount of [MeshInstance] nodes may affect performance by using too much CPU or video memory. [html br/]For this case a MultiMesh becomes very useful, as it can draw thousands of instances with little API overhead.[html br/] As a drawback, if the instances are too far away of each other, performance may be reduced as every sigle instance will always rendered (they are spatially indexed as one, for the whole object).[html br/] Since instances may have any  behavior, the AABB used for visibility must be provided by the user, or generated with [method generate_aabb].
	</description>
	<methods>
		<method name="set_mesh"  >
			<argument index="0" name="arg0" type="Object">
			</argument>
			<description>
			Set the [Mesh] resource to be drawn in multiple instances.
			</description>
		</method>
		<method name="get_mesh" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return the [Mesh] resource drawn as multiple instances.
			</description>
		</method>
		<method name="set_instance_count"  >
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			Set the amount of instnces that is going to be drawn. Changing this number will erase all the existing instance transform and color data.
			</description>
		</method>
		<method name="get_instance_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the amount of instnces that is going to be drawn.
			</description>
		</method>
		<method name="set_instance_transform"  >
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="Transform">
			</argument>
			<description>
			Set the transform for a specific instance.
			</description>
		</method>
		<method name="get_instance_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			Return the transform of a specific instance.
			</description>
		</method>
		<method name="set_instance_color"  >
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="Color">
			</argument>
			<description>
			Set the color of a specific instance.
			</description>
		</method>
		<method name="get_instance_color" qualifiers="const" >
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			Get the color of a specific instance.
			</description>
		</method>
		<method name="set_aabb"  >
			<argument index="0" name="arg0" type="AABB">
			</argument>
			<description>
			Set the visibility AABB. If not provided, MultiMesh will not be visible.
			</description>
		</method>
		<method name="get_aabb" qualifiers="const" >
			<return type="AABB">
			</return>
			<description>
			Return the visibility AABB.
			</description>
		</method>
		<method name="generate_aabb"  >
			<description>
			Generate a new visibility AABB, using mesh AABB and instance transforms. Since instance information is stored in the [VisualServer], this function is VERY SLOW and must NOT be used often.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="MultiMeshInstance" inherits="VisualInstance" category="Nodes/3D/3D Visual Nodes">
	<brief_description>
	Node that instances a [MultiMesh].
	</brief_description>
	<description>
	MultiMeshInstance is a [Node] that takes a [MultiMesh] resource and adds it to the current [Scenario] by creating an instance of it (yes, this is an instance of instances).
	</description>
	<methods>
		<method name="set_multimesh"  >
			<argument index="0" name="multimesh" type="Object">
			</argument>
			<description>
			Set the [MultiMesh] to be instance.
			</description>
		</method>
		<method name="get_multimesh" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return the [MultiMesh] that is used for instancing.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Node" inherits="Object" category="Nodes">
	<brief_description>
	Base class for all the &quot;Scene&quot; elements.
	</brief_description>
	<description>
	Nodes can be set as children of other nodes, resulting in a tree arrangement. Any tree of nodes is called a &quot;Scene&quot;.[html br/] Scenes can be saved to disk, and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of the projects. Scenes become &quot;active&quot; and part of the &quot;Scene Tree&quot; once they are added as children of a [RootNode].[html br/][html br/]&#10;&#9;As an illustrative example, a Scene (tree of nodes):&#10;&#9;[html div align=&quot;center&quot;][html img src=&quot;images/scene.png&quot;/][html /div]&#10;&#9;This scene will was edited separatedly, then is added as part of a game (by instancing it), becoming part of a &quot;Scene Tree&quot;:&#10;&#9;[html div align=&quot;center&quot;][html img src=&quot;images/scene_tree.png&quot;/][html /div]&#10;&#9;In short, nodes are an effective all-in-one way to create and organize assets, gameplay and game data.&#10;&#9;When a Node is freed (deleted), it will delete all its children&#10;&#9;nodes.&#10;&#9;TODO: explain better process/signal/group call ordering
	</description>
	<methods>
		<method name="set_name"  >
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			Set the name of the [Node]. Name must be unique within parent, and setting an already existing name will cause for the node to be automatically renamed.
			</description>
		</method>
		<method name="get_name" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			Return the name of the [Node]. Name is be unique within parent.
			</description>
		</method>
		<method name="add_child"  >
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			Add a child [Node]. Nodes can have as many children as they want, but every child must have a unique name. Children nodes are automatically deleted when the parent node is deleted, so deleting a whole scene is performed by deleting its topmost node.
			</description>
		</method>
		<method name="remove_child"  >
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			Remove a child [Node]. Node is NOT deleted and will have to be deleted manually.
			</description>
		</method>
		<method name="get_child_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the amount of children nodes.
			</description>
		</method>
		<method name="get_child" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Return a children node by it&apos;s index (see [method get_child_count]). This method is often used for iterating all children of a node.
			</description>
		</method>
		<method name="has_node" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_node" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			Fetch a node. &quot;path&quot; must be valid (or else error will occur) and can be either the name of a child node, a relative path (from the current node to another node), or an absolute path to a node.[html br/] Examples ofa paths are: get_node(&quot;Sword&quot;) , get_node(&quot;../Swamp/Alligator&quot;) , get_node(&quot;/MyGame&quot;). [html br/]Note: fetching absolute paths only works when the node is inside the scene tree (see [method is_inside_tree]).
			</description>
		</method>
		<method name="get_parent" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return the parent [Node] of the current [Node], or an empty Object if the node lacks a parent.
			</description>
		</method>
		<method name="is_inside_scene" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_a_parent_of" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			Return [html i]true[html /i] if the &quot;node&quot; argument is a direct or indirect child of the current node, otherwise return [html i]false[html /i].
			</description>
		</method>
		<method name="is_greater_than" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			Return [html i]true[html /i] if &quot;node&quot; occurs later in the scene hierarchy than the current node, otherwise return [html i]false[html /i].
			</description>
		</method>
		<method name="get_path" qualifiers="const" >
			<return type="NodePath">
			</return>
			<description>
			Return the absolute path of the current node. This only works if the curent node is inside the scene tree (see [method is_inside_tree]).
			</description>
		</method>
		<method name="get_path_to" qualifiers="const" >
			<return type="NodePath">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			Return the relative path from the current node to the specified node in &quot;node&quot; argument. Both nodes must be in the same scene, or else the function will fail.
			</description>
		</method>
		<method name="add_to_group"  >
			<argument index="0" name="group" type="String">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			Add a node to a group. Groups are helpers to name and organize group of nodes, like for example: &quot;Enemies&quot; &quot;Collectables&quot;, etc. A [Node] can be in any number of groups. Nodes can be assigned a group at any time, but will not be added to it until they are inside the scene tree (see [method is_inside_tree]).
			</description>
		</method>
		<method name="remove_from_group"  >
			<argument index="0" name="group" type="String">
			</argument>
			<description>
			Remove a node from a group.
			</description>
		</method>
		<method name="move_child"  >
			<argument index="0" name="child_node" type="Node">
			</argument>
			<argument index="1" name="to_pos" type="int">
			</argument>
			<description>
			Move a child node to a different position (order) amongst the other children. Since calls, signals, etc are performed by tree order, changing the order of chilren nodes may be useful.
			</description>
		</method>
		<method name="raise"  >
			<description>
			Move this node to the top of the array of nodes of the parent node. This is often useful on GUIs ([Control]), because their order of drawing fully depends on their order in the tree.
			</description>
		</method>
		<method name="set_owner"  >
			<argument index="0" name="arg0" type="Object">
			</argument>
			<description>
			Set the node owner. A node can have any other node as owner (as long as a valid parent, grandparent, etc ascending in the tree). When saving a node (using SceneSaver) all the nodes it owns will be saved with it. This allows to create complex SceneTrees, with instancing and subinstancing.
			</description>
		</method>
		<method name="get_owner" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Get the node owner (see [method set_node_owner]).
			</description>
		</method>
		<method name="remove_and_skip"  >
			<description>
			Remove a node and set all its children as childrens of the parent node (if exists). All even subscriptions that pass by the removed node will be unsubscribed.
			</description>
		</method>
		<method name="get_index" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Get the node index in the parent (assuming it has a parent).
			</description>
		</method>
		<method name="print_tree"  >
			<description>
			Print the screne to stdout. Used mainly for debugging purposes.
			</description>
		</method>
		<method name="set_filename"  >
			<argument index="0" name="filename" type="String">
			</argument>
			<description>
			A node can contain a filename. This filename should not be changed by the user, unless writing editors and tools. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded.
			</description>
		</method>
		<method name="get_filename" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			Return a filename that may be containedA node can contained by the node. When a scene is instanced from a file, it topmost node contains the filename from where it was loaded (see [method set_filename]).
			</description>
		</method>
		<method name="propagate_notification"  >
			<argument index="0" name="what" type="int">
			</argument>
			<description>
			Notify the current node and all its chldren recursively by calling notification() in all of them.
			</description>
		</method>
		<method name="set_process"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			Enables or disables node processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every frame. It is common to check how much time was elapsed since the previous frame by calling [method get_process_time]. If the application is set to run at 60 fps, NOTIFICATION_PROCESS will be received 60 times per second (even if the visuals are running at faster or lower fps). Because of this, nodes that wish to do processing are recommended to use [method set_idle_process] instead, unless strong syncronization is requiered (for example, to modify the behavior of physics objects).
			</description>
		</method>
		<method name="get_process_time" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the amount of time elapsed (in seconds) between two succesive NOTIFICATION_PROCESS notifications.
			</description>
		</method>
		<method name="is_processing" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return wether processing is enabled in the current node.
			</description>
		</method>
		<method name="set_idle_process"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			Enables or disables node idle processing. When a node is being idle-processed, it will receive a NOTIFICATION_IDLE_PROCESS when idle. It is common to check how much time was elapsed since the previous idle time by calling [method get_idle_process_time]. Idle processing is commonly syncronized to [VisualServer] being done rendering a frame, so this type of processing is syncronized to the visible frames per second. To syncronize with the desired frames per second, see [method set_process] instead.
			</description>
		</method>
		<method name="get_idle_process_time" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the amount of time elapsed (in seconds) between two succesive NOTIFICATION_IDLE_PROCESS notifications.
			</description>
		</method>
		<method name="is_idle_processing" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return wether idle processing is enabled in the current node.
			</description>
		</method>
		<method name="set_process_input"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_processing_input" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_process_unhandled_input"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_processing_unhandled_input" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_process_mode"  >
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_process_mode" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_world"  >
			<argument index="0" name="world" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_world" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_current_world" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_scene" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="duplicate" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="arg0" type="Object">
			</argument>
			<argument index="1" name="arg1" type="bool" default="NULL">
			</argument>
			<description>
			Return a duplicate of the scene, with all nodes and parameters copied. Subscriptions will not be duplicated.
			</description>
		</method>
		<method name="replace_by"  >
			<argument index="0" name="node" type="Node">
			</argument>
			<argument index="1" name="keep_data" type="bool" default="false">
			</argument>
			<description>
			Replace a node in a scene by a given one. Subscriptions that pass through this node will be lost.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="enter_scene">
			<description>
			</description>
		</signal>
		<signal name="renamed">
			<description>
			</description>
		</signal>
		<signal name="exit_scene">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_ENTER_WORLD" value="20">
		</constant>
		<constant name="PROCESS_PAUSE" value="1">
		</constant>
		<constant name="NOTIFICATION_UNPARENTED" value="19">
			Notification received when a node is unparented (parent removed it from the list of children).
		</constant>
		<constant name="NOTIFICATION_CHILDREN_CONFIGURED" value="14">
		</constant>
		<constant name="NOTIFICATION_PROCESS" value="16">
			Notification received every frame when the process flag is set (see [method set_process]).
		</constant>
		<constant name="NOTIFICATION_EXIT_SCENE" value="11">
		</constant>
		<constant name="PROCESS_ALWAYS" value="2">
		</constant>
		<constant name="PROCESS_NORMAL" value="0">
		</constant>
		<constant name="NOTIFICATION_EXIT_WORLD" value="21">
		</constant>
		<constant name="NOTIFICATION_MOVED_IN_PARENT" value="12">
		</constant>
		<constant name="NOTIFICATION_PARENTED" value="18">
			Notification received when a node is set as a child of another node. Note that this doesn&apos;t mean that a node entered the Scene Tree.
		</constant>
		<constant name="NOTIFICATION_ENTER_SCENE" value="10">
		</constant>
		<constant name="NOTIFICATION_IDLE_PROCESS" value="17">
			Notification received every time the application enters idle  when the idle process flag is set (see [method set_process]).
		</constant>
	</constants>
</class>
<class name="Node2D" inherits="CanvasItem" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_pos"  >
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_rot"  >
			<argument index="0" name="rot" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_scale"  >
			<argument index="0" name="scale" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_rot" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_scale" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NOTIFICATION_DRAW" value="30">
		</constant>
	</constants>
</class>
<class name="_OS" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_mouse_show"  >
			<argument index="0" name="show" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_mouse_grab"  >
			<argument index="0" name="grab" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_mouse_grab_enabled" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_mouse_pos" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_clipboard"  >
			<argument index="0" name="clipboard" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_clipboard" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_video_mode"  >
			<argument index="0" name="size" type="Vector2">
			</argument>
			<argument index="1" name="fullscreen" type="bool">
			</argument>
			<argument index="2" name="resizable" type="bool">
			</argument>
			<argument index="3" name="screen" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_video_mode_size" qualifiers="const" >
			<return type="Vector2">
			</return>
			<argument index="0" name="screen" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_video_mode_fullscreen" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="screen" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_video_mode_resizable" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="screen" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_fullscreen_mode_list" qualifiers="const" >
			<return type="Array">
			</return>
			<argument index="0" name="screen" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_iterations_per_second"  >
			<argument index="0" name="iterations_per_second" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_iterations_per_second" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_low_processor_usage_mode"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_in_low_processor_usage_mode" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_executable_path" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="execute"  >
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="arguments" type="StringArray">
			</argument>
			<argument index="2" name="blocking" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="kill"  >
			<return type="int">
			</return>
			<argument index="0" name="pid" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_environment" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="environment" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_environment" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="environment" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_name" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_cmdline_args"  >
			<return type="StringArray">
			</return>
			<description>
			</description>
		</method>
		<method name="get_main_loop" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_date" qualifiers="const" >
			<return type="Dictionary">
			</return>
			<description>
			</description>
		</method>
		<method name="get_time" qualifiers="const" >
			<return type="Dictionary">
			</return>
			<description>
			</description>
		</method>
		<method name="delay_usec" qualifiers="const" >
			<argument index="0" name="usec" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_ticks_msec" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="can_draw" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_frames_drawn"  >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="is_stdout_verbose" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="MONTH_NOVEMBER" value="10">
		</constant>
		<constant name="MONTH_OCTOBER" value="9">
		</constant>
		<constant name="MONTH_DECEMBER" value="11">
		</constant>
		<constant name="MONTH_SEPTEMBER" value="8">
		</constant>
		<constant name="MONTH_MAY" value="4">
		</constant>
		<constant name="DAY_FRIDAY" value="5">
		</constant>
		<constant name="DAY_TUESDAY" value="2">
		</constant>
		<constant name="MONTH_APRIL" value="3">
		</constant>
		<constant name="MONTH_FEBRUARY" value="1">
		</constant>
		<constant name="DAY_MONDAY" value="1">
		</constant>
		<constant name="MONTH_AUGUST" value="7">
		</constant>
		<constant name="MONTH_JUNE" value="5">
		</constant>
		<constant name="MONTH_JANUARY" value="0">
		</constant>
		<constant name="MONTH_MARCH" value="2">
		</constant>
		<constant name="MONTH_JULY" value="6">
		</constant>
		<constant name="DAY_THURSDAY" value="4">
		</constant>
		<constant name="DAY_WEDNESDAY" value="3">
		</constant>
		<constant name="DAY_SUNDAY" value="0">
		</constant>
		<constant name="DAY_SATURDAY" value="6">
		</constant>
	</constants>
</class>
<class name="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_type" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="is_type" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set"  >
			<argument index="0" name="property" type="String">
			</argument>
			<argument index="1" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get" qualifiers="const" >
			<argument index="0" name="property" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_property_list" qualifiers="const" >
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
		<method name="notification"  >
			<argument index="0" name="what" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_instance_ID" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_script"  >
			<argument index="0" name="script" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_script" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_meta"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_meta" qualifiers="const" >
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_meta" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_meta_list" qualifiers="const" >
			<return type="StringArray">
			</return>
			<description>
			</description>
		</method>
		<method name="call"  >
			<argument index="0" name="method" type="String">
			</argument>
			<argument index="1" name="arg1" type="var" default="NULL">
			</argument>
			<argument index="2" name="arg2" type="var" default="NULL">
			</argument>
			<argument index="3" name="arg3" type="var" default="NULL">
			</argument>
			<argument index="4" name="arg4" type="var" default="NULL">
			</argument>
			<description>
			</description>
		</method>
		<method name="call_deferred"  >
			<argument index="0" name="method" type="String">
			</argument>
			<argument index="1" name="arg1" type="var" default="NULL">
			</argument>
			<argument index="2" name="arg2" type="var" default="NULL">
			</argument>
			<argument index="3" name="arg3" type="var" default="NULL">
			</argument>
			<argument index="4" name="arg4" type="var" default="NULL">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_user_signal"  >
			<argument index="0" name="signal" type="String">
			</argument>
			<argument index="1" name="arguments" type="Array" default="Array()">
			</argument>
			<description>
			</description>
		</method>
		<method name="emit_signal"  >
			<argument index="0" name="signal" type="String">
			</argument>
			<argument index="1" name="arguments" type="Array" default="Array()">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_signal_list" qualifiers="const" >
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
		<method name="connect"  >
			<argument index="0" name="signal" type="String">
			</argument>
			<argument index="1" name="target" type="Object">
			</argument>
			<argument index="2" name="method" type="String">
			</argument>
			<argument index="3" name="binds" type="Array" default="Array()">
			</argument>
			<argument index="4" name="flags" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="disconnect"  >
			<argument index="0" name="signal" type="String">
			</argument>
			<argument index="1" name="target" type="Object">
			</argument>
			<argument index="2" name="method" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_block_signals"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_blocking_signals" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NOTIFICATION_POSTINITIALIZE" value="0">
		</constant>
		<constant name="NOTIFICATION_PREDELETE" value="1">
		</constant>
	</constants>
</class>
<class name="OmniLight" inherits="Light" category="Nodes/3D/3D Visual Nodes/3D Light Nodes">
	<brief_description>
	OmniDirectional Light, such as a lightbulb or a candle.
	</brief_description>
	<description>
	An OmniDirectional light is a type of [Light] node that emits lights in all directions. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light]. TODO: Image of an omnilight.
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="OptionButton" inherits="Button" category="Nodes/GUI Nodes">
	<brief_description>
	Button control that provides selectable options when pressed.
	</brief_description>
	<description>
	OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the &quot;current&quot; item and is displayed as the button text.
	</description>
	<methods>
		<method name="add_item"  >
			<argument index="0" name="label" type="String">
			</argument>
			<argument index="1" name="id" type="int" default="-1">
			</argument>
			<description>
			Add an item, with text &quot;label&quot; and (optionally) id. If no &quot;id&quot; is passed, &quot;id&quot; becomes the item index. New items are appended at the end.
			</description>
		</method>
		<method name="add_icon_item"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<argument index="1" name="label" type="String">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<description>
			Add an item, with a &quot;texture&quot; icon, text &quot;label&quot; and (optionally) id. If no &quot;id&quot; is passed, &quot;id&quot; becomes the item index. New items are appended at the end.
			</description>
		</method>
		<method name="set_item_text"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="text" type="String">
			</argument>
			<description>
			Set the text of an item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="set_item_icon"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="texture" type="Object">
			</argument>
			<description>
			Set the icon of an item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="set_item_disabled"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="disabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_ID"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="id" type="int">
			</argument>
			<description>
			Set the ID of an item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="set_item_metadata"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="metadata" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_text" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Return the text of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="get_item_icon" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Return the icon of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="get_item_ID" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Return the ID of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="get_item_metadata" qualifiers="const" >
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_item_disabled" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the amount of items in the OptionButton.
			</description>
		</method>
		<method name="add_separator"  >
			<description>
			Add a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end.
			</description>
		</method>
		<method name="clear"  >
			<description>
			Clear all the items in the [OptionButton].
			</description>
		</method>
		<method name="select"  >
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			Select an item by index and make it the current item.
			</description>
		</method>
		<method name="get_selected" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the current item index
			</description>
		</method>
		<method name="get_selected_ID" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selected_metadata" qualifiers="const" >
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="item_selected">
			<argument index="0" name="ID" type="int">
			</argument>
			<description>
			This signal is emitted when the current item was changed by the user. ID of the item selected is passed as argument (if no IDs were added, ID will be just the item index).
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="PacketPeer" inherits="Object" category="Core">
	<brief_description>
	Abstraction and base class for packet-based protocols.
	</brief_description>
	<description>
	PacketPeer is an abstration and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low level bytes or having to worry about network ordering.
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PacketPeerStream" inherits="PacketPeer" category="Core">
	<brief_description>
	Wrapper to use a PacketPeer over a StreamPeer.
	</brief_description>
	<description>
	PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly.
	</description>
	<methods>
		<method name="set_stream_peer"  >
			<argument index="0" name="peer" type="Object">
			</argument>
			<description>
			Set the StreamPeer object to be wrapped
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Panel" inherits="Control" category="Nodes/GUI Nodes">
	<brief_description>
	Provides an opaque background for [Control] children.
	</brief_description>
	<description>
	Panel is a [Control] that displays an opaque background. It&apos;s commoly used as a parent and container for other types of [Control] nodes.&#10;&#9;[html div align=&quot;center&quot;][html img src=&quot;images/panel_example.png&quot;/][html /div]
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Particles" inherits="VisualInstance" category="Nodes/3D/3D Visual Nodes">
	<brief_description>
	Particle system 3D Node
	</brief_description>
	<description>
	Particles is a particle system 3D [Node] that is used to simulate several types of particle effects, such as explosions, rain, snow, fireflies, or other magical-like shinny sparkles. Particles are drawn using impostors, and given their dynamic behavior, the user must provide a visibility AABB (although helpers to create one automatically exist).
	</description>
	<methods>
		<method name="set_amount"  >
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
			Set total amount of particles in the system.
			</description>
		</method>
		<method name="get_amount" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the total amount of particles in the system.
			</description>
		</method>
		<method name="set_emitting"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			Set the &quot;emitting&quot; property state. When emitting, the particle system generates new particles at constant rate.
			</description>
		</method>
		<method name="is_emitting" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return the &quot;emitting&quot; property state (see [method set_emitting]).
			</description>
		</method>
		<method name="set_visibility_aabb"  >
			<argument index="0" name="aabb" type="AABB">
			</argument>
			<description>
			Set the visibility AABB for the particle system, since the default one will not work properly most of the time.
			</description>
		</method>
		<method name="get_visibility_aabb" qualifiers="const" >
			<return type="AABB">
			</return>
			<description>
			Return the current visibility AABB.
			</description>
		</method>
		<method name="set_emission_half_extents"  >
			<argument index="0" name="half_extents" type="Vector3">
			</argument>
			<description>
			Set the half extents for the emission box.
			</description>
		</method>
		<method name="get_emission_half_extents" qualifiers="const" >
			<return type="Vector3">
			</return>
			<description>
			Return the half extents for the emission box.
			</description>
		</method>
		<method name="set_emission_points"  >
			<argument index="0" name="points" type="Vector3Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_emission_points" qualifiers="const" >
			<return type="Vector3Array">
			</return>
			<description>
			</description>
		</method>
		<method name="set_gravity_normal"  >
			<argument index="0" name="normal" type="Vector3">
			</argument>
			<description>
			Set the normal vector towards where gravity is pulling (by default, negative Y).
			</description>
		</method>
		<method name="get_gravity_normal" qualifiers="const" >
			<return type="Vector3">
			</return>
			<description>
			Return the normal vector towards where gravity is pulling (by default, negative Y).
			</description>
		</method>
		<method name="set_variable"  >
			<argument index="0" name="variable" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			Set a specific variable for the particle system (see VAR_* enum).
			</description>
		</method>
		<method name="get_variable" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="variable" type="int">
			</argument>
			<description>
			Return a specific variable for the particle system (see VAR_* enum).
			</description>
		</method>
		<method name="set_randomness"  >
			<argument index="0" name="variable" type="int">
			</argument>
			<argument index="1" name="randomness" type="real">
			</argument>
			<description>
			Set the randomness for a specific variable of the particle system. Randomness produces small changes from the default each time a particle is emitted.
			</description>
		</method>
		<method name="get_randomness" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			Return the randomness for a specific variable of the particle system. Randomness produces small changes from the default each time a particle is emitted.
			</description>
		</method>
		<method name="set_color_phase_pos"  >
			<argument index="0" name="phase" type="int">
			</argument>
			<argument index="1" name="pos" type="real">
			</argument>
			<description>
			Set the position of a color phase (0 to 1)
			</description>
		</method>
		<method name="get_color_phase_pos" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="phase" type="int">
			</argument>
			<description>
			Return the position of a color phase (0 to 1)
			</description>
		</method>
		<method name="set_color_phase_color"  >
			<argument index="0" name="phase" type="int">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			Set the color of a color phase.
			</description>
		</method>
		<method name="get_color_phase_color" qualifiers="const" >
			<return type="Color">
			</return>
			<argument index="0" name="phase" type="int">
			</argument>
			<description>
			Return the color of a color phase.
			</description>
		</method>
		<method name="set_material"  >
			<argument index="0" name="material" type="Object">
			</argument>
			<description>
			Set the material used to draw particles
			</description>
		</method>
		<method name="get_material" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return the material used to draw particles
			</description>
		</method>
		<method name="set_emit_timeout"  >
			<argument index="0" name="arg0" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_emit_timeout" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_height_from_velocity"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_height_from_velocity" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_color_phases"  >
			<argument index="0" name="count" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color_phases" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="VAR_FINAL_SIZE" value="9">
		</constant>
		<constant name="VAR_INITIAL_SIZE" value="8">
		</constant>
		<constant name="VAR_LINEAR_ACCELERATION" value="5">
		</constant>
		<constant name="VAR_MAX" value="13">
		</constant>
		<constant name="VAR_DRAG" value="6">
		</constant>
		<constant name="VAR_GRAVITY" value="2">
		</constant>
		<constant name="VAR_SPREAD" value="1">
		</constant>
		<constant name="VAR_LIFETIME" value="0">
		</constant>
		<constant name="VAR_HEIGHT_SPEED_SCALE" value="12">
		</constant>
		<constant name="VAR_INITIAL_ANGLE" value="10">
		</constant>
		<constant name="VAR_TANGENTIAL_ACCELERATION" value="7">
		</constant>
		<constant name="VAR_ANGULAR_VELOCITY" value="4">
		</constant>
		<constant name="VAR_HEIGHT" value="11">
		</constant>
		<constant name="VAR_LINEAR_VELOCITY" value="3">
		</constant>
	</constants>
</class>
<class name="Particles2D" inherits="Node2D" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_emitting"  >
			<argument index="0" name="active" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_emitting" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_amount"  >
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_amount" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_lifetime"  >
			<argument index="0" name="lifetime" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_lifetime" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_param"  >
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_param" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_randomness"  >
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_randomness" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_texture"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texture" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_emissor_offset"  >
			<argument index="0" name="offset" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_emissor_offset" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_initial_color"  >
			<argument index="0" name="initial_color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_initial_color" qualifiers="const" >
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
		<method name="set_final_color"  >
			<argument index="0" name="final_color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_final_color" qualifiers="const" >
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
		<method name="set_use_parent_space"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_using_parent_space" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PARAM_FINAL_SIZE" value="9">
		</constant>
		<constant name="PARAM_INITIAL_SIZE" value="8">
		</constant>
		<constant name="PARAM_RADIAL_ACCEL" value="6">
		</constant>
		<constant name="PARAM_GRAVITY_STRENGTH" value="5">
		</constant>
		<constant name="PARAM_MAX" value="11">
		</constant>
		<constant name="PARAM_HUE_VARIATION" value="10">
		</constant>
		<constant name="PARAM_TANGENTIAL_ACCEL" value="7">
		</constant>
		<constant name="PARAM_GRAVITY_DIRECTION" value="4">
		</constant>
		<constant name="PARAM_SPREAD" value="1">
		</constant>
		<constant name="PARAM_SPIN_VELOCITY" value="3">
		</constant>
		<constant name="PARAM_LINEAR_VELOCITY" value="2">
		</constant>
		<constant name="PARAM_DIRECTION" value="0">
		</constant>
	</constants>
</class>
<class name="PhysicsBody" inherits="Spatial" category="Nodes/3D">
	<brief_description>
	Base class for differnt types of Physics bodies.
	</brief_description>
	<description>
	PhysicsBody is an abstract base class for implementing a physics body. All PhysicsBody types inherit from it.
	</description>
	<methods>
		<method name="add_shape"  >
			<argument index="0" name="shape" type="Object">
			</argument>
			<argument index="1" name="transform" type="Transform" default="Transform()">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shape_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_shape"  >
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<argument index="1" name="shape" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_shape_transform"  >
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<argument index="1" name="transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shape" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shape_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_shape"  >
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_shapes"  >
			<description>
			</description>
		</method>
		<method name="get_body" qualifiers="const" >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="set_max_contacts_reported"  >
			<argument index="0" name="contacts" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_max_contacts_reported" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_contacts_reported_depth_treshold"  >
			<argument index="0" name="depth" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contacts_reported_depth_treshold" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="PhysicsDirectBodyState" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_total_gravity" qualifiers="const" >
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="get_total_density" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_inverse_mass" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_inverse_inertia_tensor" qualifiers="const" >
			<return type="Matrix3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_linear_velocity"  >
			<argument index="0" name="velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_linear_velocity" qualifiers="const" >
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_angular_velocity"  >
			<argument index="0" name="velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_angular_velocity" qualifiers="const" >
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_transform"  >
			<argument index="0" name="transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<description>
			</description>
		</method>
		<method name="set_sleep_state"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_sleeping" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_contact_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_contact_local_pos" qualifiers="const" >
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_local_normal" qualifiers="const" >
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_local_shape" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_pos" qualifiers="const" >
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_id" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_shape" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_velocity_at_pos" qualifiers="const" >
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="PhysicsDirectBodyStateSW" inherits="PhysicsDirectBodyState" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PhysicsServer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="shape_create"  >
			<return type="RID">
			</return>
			<argument index="0" name="shape_type" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="shape_set_data"  >
			<argument index="0" name="shape" type="RID">
			</argument>
			<argument index="1" name="data" type="var">
			</argument>
			<argument index="2" name="margin" type="real" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="shape_get_type" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shape_get_data" qualifiers="const" >
			<argument index="0" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="space_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="area_create"  >
			<return type="RID">
			</return>
			<argument index="0" name="space" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_param"  >
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<argument index="2" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_shape"  >
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_bounds"  >
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="bounds" type="Dictionary">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_transform"  >
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_param" qualifiers="const" >
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_shape" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_bounds" qualifiers="const" >
			<return type="Dictionary">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_create"  >
			<return type="RID">
			</return>
			<argument index="0" name="space" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_mode"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_mode" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_add_shape"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape" type="RID">
			</argument>
			<argument index="2" name="transform" type="Transform" default="Transform()">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_shape"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<argument index="2" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_shape_transform"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<argument index="2" name="transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_shape_count" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_shape" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_shape_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_attach_object_instance_ID"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="ID" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_object_instance_ID" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_user_flags"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="user_flags" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_user_flags" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_param"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<argument index="2" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_param" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_static_simulate_motion"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="motion" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_state"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="state" type="int">
			</argument>
			<argument index="2" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_state" qualifiers="const" >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="state" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_applied_force"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="applied_force" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_applied_force" qualifiers="const" >
			<return type="Vector3">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_applied_torque"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="applied_torque" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_applied_torque" qualifiers="const" >
			<return type="Vector3">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_axis_velocity"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="axis_velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_apply_impulse"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="pos" type="Vector3">
			</argument>
			<argument index="2" name="impulse" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_add_collision_exception"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="against_body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_remove_collision_exception"  >
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="against_body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_create"  >
			<return type="RID">
			</return>
			<argument index="0" name="receiver" type="Object">
			</argument>
			<argument index="1" name="callback" type="String">
			</argument>
			<argument index="2" name="userdata" type="var">
			</argument>
			<argument index="3" name="persist" type="bool" default="true">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_body_state"  >
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_body_direct_state"  >
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_area"  >
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection"  >
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="space" type="RID">
			</argument>
			<argument index="2" name="exclude" type="Array" default="Array()">
			</argument>
			<argument index="3" name="usermask" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_ray"  >
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="origin" type="Vector3">
			</argument>
			<argument index="2" name="dir" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_segment"  >
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="from" type="Vector3">
			</argument>
			<argument index="2" name="to" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_shape"  >
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="shape" type="RID">
			</argument>
			<argument index="2" name="arg2" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_bounds"  >
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="bounds" type="Dictionary">
			</argument>
			<argument index="2" name="arg2" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_clear"  >
			<argument index="0" name="query" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_get_type" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="query" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_get_target" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="query" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="free"  >
			<argument index="0" name="rid" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_active"  >
			<argument index="0" name="active" type="bool">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="QUERY_BODY_STATE" value="1">
		</constant>
		<constant name="BODY_PARAM_FRICTION" value="1">
		</constant>
		<constant name="AREA_PARAM_OVERRIDE_PARAMS" value="0">
		</constant>
		<constant name="SHAPE_CUSTOM" value="9">
		</constant>
		<constant name="QUERY_INTERSECTION" value="4">
		</constant>
		<constant name="BODY_STATE_SLEEPING" value="3">
		</constant>
		<constant name="QUERY_AREA_MONITOR" value="3">
		</constant>
		<constant name="QUERY_BODY_DIRECT_STATE" value="2">
		</constant>
		<constant name="QUERY_NONE" value="0">
		</constant>
		<constant name="CONE_TWIST_VAR_RELAXATION" value="4">
		</constant>
		<constant name="CONE_TWIST_VAR_BIAS" value="3">
		</constant>
		<constant name="CONE_TWIST_VAR_SWING_SPAN_LIMIT_1" value="0">
		</constant>
		<constant name="HINGE_VAR_MOTOR_ENABLED" value="5">
		</constant>
		<constant name="HINGE_VAR_LIMIT_SOFTNESS" value="3">
		</constant>
		<constant name="HINGE_VAR_ANGULAR_ONLY" value="0">
		</constant>
		<constant name="BODY_STATE_ANGULAR_VELOCITY" value="2">
		</constant>
		<constant name="SHAPE_CAPSULE" value="5">
		</constant>
		<constant name="CONE_TWIST_VAR_SWING_SPAN_LIMIT_2" value="1">
		</constant>
		<constant name="BODY_STATE_LINEAR_VELOCITY" value="1">
		</constant>
		<constant name="BODY_MODE_CHARACTER" value="2">
		</constant>
		<constant name="AREA_PARAM_GRAVITY" value="1">
		</constant>
		<constant name="SHAPE_CONCAVE_POLYGON" value="7">
		</constant>
		<constant name="TYPE_BODY" value="0">
		</constant>
		<constant name="HINGE_VAR_MOTOR_TARGET_VELOCITY" value="6">
		</constant>
		<constant name="HINGE_VAR_HIGHER_LIMIT" value="2">
		</constant>
		<constant name="SHAPE_HEIGHTMAP" value="8">
		</constant>
		<constant name="SHAPE_SPHERE" value="2">
		</constant>
		<constant name="CONE_TWIST_VAR_TWIST_SPAN_LIMIT" value="2">
		</constant>
		<constant name="BODY_MODE_RIGID" value="1">
		</constant>
		<constant name="AREA_PARAM_DENSITY" value="5">
		</constant>
		<constant name="AREA_PARAM_GRAVITY_VECTOR" value="2">
		</constant>
		<constant name="SHAPE_PLANE" value="0">
		</constant>
		<constant name="HINGE_VAR_MOTOR_IMPULSE" value="7">
		</constant>
		<constant name="HINGE_VAR_RELAXATION" value="4">
		</constant>
		<constant name="HINGE_VAR_LOWER_LIMIT" value="1">
		</constant>
		<constant name="BODY_STATE_TRANSFORM" value="0">
		</constant>
		<constant name="BODY_PARAM_MASS" value="2">
		</constant>
		<constant name="BODY_PARAM_BOUNCE" value="0">
		</constant>
		<constant name="BODY_MODE_STATIC" value="0">
		</constant>
		<constant name="SHAPE_BOX" value="3">
		</constant>
		<constant name="TYPE_AREA" value="1">
		</constant>
		<constant name="AREA_PARAM_PRIORITY" value="6">
		</constant>
		<constant name="AREA_PARAM_GRAVITY_POINT_ATTENUATION" value="4">
		</constant>
		<constant name="AREA_PARAM_GRAVITY_IS_POINT" value="3">
		</constant>
		<constant name="SHAPE_CONVEX_POLYGON" value="6">
		</constant>
		<constant name="SHAPE_CYLINDER" value="4">
		</constant>
	</constants>
</class>
<class name="PhysicsServerSW" inherits="PhysicsServer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PlaneShape" inherits="Shape" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_plane"  >
			<argument index="0" name="plane" type="Plane">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_plane" qualifiers="const" >
			<return type="Plane">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Popup" inherits="Control" category="Core">
	<brief_description>
	Base container control for popups and dialogs.
	</brief_description>
	<description>
	PopUp is a base [Control] used to show dialogs and popups. It&apos;s a subwindow and modal by default (see [Control]) and has helpers for custom popup behavior.
	</description>
	<methods>
		<method name="popup_centered"  >
			<argument index="0" name="size" type="Vector2" default="Vector2(0,0)">
			</argument>
			<description>
			Popup (show the control in modal form) in the center of the screen, at the curent size, or at a size determined by &quot;size&quot;.
			</description>
		</method>
		<method name="popup_centered_ratio"  >
			<argument index="0" name="ratio" type="real" default="0.75">
			</argument>
			<description>
			Popup (show the control in modal form) in the center of the screen, scalled at a ratio of size of the screen.
			</description>
		</method>
		<method name="popup"  >
			<description>
			Popup (show the control in modal form).
			</description>
		</method>
		<method name="set_exclusive"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_exclusive" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="about_to_show">
			<description>
			This signal is emitted when a popup is about to be shown. (often used in [PopupMenu] for clearing the list of options and creating a new one according to the current context).
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="PopupDialog" inherits="Popup" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PopupMenu" inherits="Popup" category="Nodes/GUI Nodes">
	<brief_description>
	PopupMenu displays a list of options.
	</brief_description>
	<description>
	PopupMenu is the typical Control that displays a list of options. They are popular in toolbars or context menus.
	</description>
	<methods>
		<method name="add_icon_item"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<argument index="1" name="label" type="String">
			</argument>
			<argument index="2" name="id" type="int" default="-1">
			</argument>
			<argument index="3" name="accel" type="int" default="0">
			</argument>
			<description>
			Add a new item with text &quot;label&quot; and icon &quot;texture. An id can optonally be provided, as well as an accelerator. If no id is provided, one will be created from the index.
			</description>
		</method>
		<method name="add_item"  >
			<argument index="0" name="label" type="String">
			</argument>
			<argument index="1" name="id" type="int" default="-1">
			</argument>
			<argument index="2" name="accel" type="int" default="0">
			</argument>
			<description>
			Add a new item with text &quot;label&quot;. An id can optonally be provided, as well as an accelerator. If no id is provided, one will be created from the index.
			</description>
		</method>
		<method name="add_icon_check_item"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<argument index="1" name="label" type="String">
			</argument>
			<argument index="2" name="id" type="int" default="-1">
			</argument>
			<argument index="3" name="accel" type="int" default="0">
			</argument>
			<description>
			Add a new checkable item with text &quot;label&quot; and icon &quot;texture. An id can optonally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don&apos;t have any built-in checking behavior and must be checked/unchecked manually.
			</description>
		</method>
		<method name="add_check_item"  >
			<argument index="0" name="label" type="String">
			</argument>
			<argument index="1" name="id" type="int" default="-1">
			</argument>
			<argument index="2" name="accel" type="int" default="0">
			</argument>
			<description>
			Add a new checkable item with text &quot;label&quot;. An id can optonally be provided, as well as an accelerator. If no id is provided, one will be created from the index. Note that checkable items just display a checkmark, but don&apos;t have any built-in checking behavior and must be checked/unchecked manually.
			</description>
		</method>
		<method name="set_item_text"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="text" type="String">
			</argument>
			<description>
			Set the text of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="set_item_icon"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="icon" type="Object">
			</argument>
			<description>
			Set the icon of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="set_item_accelerator"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="accel" type="int">
			</argument>
			<description>
			Set the accelerator of the item at index &quot;idx&quot;. Accelerators are special combinations of keys that activate the item, no matter which control is fucused.
			</description>
		</method>
		<method name="set_item_metadata"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="metadata" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_checked"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			Set the checkstate status of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="set_item_disabled"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_ID"  >
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="id" type="int">
			</argument>
			<description>
			Set the id of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="get_item_text" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Return the text of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="get_item_icon" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Return the icon of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="get_item_metadata" qualifiers="const" >
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_accelerator" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Return the accelerator of the item at index &quot;idx&quot;. Accelerators are special combinations of keys that activate the item, no matter which control is fucused.
			</description>
		</method>
		<method name="is_item_checked" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Return the checkstate status of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="is_item_disabled" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_ID" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			Return the id of the item at index &quot;idx&quot;.
			</description>
		</method>
		<method name="get_item_index" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			Find and return the index of the item containing a given id.
			</description>
		</method>
		<method name="get_item_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the amount of items.
			</description>
		</method>
		<method name="add_separator"  >
			<description>
			Add a separator between items. Separators also occupy an index.
			</description>
		</method>
		<method name="clear"  >
			<description>
			Clear the popup menu.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="item_pressed">
			<argument index="0" name="ID" type="int">
			</argument>
			<description>
			This even is emitted when an item is pressed or its accelerator is activated. The id of the item is returned if it exists, else the index.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="PopupPanel" inherits="Popup" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Portal" inherits="VisualInstance" category="Nodes/3D/3D Visual Nodes">
	<brief_description>
	Portals provide virtual openings to rooms.
	</brief_description>
	<description>
	Portals provide virtual openings to [RoomInstance] nodes, so cameras can look at them from the outside. Note that portals are a visibility optimization technique, and are in no way related to the game of the same name (as in, they are not used for teleportation). For more information on how rooms and portals work, see [RoomInstance]. Portals are represented as 2D convex polygon shapes (in the X,Y local plane), and are placed on the surface of the areas occupied by a [RoomInstance], to indicate that the room can be accessed or looked-at through them. If two rooms are next to each other, and two similar portals in each of them share the same world position (and are parallel and opposed to each other), they will automatically &quot;connect&quot; and form &quot;doors&quot; (for example, the portals that connect a kitchen to a living room are placed in the door they share). Portals must always have a [RoomInstance] node as a parent, grandparent or far parent, or else they will not be active.
	</description>
	<methods>
		<method name="set_shape"  >
			<argument index="0" name="points" type="Array">
			</argument>
			<description>
			Set the portal shape. The shape is an array of [Point2]  points, representing a convex polygon in the X,Y plane.
			</description>
		</method>
		<method name="get_shape" qualifiers="const" >
			<return type="Array">
			</return>
			<description>
			Return the portal shape. The shape is an array of [Point2]  points, representing a convex polygon in the X,Y plane.
			</description>
		</method>
		<method name="set_enabled"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			Enable the portal (it is enabled by defaul though), disabling it will cause the parent [RoomInstance] to not be visible any longer when looking through the portal.
			</description>
		</method>
		<method name="is_enabled" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return wether the portal is active. When disabled it causes the parent [RoomInstance] to not be visible any longer when looking through the portal.
			</description>
		</method>
		<method name="set_disable_distance"  >
			<argument index="0" name="distance" type="real">
			</argument>
			<description>
			Set the distance threshold for disabling the portal. Every time that the portal goes beyond &quot;distance&quot;, it disables itself, becoming the opaque color (see [method set_disabled_color]).
			</description>
		</method>
		<method name="get_disable_distance" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the distance threshold for disabling the portal. Every time that the portal goes beyond &quot;distance&quot;, it disables itself, becoming the opaque color (see [method set_disabled_color]).
			</description>
		</method>
		<method name="set_disabled_color"  >
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			When the portal goes beyond the disable distance (see [method set_disable_distance]), it becomes opaque and displayed with color &quot;color&quot;.
			</description>
		</method>
		<method name="get_disabled_color" qualifiers="const" >
			<return type="Color">
			</return>
			<description>
			Return the color for when the portal goes beyond the disable distance (see [method set_disable_distance]) and becomes disabled.
			</description>
		</method>
		<method name="set_connect_range"  >
			<argument index="0" name="range" type="real">
			</argument>
			<description>
			Set the range for auto-connecting two portals from different rooms sharing the same space.
			</description>
		</method>
		<method name="get_connect_range" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the range for auto-connecting two portals from different rooms sharing the same space.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Range" inherits="Control" category="Core">
	<brief_description>
	Abstract base class for range-based controls.
	</brief_description>
	<description>
	Range is a base class for [Control] nodes that change a floating point [html i]value[html /i] between a need a [html i]minimum[html /i], [html i]maximum[html /i], using [html i]step[html /i] and [html i]page[html /i], for example a [ScrollBar].
	</description>
	<methods>
		<method name="get_val" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the current value.
			</description>
		</method>
		<method name="get_min" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the minimum value.
			</description>
		</method>
		<method name="get_max" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the maximum value.
			</description>
		</method>
		<method name="get_step" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the stepping, if step is 0, stepping is disabled.
			</description>
		</method>
		<method name="get_page" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return the page size, if page is 0, paging is disabled.
			</description>
		</method>
		<method name="get_unit_value" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			Return value mapped to 0 to 1 (unit) range.
			</description>
		</method>
		<method name="set_val"  >
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_min"  >
			<argument index="0" name="minimum" type="real">
			</argument>
			<description>
			Set minimum value, clamped range value to it if it&apos;s less.
			</description>
		</method>
		<method name="set_max"  >
			<argument index="0" name="maximum" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_step"  >
			<argument index="0" name="step" type="real">
			</argument>
			<description>
			Set step value. If step is 0, stepping will be disabled.
			</description>
		</method>
		<method name="set_page"  >
			<argument index="0" name="pagesize" type="real">
			</argument>
			<description>
			Set page size. Page is mainly used for scrollbars or anything that controls text scrolling.
			</description>
		</method>
		<method name="set_unit_value"  >
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			Set value mapped to 0 to 1 (unit) range, it will then be converted to the actual value within min and max.
			</description>
		</method>
		<method name="share"  >
			<argument index="0" name="with" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="unshare"  >
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="value_changed">
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			This signal is emitted when value changes.
			</description>
		</signal>
		<signal name="changed">
			<description>
			This signal is emitted when min, max, range or step change.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="RayShape" inherits="Shape" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_length"  >
			<argument index="0" name="length" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_length" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Reference" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Resource" inherits="Reference" category="Resources">
	<brief_description>
	Base class for all resources.
	</brief_description>
	<description>
	Resource is the base class for all resource types. Resources are primarily data containers. They are reference counted and freed when no longer in use. They are also loaded only once from disk, and further attempts to load the resource will return the same reference (all this in contrast to a [Node], which is not reference counted and can be instanced from disk as many times as desred). Resources can be saved externally on disk or bundled into another object, such as a [Node] or another resource.
	</description>
	<methods>
		<method name="set_path"  >
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			Set the path of the resource. This is useful mainly for editors when saving/loading, and shouldn&apos;t be changed by anything else.
			</description>
		</method>
		<method name="get_path" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			Return the path of the resource. This is useful mainly for editors when saving/loading, and shouldn&apos;t be changed by anything else.
			</description>
		</method>
		<method name="set_name"  >
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			Set the name of the resources, any name is ok (it doesn&apos;t have to be unique). Name is for descriptive purposes only.
			</description>
		</method>
		<method name="get_name" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			Return the name of the resources, any name is ok (it doesn&apos;t have to be unique). Name is for descriptive purposes only.
			</description>
		</method>
		<method name="get_rid" qualifiers="const" >
			<return type="RID">
			</return>
			<description>
			Return the RID of the resource (or an empty RID). Many resources (such as [Texture], [Mesh], etc) are high level abstractions of resources stored in a server, so this function will return the original RID.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="changed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="_ResourceLoader" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="load"  >
			<return type="Object">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="type_hint" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_recognized_extensions_for_type"  >
			<return type="StringArray">
			</return>
			<argument index="0" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="_ResourceSaver" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="save"  >
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="resource" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_recognized_extensions"  >
			<return type="StringArray">
			</return>
			<argument index="0" name="type" type="Object">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="RichTextLabel" inherits="Control" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_text"  >
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_image"  >
			<argument index="0" name="image" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="newline"  >
			<description>
			</description>
		</method>
		<method name="push_font"  >
			<argument index="0" name="font" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_color"  >
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_align"  >
			<argument index="0" name="align" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_indent"  >
			<argument index="0" name="level" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_list"  >
			<argument index="0" name="type" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_meta"  >
			<argument index="0" name="data" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_underline"  >
			<description>
			</description>
		</method>
		<method name="pop"  >
			<description>
			</description>
		</method>
		<method name="clear"  >
			<description>
			</description>
		</method>
		<method name="set_meta_underline"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_meta_underlined" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_scroll_active"  >
			<argument index="0" name="active" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_scroll_active" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_scroll_follow"  >
			<argument index="0" name="follow" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_scroll_following" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_tab_size"  >
			<argument index="0" name="spaces" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tab_size" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="meta_clicked">
			<argument index="0" name="meta" type="Nil">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="ITEM_TEXT" value="1">
		</constant>
		<constant name="ITEM_MAIN" value="0">
		</constant>
		<constant name="ALIGN_CENTER" value="1">
		</constant>
		<constant name="ITEM_UNDERLINE" value="6">
		</constant>
		<constant name="ITEM_META" value="10">
		</constant>
		<constant name="ITEM_COLOR" value="5">
		</constant>
		<constant name="ITEM_FONT" value="4">
		</constant>
		<constant name="LIST_DOTS" value="2">
		</constant>
		<constant name="ALIGN_LEFT" value="0">
		</constant>
		<constant name="LIST_LETTERS" value="1">
		</constant>
		<constant name="LIST_NUMBERS" value="0">
		</constant>
		<constant name="ITEM_INDENT" value="8">
		</constant>
		<constant name="ITEM_NEWLINE" value="3">
		</constant>
		<constant name="ALIGN_RIGHT" value="2">
		</constant>
		<constant name="ITEM_ALIGN" value="7">
		</constant>
		<constant name="ITEM_IMAGE" value="2">
		</constant>
		<constant name="ALIGN_FILL" value="3">
		</constant>
		<constant name="ITEM_LIST" value="9">
		</constant>
	</constants>
</class>
<class name="Room" inherits="Resource" category="Resources">
	<brief_description>
	Room data resource.
	</brief_description>
	<description>
	Room contains the data to define the bounds of a scene (using a BSP Tree). It is instanced by a [RoomInstance] node to create rooms. See that class documentation for more information about rooms.
	</description>
	<methods>
		<method name="set_bounds"  >
			<argument index="0" name="bsp_tree" type="Dictionary">
			</argument>
			<description>
			Set the bounds of the room as a BSP tree. a BSP Tree is defined a Dictionary: (TODO - see source code on how to create a BSP tree from a dictionary).
			</description>
		</method>
		<method name="get_bounds" qualifiers="const" >
			<return type="Dictionary">
			</return>
			<description>
			Return the bounds of the room as a BSP tree. a BSP Tree is defined a Dictionary: (TODO - see source code on how to create a BSP tree from a dictionary).
			</description>
		</method>
		<method name="set_geometry_hint"  >
			<argument index="0" name="triangles" type="Vector3Array">
			</argument>
			<description>
			Set the &quot;geometry&quot; hint of the room. This means, how the room actually looks (an array of [Vector3]s, forming triangles).
			</description>
		</method>
		<method name="get_geometry_hint" qualifiers="const" >
			<return type="Vector3Array">
			</return>
			<description>
			Return the &quot;geometry&quot; hint of the room. This means, how the room actually looks (an array of [Vector3]s, forming triangles).
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="RoomInstance" inherits="VisualInstance" category="Nodes/3D/3D Visual Nodes">
	<brief_description>
	Node that instances a Room.
	</brief_description>
	<description>
	RoomInstance is a [Node] that instances a [Room] resource and places it on the world. Rooms are used for defining the areas taken up by [html i]interiors[html /i]. An [html i]interior[html /i] is any closed space that has an entrance/exit (or not) to the outside world, for example the inside of a house, a room in a house, a cave.[html br/]So why is this used? Rooms and Portals ([Portal]) are a common visualization optimization technique, it is used to make interiors invisible (not rendered) when the camera is at the exterior (such as an open field), and also the exterior invisible when inside an interior (such as a house). It is also used to make interior rooms invisible from other interior rooms.&#10;[html div align=&quot;center&quot;][html img src=&quot;images/portals_example.png&quot;/][html /div]
	</description>
	<methods>
		<method name="set_room"  >
			<argument index="0" name="room" type="Object">
			</argument>
			<description>
			Set the [Room] resource, containing the room bounds.
			</description>
		</method>
		<method name="get_room" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return the [Room] resource, containing the room bounds.
			</description>
		</method>
		<method name="compute_room_from_subtree"  >
			<description>
			This helper function computes a [Room] from the shapes of all the children [VisualInstance] nodes, and sets it to the node.
			</description>
		</method>
		<method name="set_simulate_acoustics"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_simulating_acoustics" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SSAOFX" inherits="ScenarioFX" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Sample" inherits="Resource" category="Resources">
	<brief_description>
	Audio Sample (sound) class.
	</brief_description>
	<description>
	Sample provides an audio sample class, containing audio data, together with some information for playback, such as format, mix rate and loop. It is used by sound playback routines.
	</description>
	<methods>
		<method name="create"  >
			<argument index="0" name="format" type="int">
			</argument>
			<argument index="1" name="stereo" type="bool">
			</argument>
			<argument index="2" name="length" type="int">
			</argument>
			<description>
			Create new data for the sample, with format &quot;format&quot; (see FORMAT_* enum), stereo hint, and length in frames (not samples or bytes!) &quot;frame&quot;. Calling create overrides previous existing data if it exists. Stereo samples are interleaved pairs of left and right (in that order) points
			</description>
		</method>
		<method name="get_format" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the sample format (see FORMAT_* enum).
			</description>
		</method>
		<method name="is_stereo" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return true if the sample was created stereo.
			</description>
		</method>
		<method name="get_length" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the sample length in frames.
			</description>
		</method>
		<method name="set_data"  >
			<argument index="0" name="data" type="RawArray">
			</argument>
			<description>
			Set sample data. Data must be little endian, no matter the host platform, and exactly as long to fit all frames. Example, if data is Stereo, 16 bits, 256 frames, it will be 1024 bytes long.
			</description>
		</method>
		<method name="get_data" qualifiers="const" >
			<return type="RawArray">
			</return>
			<description>
			Return sample data. Data will be endian, no matter with the host platform, and exactly as long to fit all frames. Example, if data is Stereo, 16 bits, 256 frames, it will be 1024 bytes long.
			</description>
		</method>
		<method name="set_mix_rate"  >
			<argument index="0" name="hz" type="int">
			</argument>
			<description>
			Set the mix rate for the sample (expected playback frequency).
			</description>
		</method>
		<method name="get_mix_rate" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the mix rate for the sample (expected playback frequency).
			</description>
		</method>
		<method name="set_loop_format"  >
			<argument index="0" name="format" type="int">
			</argument>
			<description>
			Set the loop format, see LOOP_* enum
			</description>
		</method>
		<method name="get_loop_format" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the loop format, see LOOP_* enum.
			</description>
		</method>
		<method name="set_loop_begin"  >
			<argument index="0" name="pos" type="int">
			</argument>
			<description>
			Set the loop begin position, it must be a valid frame and less than the loop end position.
			</description>
		</method>
		<method name="get_loop_begin" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the loop begin position.
			</description>
		</method>
		<method name="set_loop_end"  >
			<argument index="0" name="pos" type="int">
			</argument>
			<description>
			Set the loop end position, it must be a valid frame and greater than the loop begin position.
			</description>
		</method>
		<method name="get_loop_end" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the loop begin position.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="FORMAT_IMA_ADPCM" value="2">
			Ima-ADPCM Audio.
		</constant>
		<constant name="LOOP_FORWARD" value="1">
			Forward looping (when playback reaches loop end, goes back to loop begin)
		</constant>
		<constant name="FORMAT_PCM16" value="1">
			16-Bits signed little endian PCM audio.
		</constant>
		<constant name="FORMAT_PCM8" value="0">
			8-Bits signed little endian PCM audio.
		</constant>
		<constant name="LOOP_NONE" value="0">
			No loop enabled.
		</constant>
		<constant name="LOOP_PING_PONG" value="2">
			Ping-Pong looping (when playback reaches loop end, plays backward untilloop begin). Not available in all platforms.
		</constant>
	</constants>
</class>
<class name="SampleLibrary" inherits="Resource" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_sample"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="sample" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_sample" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_sample" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_sample"  >
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SamplePlayer" inherits="Node" category="Nodes/Audio Nodes">
	<brief_description>
	Sample Player node.
	</brief_description>
	<description>
	SamplePlayer is a [Node] meant for simple sample playback. A library of samples is loaded and played back &quot;as is&quot;, without positioning or anything.
	</description>
	<methods>
		<method name="set_sample_library"  >
			<argument index="0" name="library" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_sample_library" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_voice_count"  >
			<argument index="0" name="max_voices" type="int">
			</argument>
			<description>
			Set the amount of simultaneous voices that will be used for playback.
			</description>
		</method>
		<method name="get_voice_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the amount of simultaneous voices that will be used for playback.
			</description>
		</method>
		<method name="play"  >
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="unique" type="bool" default="false">
			</argument>
			<description>
			Play back sample, given it&apos;s identifier &quot;name&quot;. if &quot;unique&quot; is true, all othere previous samples will be stopped. The voice allocated for playback will be returned.
			</description>
		</method>
		<method name="stop"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Stop a voice &quot;voice&quot;. (see [method play]).
			</description>
		</method>
		<method name="stop_all"  >
			<description>
			</description>
		</method>
		<method name="set_mix_rate"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="hz" type="int">
			</argument>
			<description>
			Change the mix rate of a voice &quot;voice&quot; to given &quot;hz&quot;.
			</description>
		</method>
		<method name="set_pitch_scale"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="ratio" type="real">
			</argument>
			<description>
			Scale the pitch (mix rate) of a voice by a ratio value &quot;ratio&quot;. A ratio of 1.0 means the voice is unscaled.
			</description>
		</method>
		<method name="set_volume"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="nrg" type="real">
			</argument>
			<description>
			Set the volume of a voice, 0db is maximum volume (every about -6db, volume is reduced in half). &quot;db&quot; does in fact go from zero to negative.
			</description>
		</method>
		<method name="set_volume_db"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="nrg" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_pan"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="pan" type="real">
			</argument>
			<argument index="2" name="depth" type="real" default="0">
			</argument>
			<argument index="3" name="height" type="real" default="0">
			</argument>
			<description>
			Set the panning of a voice. Panning goes from -1 (left) to +1 (right). Optionally, if the hardware supports 3D sound, also set depth and height (also in range -1 to +1).
			</description>
		</method>
		<method name="set_filter"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="type" type="int">
			</argument>
			<argument index="2" name="cutoff_hz" type="real">
			</argument>
			<argument index="3" name="resonance" type="real">
			</argument>
			<argument index="4" name="gain" type="real" default="0">
			</argument>
			<description>
			Set and enable a filter of a voice, with type &quot;type&quot; (see FILTER_* enum), cutoff (0 to 22khz) frequency and resonance (0+).
			</description>
		</method>
		<method name="set_chorus"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="send" type="real">
			</argument>
			<description>
			Set the chorus send level of a voice (0 to 1). For setting chorus parameters, see [AudioServer].
			</description>
		</method>
		<method name="set_reverb"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="room_type" type="int">
			</argument>
			<argument index="2" name="send" type="real">
			</argument>
			<description>
			Set the reverb send level and type of a voice  (0 to 1). (see REVERB_* enum for type).
			</description>
		</method>
		<method name="get_mix_rate" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current mix rate for a given voice.
			</description>
		</method>
		<method name="get_pitch_scale" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current pitch scale for a given voice.
			</description>
		</method>
		<method name="get_volume" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current volume (in db) for a given voice. 0db is maximum volume (every about -6db, volume is reduced in half). &quot;db&quot; does in fact go from zero to negative.
			</description>
		</method>
		<method name="get_volume_db" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pan" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current panning for a given voice. Panning goes from -1 (left) to +1 (right).
			</description>
		</method>
		<method name="get_pan_depth" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current pan depth for a given voice (not used unless the hardware supports 3D sound)
			</description>
		</method>
		<method name="get_pan_height" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current pan height for a given voice (not used unless the hardware supports 3D sound)
			</description>
		</method>
		<method name="get_filter_type" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current filter type in use (see FILTER_* enum) for a given voice.
			</description>
		</method>
		<method name="get_filter_cutoff" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current filter cutoff for a given voice. Cutoff goes from 0 to 22khz.
			</description>
		</method>
		<method name="get_filter_resonance" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current filter resonance for a given voice. Resonance goes from 0 up.
			</description>
		</method>
		<method name="get_filter_gain" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_chorus" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current chorus send level for a given voice. (0 to 1).
			</description>
		</method>
		<method name="get_reverb_room" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current reverb room type for a given voice (see REVERB_* enum).
			</description>
		</method>
		<method name="get_reverb" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			Return the current reverb send level for a given voice. (0 to 1).
			</description>
		</method>
		<method name="set_default_pitch_scale"  >
			<argument index="0" name="ratio" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_volume"  >
			<argument index="0" name="nrg" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_volume_db"  >
			<argument index="0" name="db" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_pan"  >
			<argument index="0" name="pan" type="real">
			</argument>
			<argument index="1" name="depth" type="real" default="0">
			</argument>
			<argument index="2" name="height" type="real" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_filter"  >
			<argument index="0" name="type" type="int">
			</argument>
			<argument index="1" name="cutoff_hz" type="real">
			</argument>
			<argument index="2" name="resonance" type="real">
			</argument>
			<argument index="3" name="gain" type="real" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_chorus"  >
			<argument index="0" name="send" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_reverb"  >
			<argument index="0" name="room_type" type="int">
			</argument>
			<argument index="1" name="send" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_default_pitch_scale" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_volume" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_volume_db" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_pan" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_pan_depth" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_pan_height" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_filter_type" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_filter_cutoff" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_filter_resonance" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_filter_gain" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_chorus" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_reverb_room" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_reverb" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="FILTER_HIPASS" value="3">
			HighPass filter is used for voice.
		</constant>
		<constant name="FILTER_NONE" value="0">
			Filter is disabled for voice.
		</constant>
		<constant name="REVERB_HALL" value="3">
			Huge reverb room (cathedral, warehouse).
		</constant>
		<constant name="REVERB_MEDIUM" value="1">
			Medium reverb room (street)
		</constant>
		<constant name="REVERB_SMALL" value="0">
			Small reverb room (house room).
		</constant>
		<constant name="FILTER_HIGH_SHELF" value="8">
		</constant>
		<constant name="FILTER_PEAK" value="5">
		</constant>
		<constant name="FILTER_LOWPASS" value="1">
			Lowpass filter is used for voice.
		</constant>
		<constant name="REVERB_LARGE" value="2">
			Large reverb room (Theather)
		</constant>
		<constant name="FILTER_LOW_SHELF" value="7">
		</constant>
		<constant name="FILTER_BANDLIMIT" value="6">
			Band-Limit filter is used for voice, in this case resonance is the highpass cutoff.
		</constant>
		<constant name="FILTER_NOTCH" value="4">
			Notch filter is used for voice.
		</constant>
		<constant name="FILTER_BANDPASS" value="2">
			Bandpass filter is used for voice.
		</constant>
	</constants>
</class>
<class name="ScenarioFX" inherits="Node" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	Deprecated, will go away.
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="SceneMainLoop" inherits="MainLoop" category="Main Loop">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_editor_hint"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_editor_hint" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_pause"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_paused" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="quit"  >
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="screen_resized">
			<description>
			</description>
		</signal>
		<signal name="node_removed">
			<argument index="0" name="node" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="tree_changed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="Script" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="ScrollBar" inherits="Range" category="Core">
	<brief_description>
	Base class for scroll bars.
	</brief_description>
	<description>
	Scrollbars are a [Range] based [Control], that display a draggable area (the size of the page). Horizontal ([HScrollBar]) and Vertical ([VScrollBar]) versions are available.
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Separator" inherits="Control" category="Nodes/GUI Nodes">
	<brief_description>
	Base class for separators.
	</brief_description>
	<description>
	Separator is a [Control] used for sepataring other controls. It&apos;s purely a visual decoration. Horizontal ([HSeparator]) and Vertical ([VSeparator]) versions are available.
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Shader" inherits="Resource" category="Resources">
	<brief_description>
	To be changed, ignore.
	</brief_description>
	<description>
	To be changed, ignore.
	</description>
	<methods>
		<method name="set_mode"  >
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mode" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_vertex_code"  >
			<argument index="0" name="code" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_vertex_code" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_fragment_code"  >
			<argument index="0" name="code" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_fragment_code" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_use_world_transform"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_using_world_transform" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_param"  >
			<argument index="0" name="param" type="String">
			</argument>
			<argument index="1" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_param" qualifiers="const" >
			<argument index="0" name="param" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_param_list" qualifiers="const" >
			<return type="StringArray">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="MODE_MATERIAL" value="0">
		</constant>
		<constant name="MODE_POST_PROCESS" value="1">
		</constant>
	</constants>
</class>
<class name="ShaderMaterial" inherits="Material" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_shader"  >
			<argument index="0" name="shader" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shader" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Shape" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Skeleton" inherits="Spatial" category="Nodes/3D">
	<brief_description>
	Skeleton for characters and animated objects.
	</brief_description>
	<description>
	Skeleton provides a hierachial interface for managing bones, including pose, rest and animation (see [Animation]). Skeleton will support rag doll dynamics in the future.
	</description>
	<methods>
		<method name="add_bone"  >
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			Add a bone, with name &quot;name&quot;. [method get_bone_count] will become the bone index.
			</description>
		</method>
		<method name="find_bone" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			Return the bone index that matches &quot;name&quot; as its name.
			</description>
		</method>
		<method name="get_bone_name" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			Return the name of the bone at index &quot;index&quot;
			</description>
		</method>
		<method name="get_bone_parent" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			Return the bone index which is the parent of the bone at &quot;bone_idx&quot;. If -1, then bone has no parent. Note that the parent bone returned will always be less than &quot;bone_idx&quot;.
			</description>
		</method>
		<method name="set_bone_parent"  >
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="parent_idx" type="int">
			</argument>
			<description>
			Set the bone index &quot;parent_idx&quot; as the parent of the bone at &quot;bone_idx&quot;. If -1, then bone has no parent. Note: &quot;parent_idx&quot; must be less than &quot;bone_idx&quot;.
			</description>
		</method>
		<method name="get_bone_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			Return the amount of bones in the skeleton.
			</description>
		</method>
		<method name="get_bone_rest" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			Return the rest transform for a bone &quot;bone_idx&quot;.
			</description>
		</method>
		<method name="set_bone_rest"  >
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="rest" type="Transform">
			</argument>
			<description>
			Set the rest transform for bone &quot;bone_idx&quot;
			</description>
		</method>
		<method name="bind_child_node_to_bone"  >
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="node" type="Object">
			</argument>
			<description>
			Deprecated soon
			</description>
		</method>
		<method name="unbind_child_node_from_bone"  >
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="node" type="Object">
			</argument>
			<description>
			Deprecated soon
			</description>
		</method>
		<method name="get_bound_child_nodes_to_bone" qualifiers="const" >
			<return type="Array">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			Deprecated Soon
			</description>
		</method>
		<method name="clear_bones"  >
			<description>
			Clear all the bones in this skeleton.
			</description>
		</method>
		<method name="get_bone_pose" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			Return the pose transform for bone &quot;bone_idx&quot;.
			</description>
		</method>
		<method name="set_bone_pose"  >
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="pose" type="Transform">
			</argument>
			<description>
			Return the pose transform for bone &quot;bone_idx&quot;.
			</description>
		</method>
		<method name="get_bone_custom_pose" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_bone_custom_pose"  >
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="custom_pose" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bone_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NOTIFICATION_UPDATE_SKELETON" value="50">
		</constant>
	</constants>
</class>
<class name="SkyBoxFX" inherits="ScenarioFX" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Slider" inherits="Range" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="SoundRoomParams" inherits="Node" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_param"  >
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_param" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_reverb_mode"  >
			<argument index="0" name="reverb_mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_reverb_mode" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_force_params_to_all_sources"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_forcing_params_to_all_sources"  >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Spatial" inherits="Node" category="Nodes/3D">
	<brief_description>
	Base class for all 3D nodes.
	</brief_description>
	<description>
	Spatial is the base for every type of 3D [Node]. It contains a 3D [Transform] which can be set or get as local or global. If a Spatial [Node] has Spatial children, their transforms will be relative to the parent.
	</description>
	<methods>
		<method name="set_transform"  >
			<argument index="0" name="local" type="Transform">
			</argument>
			<description>
			Set the transform locally, relative to the parent spatial node.
			</description>
		</method>
		<method name="get_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<description>
			Return the local transform, relative to the bone parent.
			</description>
		</method>
		<method name="set_global_transform"  >
			<argument index="0" name="global" type="Transform">
			</argument>
			<description>
			Set the transform globally, relative to worldspace.
			</description>
		</method>
		<method name="get_global_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<description>
			Return the gloal transform, relative to worldspace.
			</description>
		</method>
		<method name="get_parent_spatial" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			Return the parent [Spatial], or an empty [Object] if no parent exists or parent is not of type [Spatial.
			</description>
		</method>
		<method name="update_gizmo"  >
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NOTIFICATION_SCENARIO_CHANGED" value="41">
			Spatial nodes receive this notification when the viewport next to it in ascending hierarchy changed the [Scenario].
		</constant>
		<constant name="NOTIFICATION_TRANSFORM_CHANGED" value="40">
			Spatial nodes receive this notifacation with their global transform changes. This means that either the current or a parent node changed it&apos;s transform.
		</constant>
	</constants>
</class>
<class name="SpatialPlayer" inherits="Spatial" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="SpatialSamplePlayer" inherits="SpatialPlayer" category="Nodes/3D">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_sample_library"  >
			<argument index="0" name="library" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_sample_library" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_polyphony"  >
			<argument index="0" name="voices" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_polyphony" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="play"  >
			<return type="int">
			</return>
			<argument index="0" name="sample" type="String">
			</argument>
			<argument index="1" name="voice" type="int" default="-2">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_pitch_scale"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="ratio" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_volume_scale_db"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="db" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_voice_active" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="stop_voice"  >
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="stop_all"  >
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NEXT_VOICE" value="-2">
		</constant>
		<constant name="INVALID_VOICE" value="-1">
		</constant>
	</constants>
</class>
<class name="SpatialSoundServer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="SpatialSoundServerSW" inherits="SpatialSoundServer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="SpatialStreamPlayer" inherits="SpatialPlayer" category="Nodes/3D">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_stream"  >
			<argument index="0" name="stream" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stream" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="play"  >
			<description>
			</description>
		</method>
		<method name="stop"  >
			<description>
			</description>
		</method>
		<method name="is_playing" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_loop"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_loop" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_stream_name" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_loop_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="seek_pos"  >
			<argument index="0" name="time" type="real">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SphereShape" inherits="Shape" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_radius"  >
			<argument index="0" name="radius" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_radius" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SpinBox" inherits="Range" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_suffix"  >
			<argument index="0" name="suffix" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_suffix" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_prefix"  >
			<argument index="0" name="prefix" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_prefix" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_editable"  >
			<argument index="0" name="editable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_editable" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SpotLight" inherits="Light" category="Nodes/3D/3D Visual Nodes/3D Light Nodes">
	<brief_description>
	Spotlight Light, such as a reflector spotlight or a latern.
	</brief_description>
	<description>
	A SpotLight light is a type of [Light] node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance and this attenuation can be configured by changing the energy, radius and attenuation parameters of [Light]. TODO: Image of a spotlight.
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Sprite" inherits="Node2D" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_texture"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texture" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_centered"  >
			<argument index="0" name="centered" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_centered" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_flip_h"  >
			<argument index="0" name="flip_h" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_flipped_h" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_flip_v"  >
			<argument index="0" name="flip_v" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_flipped_v" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_frame"  >
			<argument index="0" name="frame" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_frame" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_vframes"  >
			<argument index="0" name="vframes" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_vframes" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_hframes"  >
			<argument index="0" name="hframes" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_hframes" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_modulate"  >
			<argument index="0" name="modulate" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_modulate" qualifiers="const" >
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SquirrelScript" inherits="Script" category="Resources">
	<brief_description>
	Squirrel script language support.
	</brief_description>
	<description>
	[html a href=&quot;http://squirrel-lang.org/&quot;]Squirrel Language[html /a] support for the engine. Allows to load a [Script] from a .sq or .nut source or compiled file, or bundled it into scenes.
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="StaticBody" inherits="PhysicsBody" category="Nodes/3D">
	<brief_description>
	PhysicsBody for static collision objects.
	</brief_description>
	<description>
	StaticBody implements a static collision [Node], by utilizing a rigid body in the [PhysicsServer]. Static bodies are used for static collision. For more information on physics body nodes, see [PhysicsBody].
	</description>
	<methods>
		<method name="set_simulated_motion"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_simulating_motion" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="simulate_motion"  >
			<argument index="0" name="new_transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="create_shapes_from_child_meshes"  >
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StreamPeer" inherits="Object" category="Networking">
	<brief_description>
	Abstraction and base class for stream-based protocols.
	</brief_description>
	<description>
	StreamPeer is an abstration and base class for stream-based protocols (such as TCP or Unix Sockets). It provides an API for sending and receiving data through streams as raw data or strings.
	</description>
	<methods>
		<method name="put_data"  >
			<return type="int">
			</return>
			<argument index="0" name="data" type="RawArray">
			</argument>
			<description>
			Send a chunk of data through the connection, blocking if necesary until the data is done sending. This function returns an [Error] code.
			</description>
		</method>
		<method name="put_partial_data"  >
			<return type="Array">
			</return>
			<argument index="0" name="data" type="RawArray">
			</argument>
			<description>
			Send a chunk of data through the connection, if all the data could not be sent at once, only part of it will. This function returns two values, an [Error] code and an integer, describing how much data was actually sent.
			</description>
		</method>
		<method name="get_data"  >
			<return type="Array">
			</return>
			<argument index="0" name="bytes" type="int">
			</argument>
			<description>
			Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the &quot;bytes&quot; argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an [Error] code and a data array.
			</description>
		</method>
		<method name="get_partial_data"  >
			<return type="Array">
			</return>
			<argument index="0" name="bytes" type="int">
			</argument>
			<description>
			Return a chunk data with the received bytes. The amount of bytes to be received can be requested in the &quot;bytes&quot; argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an [Error] code, and a data array.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StreamPeerTCP" inherits="StreamPeer" category="Networking/Networking">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="connect"  >
			<return type="int">
			</return>
			<argument index="0" name="host" type="String">
			</argument>
			<argument index="1" name="ip" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_connected" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_connected_host" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_connected_port" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="disconnect"  >
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StreamPlayer" inherits="Node" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_stream"  >
			<argument index="0" name="stream" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stream" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="play"  >
			<description>
			</description>
		</method>
		<method name="stop"  >
			<description>
			</description>
		</method>
		<method name="is_playing" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_loop"  >
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_loop" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_volume"  >
			<argument index="0" name="volume" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_volume" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_volume_db"  >
			<argument index="0" name="db" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_volume_db" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_stream_name" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_loop_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="seek_pos"  >
			<argument index="0" name="time" type="real">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StyleBox" inherits="Resource" category="Core">
	<brief_description>
	Base class for dawing stylized boxes for the UI.
	</brief_description>
	<description>
	StyleBox is [Resource] that provides an abstract base class for dawing stylized boxes for the UI. StyleBoxes are used for dawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below.
	</description>
	<methods>
		<method name="test_mask" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="point" type="Vector2">
			</argument>
			<argument index="1" name="rect" type="Rect2">
			</argument>
			<description>
			Test a position in a rectangle, return wether it pases the mask test.
			</description>
		</method>
		<method name="set_default_margin"  >
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="offset" type="real">
			</argument>
			<description>
			Set the default offset &quot;offset&quot; of the margin &quot;margin&quot; (see MARGIN_* enum) for a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded.
			</description>
		</method>
		<method name="get_default_margin" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			Return the default offset of the margin &quot;margin&quot; (see MARGIN_* enum) of a StyleBox, Controls that draw styleboxes with context inside need to know the margin, so the border of the stylebox is not occluded.
			</description>
		</method>
		<method name="get_margin" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			Return the offset of margin &quot;margin&quot; (see MARGIN_* enum).
			</description>
		</method>
		<method name="get_minimum_size" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			Return the minimum size that this stylebox can be shrunk to.
			</description>
		</method>
		<method name="get_offset" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			Return the &quot;offset&quot; of a stylebox, this is a helper function, like writing Point2( style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP) )
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StyleBoxEmpty" inherits="StyleBox" category="Resources">
	<brief_description>
	Empty stylebox (does not display anything).
	</brief_description>
	<description>
	Empty stylebox (really does not display anything).
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="StyleBoxFlat" inherits="StyleBox" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_bg_color"  >
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bg_color" qualifiers="const" >
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
		<method name="set_light_color"  >
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_light_color" qualifiers="const" >
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
		<method name="set_dark_color"  >
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_dark_color" qualifiers="const" >
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
		<method name="set_border_size"  >
			<argument index="0" name="size" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_border_size" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_border_blend"  >
			<argument index="0" name="blend" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_border_blend" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_draw_center"  >
			<argument index="0" name="size" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_draw_center" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StyleBoxImageMask" inherits="StyleBox" category="Resources">
	<brief_description>
	Image mask based StyleBox, for mask test.
	</brief_description>
	<description>
	This StyleBox is similar to [StyleBoxTexture], but only meant to be used for mask testing. It takes an image and applies stretch rules to determine if the poit clicked is masked or not.
	</description>
	<methods>
		<method name="set_image"  >
			<argument index="0" name="image" type="Image">
			</argument>
			<description>
			Set the image used for mask testing. Pixels (converted to grey) that have a value, less than 0.5 will fail the test.
			</description>
		</method>
		<method name="get_image" qualifiers="const" >
			<return type="Image">
			</return>
			<description>
			Return the image used for mask testing. (see [method set_imag]).
			</description>
		</method>
		<method name="set_expand"  >
			<argument index="0" name="expand" type="bool">
			</argument>
			<description>
			Set the expand property (default). When expanding, the image will use the same rules as [StyleBoxTexture] for expand. If not expanding, the image will always be tested at its original size.
			</description>
		</method>
		<method name="get_expand" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			Return wether the expand property is set(default). When expanding, the image will use the same rules as [StyleBoxTexture] for expand. If not expanding, the image will always be tested at its original size.
			</description>
		</method>
		<method name="set_expand_margin_size"  >
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="size" type="real">
			</argument>
			<description>
			Set an expand margin size (from enum MARGIN_*). Parts of the image below the size of the margin (and in the direction of the margin) will not expand.
			</description>
		</method>
		<method name="get_expand_margin_size" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			Return the expand margin size (from enum MARGIN_*). Parts of the image below the size of the margin (and in the direction of the margin) will not expand.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StyleBoxTexture" inherits="StyleBox" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_texture"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texture" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_margin_size"  >
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="size" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_margin_size" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_expand_margin_size"  >
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="size" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_expand_margin_size" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_draw_center"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_draw_center" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_center_size" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="draw" qualifiers="const" >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SurfaceTool" inherits="Reference" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="begin"  >
			<argument index="0" name="primitive" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_vertex"  >
			<argument index="0" name="vertex" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_color"  >
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_normal"  >
			<argument index="0" name="normal" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_tangent"  >
			<argument index="0" name="tangent" type="Plane">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_uv"  >
			<argument index="0" name="uv" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_uv2"  >
			<argument index="0" name="uv2" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_bones"  >
			<argument index="0" name="bones" type="IntArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_weights"  >
			<argument index="0" name="weights" type="RealArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_material"  >
			<argument index="0" name="material" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="index"  >
			<description>
			</description>
		</method>
		<method name="deindex"  >
			<description>
			</description>
		</method>
		<method name="generate_flat_normals"  >
			<description>
			</description>
		</method>
		<method name="generate_smooth_normals"  >
			<description>
			</description>
		</method>
		<method name="generate_tangents"  >
			<description>
			</description>
		</method>
		<method name="commit"  >
			<return type="Object">
			</return>
			<argument index="0" name="existing" type="Object" default="Object()">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear"  >
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="TCP_Server" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="listen"  >
			<return type="int">
			</return>
			<argument index="0" name="port" type="int">
			</argument>
			<argument index="1" name="accepted_hosts" type="StringArray" default="StringArray()">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_connection_available" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="take_connection"  >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="stop"  >
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="TabContainer" inherits="Control" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_tab_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_current_tab"  >
			<argument index="0" name="tab_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_current_tab" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_tab_align"  >
			<argument index="0" name="align" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tab_align" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_tabs_visible"  >
			<argument index="0" name="visible" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="are_tabs_visible" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_tab_title"  >
			<argument index="0" name="tab_idx" type="int">
			</argument>
			<argument index="1" name="title" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tab_title" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="tab_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_tab_icon"  >
			<argument index="0" name="tab_idx" type="int">
			</argument>
			<argument index="1" name="icon" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tab_icon" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="tab_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="tab_changed">
			<argument index="0" name="tab" type="int">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="TestCube" inherits="VisualInstance" category="Nodes/3D/3D Visual Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="TextEdit" inherits="Control" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_text"  >
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="insert_text_at_cursor"  >
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_line_count" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_text"  >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_line"  >
			<return type="String">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_column"  >
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_line"  >
			<argument index="0" name="line" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_get_column" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="cursor_get_line" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_readonly"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_wrap"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_max_chars"  >
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cut"  >
			<description>
			</description>
		</method>
		<method name="copy"  >
			<description>
			</description>
		</method>
		<method name="paste"  >
			<description>
			</description>
		</method>
		<method name="select_all"  >
			<description>
			</description>
		</method>
		<method name="select"  >
			<argument index="0" name="from_line" type="int">
			</argument>
			<argument index="1" name="from_column" type="int">
			</argument>
			<argument index="2" name="to_line" type="int">
			</argument>
			<argument index="3" name="to_column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_selection_active" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection_from_line" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection_from_column" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection_to_line" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection_to_column" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection_text" qualifiers="const" >
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="search" qualifiers="const" >
			<return type="IntArray">
			</return>
			<argument index="0" name="flags" type="String">
			</argument>
			<argument index="1" name="from_line" type="int">
			</argument>
			<argument index="2" name="from_column" type="int">
			</argument>
			<argument index="3" name="to_line" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="undo"  >
			<description>
			</description>
		</method>
		<method name="redo"  >
			<description>
			</description>
		</method>
		<method name="clear_undo_history"  >
			<description>
			</description>
		</method>
		<method name="set_syntax_coloring"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_syntax_coloring_enabled" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="add_keyword_color"  >
			<argument index="0" name="keyword" type="String">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_color_region"  >
			<argument index="0" name="begin_key" type="String">
			</argument>
			<argument index="1" name="end_key" type="String">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<argument index="3" name="line_only" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_symbol_color"  >
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_custom_bg_color"  >
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_colors"  >
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="text_changed">
			<description>
			</description>
		</signal>
		<signal name="cursor_changed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="SEARCH_MATCH_CASE" value="1">
		</constant>
		<constant name="SEARCH_BACKWARDS" value="4">
		</constant>
		<constant name="SEARCH_WHOLE_WORDS" value="2">
		</constant>
	</constants>
</class>
<class name="Texture" inherits="Resource" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="create"  >
			<argument index="0" name="width" type="int">
			</argument>
			<argument index="1" name="height" type="int">
			</argument>
			<argument index="2" name="format" type="int">
			</argument>
			<argument index="3" name="flags" type="int" default="7">
			</argument>
			<description>
			</description>
		</method>
		<method name="create_from_image"  >
			<argument index="0" name="image" type="Image">
			</argument>
			<argument index="1" name="flags" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_flags"  >
			<argument index="0" name="flags" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_flags" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_format" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="load"  >
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="blit_rect"  >
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="image" type="Image">
			</argument>
			<argument index="3" name="cube_side" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_rect" qualifiers="const" >
			<return type="Image">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="width" type="int">
			</argument>
			<argument index="3" name="height" type="int">
			</argument>
			<argument index="4" name="cube_side" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_width" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_height" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_size" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_rid" qualifiers="const" >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="has_alpha" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="draw" qualifiers="const" >
			<argument index="0" name="canvas_item" type="RID">
			</argument>
			<argument index="1" name="pos" type="Vector2">
			</argument>
			<argument index="2" name="modulate" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="CUBEMAP_BACK" value="5">
		</constant>
		<constant name="CUBEMAP_FRONT" value="4">
		</constant>
		<constant name="FLAG_CUBEMAP" value="8">
		</constant>
		<constant name="CUBEMAP_TOP" value="3">
		</constant>
		<constant name="CUBEMAP_LEFT" value="0">
		</constant>
		<constant name="FLAG_FILTER" value="4">
		</constant>
		<constant name="FLAG_MIPMAPS" value="1">
		</constant>
		<constant name="CUBEMAP_BOTTOM" value="2">
		</constant>
		<constant name="FLAGS_DEFAULT" value="7">
		</constant>
		<constant name="CUBEMAP_RIGHT" value="1">
		</constant>
		<constant name="FLAG_REPEAT" value="2">
		</constant>
	</constants>
</class>
<class name="TextureButton" inherits="BaseButton" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_normal_texture"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_pressed_texture"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_hover_texture"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_disabled_texture"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_focused_texture"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_click_mask"  >
			<argument index="0" name="texture" type="Image">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_normal_texture" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pressed_texture" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_hover_texture" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_disabled_texture" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_focused_texture" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_click_mask" qualifiers="const" >
			<return type="Image">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="TextureFrame" inherits="Control" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_texture"  >
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texture" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_expand"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_expand" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Theme" inherits="Resource" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_icon"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<argument index="2" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_icon" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_icon" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_icon"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_icon_list" qualifiers="const" >
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_stylebox"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<argument index="2" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stylebox" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_stylebox" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_stylebox"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stylebox_list" qualifiers="const" >
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_font"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<argument index="2" name="font" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_font" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_font" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_font"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_font_list" qualifiers="const" >
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_color"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color" qualifiers="const" >
			<return type="Color">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_color" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_color"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color_list" qualifiers="const" >
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_constant"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<argument index="2" name="constant" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_constant" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_constant" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_constant"  >
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_constant_list" qualifiers="const" >
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_type_list" qualifiers="const" >
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="copy_default_theme"  >
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Timer" inherits="Node" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_wait_time"  >
			<argument index="0" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_wait_time" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_one_shot"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_one_shot" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autostart"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_autostart" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="start"  >
			<description>
			</description>
		</method>
		<method name="stop"  >
			<description>
			</description>
		</method>
		<method name="get_time_left" qualifiers="const" >
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="timeout">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="Tree" inherits="Control" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="clear"  >
			<description>
			</description>
		</method>
		<method name="create_item"  >
			<return type="Object">
			</return>
			<argument index="0" name="arg0" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_root"  >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_column_min_width"  >
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_column_expand"  >
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_column_width" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_hide_root"  >
			<argument index="0" name="arg0" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_next_selected"  >
			<return type="Object">
			</return>
			<argument index="0" name="arg0" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_selected" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selected_column" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pressed_button" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_select_mode"  >
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_columns"  >
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_columns" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_edited" qualifiers="const" >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_edited_column" qualifiers="const" >
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_custom_popup_rect" qualifiers="const" >
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_item_rect" qualifiers="const" >
			<return type="Rect2">
			</return>
			<argument index="0" name="item" type="Object">
			</argument>
			<argument index="1" name="column" type="int" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="ensure_cursor_is_visible"  >
			<description>
			</description>
		</method>
		<method name="set_column_titles_visible"  >
			<argument index="0" name="visible" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="are_column_titles_visible" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_column_title"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="title" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_column_title" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_scroll" qualifiers="const" >
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="multi_selected">
			<description>
			</description>
		</signal>
		<signal name="custom_popup_edited">
			<argument index="0" name="arrow_clicked" type="bool">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="item_edited">
			<description>
			</description>
		</signal>
		<signal name="item_selected">
			<description>
			</description>
		</signal>
		<signal name="item_doubleclicked">
			<description>
			</description>
		</signal>
		<signal name="cell_selected">
			<description>
			</description>
		</signal>
		<signal name="button_pressed">
			<argument index="0" name="item" type="Object">
			</argument>
			<argument index="1" name="column" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="SELECT_ROW" value="1">
		</constant>
		<constant name="SELECT_SINGLE" value="0">
		</constant>
		<constant name="SELECT_MULTI" value="2">
		</constant>
	</constants>
</class>
<class name="TreeItem" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_cell_mode"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_cell_mode" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_checked"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="checked" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_checked" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_text"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_text" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_icon"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_icon" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_range"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_range" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_range_config"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="min" type="real">
			</argument>
			<argument index="2" name="max" type="real">
			</argument>
			<argument index="3" name="step" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_range_config"  >
			<return type="Dictionary">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_metadata"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="meta" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_metadata" qualifiers="const" >
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_collapsed"  >
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_collapsed"  >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_next"  >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_prev"  >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_parent"  >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_children"  >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_next_visible"  >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_prev_visible"  >
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="remove_child"  >
			<argument index="0" name="child" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_selectable"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="selectable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_selected"  >
			<return type="bool">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="select"  >
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="deselect"  >
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_editable"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_editable"  >
			<return type="bool">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_custom_color"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_custom_color"  >
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_custom_bg_color"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_custom_bg_color"  >
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_button"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="button" type="Object">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_button_count" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_button" qualifiers="const" >
			<return type="Object">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="button_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="erase_button"  >
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="button_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="CELL_MODE_ICON" value="3">
		</constant>
		<constant name="CELL_MODE_CUSTOM" value="4">
		</constant>
		<constant name="CELL_MODE_RANGE" value="2">
		</constant>
		<constant name="CELL_MODE_CHECK" value="1">
		</constant>
		<constant name="CELL_MODE_STRING" value="0">
		</constant>
	</constants>
</class>
<class name="VScrollBar" inherits="ScrollBar" category="Nodes/GUI Nodes">
	<brief_description>
	Vertical version of [ScrollBar], which goes from left (min) to right (max).
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="VSeparator" inherits="Separator" category="Nodes/GUI Nodes">
	<brief_description>
	Vertical version of [Separator].
	</brief_description>
	<description>
	Vertical version of [Separator]. It is used to separate objects horizontally, though (but it looks vertical!).
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="VSlider" inherits="Slider" category="Nodes/GUI Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Viewport" inherits="Node" category="Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_rect"  >
			<argument index="0" name="rect" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_rect" qualifiers="const" >
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_visible_rect" qualifiers="const" >
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_viewport" qualifiers="const" >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="VisualInstance" inherits="Spatial" category="Nodes/3D/3D Visual Nodes">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="override_material_param"  >
			<argument index="0" name="param" type="String">
			</argument>
			<argument index="1" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_visible"  >
			<argument index="0" name="visible" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_visible" qualifiers="const" >
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_base"  >
			<argument index="0" name="base" type="RID">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="VisualServer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="texture_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="texture_create_from_image"  >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="Image">
			</argument>
			<argument index="1" name="arg1" type="int" default="7">
			</argument>
			<description>
			</description>
		</method>
		<method name="texture_allocate"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<argument index="3" name="arg3" type="int">
			</argument>
			<argument index="4" name="arg4" type="int" default="7">
			</argument>
			<description>
			</description>
		</method>
		<method name="texture_blit_rect"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<argument index="3" name="arg3" type="Image">
			</argument>
			<argument index="4" name="arg4" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="texture_set_flags"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="texture_get_flags" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="texture_get_width" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="texture_get_height" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_create"  >
			<return type="RID">
			</return>
			<argument index="0" name="mode" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_set_mode"  >
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_get_mode" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="shader" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_set_vertex_code"  >
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="code" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_get_vertex_code" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="shader" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_set_fragment_code"  >
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="code" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_get_fragment_code" qualifiers="const" >
			<return type="String">
			</return>
			<argument index="0" name="shader" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_set_param"  >
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="param" type="String">
			</argument>
			<argument index="2" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_get_param" qualifiers="const" >
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="param" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_get_param_list" qualifiers="const" >
			<return type="StringArray">
			</return>
			<argument index="0" name="shader" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_set_use_world_transform"  >
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_is_using_world_transform" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="shader" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="material_set_shader"  >
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_get_shader" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_set_param"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<argument index="2" name="arg2" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_get_param" qualifiers="const" >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_set_flag"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_get_flag" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_set_blend_mode"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_get_blend_mode" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_set_line_width"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_get_line_width" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_set_parameter"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_get_parameter" qualifiers="const" >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_set_texture"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_get_texture" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_set_texgen_mode"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_get_texgen_mode" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_set_texcoord_mode"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_get_texcoord_mode" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_set_uv_transform"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_get_uv_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="mesh_surface_set_array"  >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<argument index="3" name="arg3" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_array" qualifiers="const" >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_set_material"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<argument index="3" name="arg3" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_material" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_array_len" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_array_index_len" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_format" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_primitive_type" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_erase_surface"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_get_surface_count" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="multimesh_set_mesh"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_set_aabb"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="AABB">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_instance_set_transform"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_instance_set_color"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_get_mesh" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_get_aabb" qualifiers="const" >
			<return type="AABB">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="AABB">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_instance_get_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_instance_get_color" qualifiers="const" >
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="poly_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="poly_set_material"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<argument index="2" name="arg2" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="poly_add_primitive"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Vector3Array">
			</argument>
			<argument index="2" name="arg2" type="Vector3Array">
			</argument>
			<argument index="3" name="arg3" type="ColorArray">
			</argument>
			<argument index="4" name="arg4" type="Vector3Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="poly_clear"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="particles_set_amount"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_amount" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_emitting"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_is_emitting" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_visibility_aabb"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="AABB">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_visibility_aabb" qualifiers="const" >
			<return type="AABB">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_variable"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_variable" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_randomness"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_randomness" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_color_phases"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_color_phases" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_color_phase_pos"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_color_phase_pos" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_color_phase_color"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_color_phase_color" qualifiers="const" >
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_attractors"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_attractors" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_attractor_pos"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_attractor_pos" qualifiers="const" >
			<return type="Vector3">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_attractor_strength"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_attractor_strength" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_material"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<argument index="2" name="arg2" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_height_from_velocity"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_has_height_from_velocity" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_create"  >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_get_type" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_set_color"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_get_color" qualifiers="const" >
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_set_shadow"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_has_shadow" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_set_volumetric"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_is_volumetric" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_set_projector"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_get_projector" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_set_var"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_get_var" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="skeleton_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="skeleton_resize"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="skeleton_get_bone_count" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="skeleton_bone_set_transform"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="skeleton_bone_get_transform"  >
			<return type="Transform">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="room_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="room_set_bounds"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Dictionary">
			</argument>
			<description>
			</description>
		</method>
		<method name="room_get_bounds" qualifiers="const" >
			<return type="Dictionary">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="portal_set_shape"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_get_shape" qualifiers="const" >
			<return type="Array">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_set_enabled"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_is_enabled" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_set_disable_distance"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_get_disable_distance" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_set_disabled_color"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_get_disabled_color" qualifiers="const" >
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="camera_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="camera_set_perspective"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<argument index="3" name="arg3" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="camera_set_orthogonal"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<argument index="3" name="arg3" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="camera_set_transform"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="viewport_set_rect"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_get_rect" qualifiers="const" >
			<return type="Rect2">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_attach_camera"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_get_attached_camera" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_get_scenario" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_attach_canvas"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_remove_canvas"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_move_canvas_to_top"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_move_canvas_to_bottom"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="scenario_set_debug"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_get_effects" qualifiers="const" >
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_set_active"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<argument index="2" name="arg2" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_is_active" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_get_effect_params" qualifiers="const" >
			<return type="Array">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_get_effect_param" qualifiers="const" >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<argument index="2" name="arg2" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_set_effect_param"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<argument index="2" name="arg2" type="String">
			</argument>
			<argument index="3" name="arg3" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="instance_get_base" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_get_base_aabb" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_set_transform"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_get_transform" qualifiers="const" >
			<return type="Transform">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_attach_object_instance_ID"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_get_object_instance_ID" qualifiers="const" >
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_attach_skeleton"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_get_skeleton" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_set_room"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_get_room" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_set_exterior"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_is_exterior" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instances_cull_aabb" qualifiers="const" >
			<return type="Array">
			</return>
			<argument index="0" name="arg0" type="AABB">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instances_cull_ray" qualifiers="const" >
			<return type="Array">
			</return>
			<argument index="0" name="arg0" type="Vector3">
			</argument>
			<argument index="1" name="arg1" type="Vector3">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instances_cull_convex" qualifiers="const" >
			<return type="Array">
			</return>
			<argument index="0" name="arg0" type="Vector3">
			</argument>
			<argument index="1" name="arg1" type="Vector3">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_geometry_set_visible"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_geometry_is_visible" qualifiers="const" >
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_geometry_override_material_param" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_geometry_get_material_param" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="canvas_item_create"  >
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_parent"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_get_parent" qualifiers="const" >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_custom_rect"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<argument index="2" name="arg2" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_clip"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_opacity"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_get_opacity" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_self_opacity"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_get_self_opacity" qualifiers="const" >
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_line"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Vector2">
			</argument>
			<argument index="2" name="arg2" type="Vector2">
			</argument>
			<argument index="3" name="arg3" type="Color">
			</argument>
			<argument index="4" name="arg4" type="real" default="1">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_rect"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<argument index="2" name="arg2" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_texture_rect"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<argument index="3" name="arg3" type="bool">
			</argument>
			<argument index="4" name="arg4" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_texture_rect_region"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<argument index="3" name="arg3" type="Rect2">
			</argument>
			<argument index="4" name="arg4" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_style_box"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<argument index="3" name="arg3" type="RealArray">
			</argument>
			<argument index="4" name="arg4" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_primitive"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Array">
			</argument>
			<argument index="2" name="arg2" type="ColorArray">
			</argument>
			<argument index="3" name="arg3" type="Array" default="Array()">
			</argument>
			<argument index="4" name="arg4" type="RID" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_clear"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_raise"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_rotation"  >
			<argument index="0" name="arg0" type="real">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_texture"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Vector2">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_visible"  >
			<argument index="0" name="arg0" type="bool">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_pos"  >
			<argument index="0" name="arg0" type="Vector2">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="make_sphere_mesh"  >
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_add_surface_from_planes"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="free"  >
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="INSTANCE_GEOMETRY_MASK" value="30">
		</constant>
		<constant name="INSTANCE_PARTICLES" value="4">
		</constant>
		<constant name="SCENARIO_DEBUG_WIREFRAME" value="1">
		</constant>
		<constant name="LIGHT_VAR_ATTENUATION" value="4">
		</constant>
		<constant name="LIGHT_VAR_SPOT_ANGLE" value="1">
		</constant>
		<constant name="LIGHT_COLOR_DIFFUSE" value="1">
		</constant>
		<constant name="PARTICLE_ANGULAR_VELOCITY" value="4">
		</constant>
		<constant name="INSTANCE_LIGHT" value="5">
		</constant>
		<constant name="INSTANCE_MULTIMESH" value="2">
		</constant>
		<constant name="PARTICLE_HEIGHT" value="11">
		</constant>
		<constant name="PARTICLE_LINEAR_VELOCITY" value="3">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_SPECULAR" value="2">
		</constant>
		<constant name="ARRAY_VERTEX" value="0">
		</constant>
		<constant name="LIGHT_SPOT" value="2">
		</constant>
		<constant name="CUBEMAP_BACK" value="5">
		</constant>
		<constant name="MATERIAL_FLAG_MAX" value="7">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_DETAIL_MIX" value="6">
		</constant>
		<constant name="ARRAY_COLOR" value="3">
		</constant>
		<constant name="ARRAY_FORMAT_BONES" value="64">
		</constant>
		<constant name="PRIMITIVE_MAX" value="7">
		</constant>
		<constant name="FIXED_MATERIAL_TEXGEN_SPHERE" value="1">
		</constant>
		<constant name="ARRAY_FORMAT_INDEX" value="256">
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_STRIP" value="5">
		</constant>
		<constant name="MAX_PARTICLE_ATTRACTORS" value="4">
		</constant>
		<constant name="TEXTURE_FLAG_FILTER" value="4">
		</constant>
		<constant name="CUBEMAP_TOP" value="3">
		</constant>
		<constant name="MATERIAL_BLEND_MODE_ADD" value="1">
		</constant>
		<constant name="FIXED_MATERIAL_TEXCOORD_TEXGEN" value="3">
		</constant>
		<constant name="FIXED_MATERIAL_TEXCOORD_UV" value="0">
		</constant>
		<constant name="ARRAY_TANGENT" value="2">
		</constant>
		<constant name="ARRAY_FORMAT_NORMAL" value="2">
		</constant>
		<constant name="INFO_VIDEO_MEM_USED" value="3">
		</constant>
		<constant name="LIGHT_VAR_SPOT_ATTENUATION" value="0">
		</constant>
		<constant name="TEXTURE_FLAG_MIPMAPS" value="1">
		</constant>
		<constant name="MATERIAL_FLAG_INVERT_FACES" value="2">
		</constant>
		<constant name="MATERIAL_BLEND_MODE_SUB" value="2">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_DETAIL" value="1">
		</constant>
		<constant name="INSTANCE_ROOM" value="6">
		</constant>
		<constant name="INSTANCE_MESH" value="1">
		</constant>
		<constant name="SCENARIO_DEBUG_DISABLED" value="0">
		</constant>
		<constant name="PARTICLE_VAR_MAX" value="13">
		</constant>
		<constant name="PRIMITIVE_TRIANGLES" value="4">
		</constant>
		<constant name="PRIMITIVE_LINE_STRIP" value="2">
		</constant>
		<constant name="TEXTURE_FLAGS_DEFAULT" value="7">
		</constant>
		<constant name="CUBEMAP_BOTTOM" value="2">
		</constant>
		<constant name="FIXED_MATERIAL_TEXGEN_SCREENZ" value="3">
		</constant>
		<constant name="FIXED_MATERIAL_TEXCOORD_UV2" value="2">
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV" value="16">
		</constant>
		<constant name="ARRAY_FORMAT_WEIGHTS" value="128">
		</constant>
		<constant name="INFO_MATERIAL_CHANGES_IN_FRAME" value="1">
		</constant>
		<constant name="PARTICLE_SPREAD" value="1">
		</constant>
		<constant name="PARTICLE_LIFETIME" value="0">
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_FAN" value="6">
		</constant>
		<constant name="NO_INDEX_ARRAY" value="-1">
		</constant>
		<constant name="MATERIAL_FLAG_BILLBOARD" value="6">
		</constant>
		<constant name="FIXED_MATERIAL_TEXGEN_LOCAL_XY" value="0">
		</constant>
		<constant name="SCENARIO_DEBUG_OVERDRAW" value="2">
		</constant>
		<constant name="PARTICLE_HEIGHT_SPEED_SCALE" value="12">
		</constant>
		<constant name="PARTICLE_INITIAL_ANGLE" value="10">
		</constant>
		<constant name="PARTICLE_TANGENTIAL_ACCELERATION" value="7">
		</constant>
		<constant name="PRIMITIVE_LINES" value="1">
		</constant>
		<constant name="CUSTOM_ARRAY_SIZE" value="8">
		</constant>
		<constant name="ARRAY_WEIGHTS_SIZE" value="4">
		</constant>
		<constant name="MATERIAL_FLAG_UNSHADED" value="3">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_DIFFUSE" value="0">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_MAX" value="9">
		</constant>
		<constant name="LIGHT_COLOR_SPECULAR" value="2">
		</constant>
		<constant name="MATERIAL_BLEND_MODE_MIX" value="0">
		</constant>
		<constant name="MATERIAL_BLEND_MODE_MUL" value="3">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_EMISSION" value="3">
		</constant>
		<constant name="ARRAY_MAX" value="9">
		</constant>
		<constant name="ARRAY_FORMAT_VERTEX" value="1">
		</constant>
		<constant name="INFO_OBJECTS_IN_FRAME" value="0">
		</constant>
		<constant name="LIGHT_VAR_MAX" value="6">
		</constant>
		<constant name="LIGHT_COLOR_AMBIENT" value="0">
		</constant>
		<constant name="LIGHT_DIRECTIONAL" value="0">
		</constant>
		<constant name="PRIMITIVE_POINTS" value="0">
		</constant>
		<constant name="CUBEMAP_FRONT" value="4">
		</constant>
		<constant name="SHADER_MATERIAL" value="0">
		</constant>
		<constant name="MATERIAL_FLAG_VISIBLE" value="0">
		</constant>
		<constant name="ARRAY_BONES" value="6">
		</constant>
		<constant name="ARRAY_FORMAT_COLOR" value="8">
		</constant>
		<constant name="INSTANCE_PORTAL" value="7">
		</constant>
		<constant name="MAX_CURSORS" value="8">
		</constant>
		<constant name="TEXTURE_FLAG_CUBEMAP" value="8">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_GLOW" value="5">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_NORMAL" value="7">
		</constant>
		<constant name="ARRAY_INDEX" value="8">
		</constant>
		<constant name="INFO_VERTEX_MEM_USED" value="5">
		</constant>
		<constant name="INFO_USAGE_VIDEO_MEM_TOTAL" value="2">
		</constant>
		<constant name="LIGHT_VAR_RADIUS" value="2">
		</constant>
		<constant name="PARTICLE_FINAL_SIZE" value="9">
		</constant>
		<constant name="PARTICLE_INITIAL_SIZE" value="8">
		</constant>
		<constant name="PARTICLE_LINEAR_ACCELERATION" value="5">
		</constant>
		<constant name="CUBEMAP_LEFT" value="0">
		</constant>
		<constant name="MATERIAL_FLAG_ONTOP" value="4">
		</constant>
		<constant name="FIXED_MATERIAL_TEXGEN_SCREEN" value="2">
		</constant>
		<constant name="ARRAY_NORMAL" value="1">
		</constant>
		<constant name="ARRAY_FORMAT_TANGENT" value="4">
		</constant>
		<constant name="INSTANCE_POLY" value="3">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_SPECULAR_EXP" value="4">
		</constant>
		<constant name="LIGHT_VAR_ENERGY" value="3">
		</constant>
		<constant name="PARTICLE_RADIAL_ACCELERATION" value="6">
		</constant>
		<constant name="PARTICLE_GRAVITY" value="2">
		</constant>
		<constant name="PRIMITIVE_LINE_LOOP" value="3">
		</constant>
		<constant name="MATERIAL_FLAG_WIREFRAME" value="5">
		</constant>
		<constant name="ARRAY_TEX_UV" value="4">
		</constant>
		<constant name="ARRAY_WEIGHTS" value="7">
		</constant>
		<constant name="INFO_TEXTURE_MEM_USED" value="4">
		</constant>
		<constant name="LIGHT_OMNI" value="1">
		</constant>
		<constant name="MAX_PARTICLE_COLOR_PHASES" value="4">
		</constant>
		<constant name="TEXTURE_FLAG_REPEAT" value="2">
		</constant>
		<constant name="CUBEMAP_RIGHT" value="1">
		</constant>
		<constant name="SHADER_POST_PROCESS" value="1">
		</constant>
		<constant name="MATERIAL_FLAG_DOUBLE_SIDED" value="1">
		</constant>
		<constant name="FIXED_MATERIAL_TEXCOORD_UV_TRANSFORM" value="1">
		</constant>
	</constants>
</class>
<class name="World" inherits="Resource" category="Resources">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
</doc>
