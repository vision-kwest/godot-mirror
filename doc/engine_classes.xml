<?xml version="1.0" encoding="UTF-8" ?>
<doc version="0.99.2555-pre-beta" name="Engine Types">
<class name="AcceptDialog" inherits="WindowDialog" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_ok">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_label">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_hide_on_ok">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_hide_on_ok" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="add_button">
			<return type="Button">
			</return>
			<argument index="0" name="text" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_cancel">
			<return type="Button">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="register_text_enter">
			<argument index="0" name="line_edit" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_text">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_text" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="confirmed">
			<description>
			</description>
		</signal>
		<signal name="custom_action">
			<argument index="0" name="action" type="String">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="Animation" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_track">
			<return type="int">
			</return>
			<argument index="0" name="type" type="int">
			</argument>
			<argument index="1" name="at_pos" type="int" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_track">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_track_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="track_get_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_get_path" qualifiers="const">
			<return type="NodePath">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_set_path">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_move_up">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_move_down">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transform_track_insert_key">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time" type="real">
			</argument>
			<argument index="2" name="loc" type="Vector3">
			</argument>
			<argument index="3" name="rot" type="Quat">
			</argument>
			<argument index="4" name="scale" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_insert_key">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time" type="real">
			</argument>
			<argument index="2" name="key" type="var">
			</argument>
			<argument index="3" name="transition" type="real" default="1">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_remove_key">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_remove_key_at_pos">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="pos" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_set_key_value">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key" type="int">
			</argument>
			<argument index="2" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_set_key_transition">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<argument index="2" name="transition" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_get_key_transition" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_get_key_count" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_get_key_value" qualifiers="const">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_get_key_time" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_find_key" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time" type="real">
			</argument>
			<argument index="2" name="exact" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_set_interpolation_type">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="interpolation" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="track_get_interpolation_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transform_track_interpolate" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="value_track_set_continuous">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="continuous" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="value_track_is_continuous" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="value_track_get_key_indices" qualifiers="const">
			<return type="IntArray">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<argument index="2" name="delta" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="method_track_get_key_indices" qualifiers="const">
			<return type="IntArray">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<argument index="2" name="delta" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="method_track_get_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="method_track_get_params" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="key_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_length">
			<argument index="0" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_length" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_loop">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_loop" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="clear">
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="TYPE_TRANSFORM" value="0">
		</constant>
		<constant name="TYPE_VALUE" value="1">
		</constant>
		<constant name="TYPE_METHOD" value="2">
		</constant>
		<constant name="INTERPOLATION_NEAREST" value="0">
		</constant>
		<constant name="INTERPOLATION_LINEAR" value="1">
		</constant>
		<constant name="INTERPOLATION_CUBIC" value="2">
		</constant>
	</constants>
</class>
<class name="AnimationPlayer" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_animation">
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="animation" type="Animation">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_animation">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="rename_animation">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="newname" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_animation" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_animation" qualifiers="const">
			<return type="Animation">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_animation_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<description>
			</description>
		</method>
		<method name="set_blend_time">
			<argument index="0" name="anim_from" type="String">
			</argument>
			<argument index="1" name="anim_to" type="String">
			</argument>
			<argument index="2" name="sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_blend_time" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="anim_from" type="String">
			</argument>
			<argument index="1" name="anim_to" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="play">
			<argument index="0" name="name" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="stop">
			<description>
			</description>
		</method>
		<method name="stop_all">
			<description>
			</description>
		</method>
		<method name="is_playing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_current_animation">
			<argument index="0" name="anim" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_current_animation" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="queue">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_pause">
			<argument index="0" name="paused" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_paused" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_speed">
			<argument index="0" name="speed" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_speed" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autoplay">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_autoplay" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="seek">
			<argument index="0" name="pos_sec" type="real">
			</argument>
			<argument index="1" name="update" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="find_animation" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="animation" type="Animation">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_caches">
			<description>
			</description>
		</method>
		<method name="set_animation_process_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_animation_process_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="finished">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="ANIMATION_PROCESS_FIXED" value="0">
		</constant>
		<constant name="ANIMATION_PROCESS_IDLE" value="1">
		</constant>
	</constants>
</class>
<class name="AnimationTreePlayer" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_node">
			<argument index="0" name="type" type="int">
			</argument>
			<argument index="1" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_node_id" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_set_name">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_get_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_get_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_get_input_count" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="animation_node_set_animation">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="animation" type="Animation">
			</argument>
			<description>
			</description>
		</method>
		<method name="animation_node_get_animation" qualifiers="const">
			<return type="Animation">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_set_fadein_time">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_get_fadein_time" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_set_fadeout_time">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_get_fadeout_time" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_set_autorestart">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_set_autorestart_delay">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="delay_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_set_autorestart_random_delay">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="rand_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_has_autorestart" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_get_autorestart_delay" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_get_autorestart_random_delay" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_start">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_stop">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="oneshot_node_is_active" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mix_node_set_amount">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="ratio" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="mix_node_get_amount" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend2_node_set_amount">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="blend" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend2_node_get_amount" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend3_node_set_amount">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="blend" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend3_node_get_amount" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend4_node_set_amount">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="blend" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="blend4_node_get_amount" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="timescale_node_set_scale">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="scale" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="timescale_node_get_scale" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="timeseek_node_seek">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="pos_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_set_input_count">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="count" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_get_input_count" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_delete_input">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_set_input_auto_advance">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="input_idx" type="int">
			</argument>
			<argument index="2" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_has_input_auto_advance" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_set_xfade_time">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_get_xfade_time" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_set_current">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="transition_node_get_current" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_set_pos">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="screen_pos" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="node_get_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_node">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="connect">
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="dst_id" type="int">
			</argument>
			<argument index="2" name="dst_input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_connected" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="dst_id" type="int">
			</argument>
			<argument index="2" name="dst_input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="disconnect">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="dst_input_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_active">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_active" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_base_path">
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_base_path" qualifiers="const">
			<return type="NodePath">
			</return>
			<description>
			</description>
		</method>
		<method name="get_node_list">
			<return type="IntArray">
			</return>
			<description>
			</description>
		</method>
		<method name="reset">
			<description>
			</description>
		</method>
		<method name="recompute_caches">
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NODE_OUTPUT" value="0">
		</constant>
		<constant name="NODE_ANIMATION" value="1">
		</constant>
		<constant name="NODE_ONESHOT" value="2">
		</constant>
		<constant name="NODE_MIX" value="3">
		</constant>
		<constant name="NODE_BLEND2" value="4">
		</constant>
		<constant name="NODE_BLEND3" value="5">
		</constant>
		<constant name="NODE_BLEND4" value="6">
		</constant>
		<constant name="NODE_TIMESCALE" value="7">
		</constant>
		<constant name="NODE_TIMESEEK" value="8">
		</constant>
		<constant name="NODE_TRANSITION" value="9">
		</constant>
	</constants>
</class>
<class name="Area2D" inherits="CollisionObject2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_override_space_params">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_overriding_space_params" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_gravity_is_point">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_gravity_a_point" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_gravity_vector">
			<argument index="0" name="vector" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_gravity_vector" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_gravity">
			<argument index="0" name="gravity" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_gravity" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_density">
			<argument index="0" name="density" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_density" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_priority">
			<argument index="0" name="priority" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_priority" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_enable_monitoring">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_monitoring_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="body_enter">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="body_enter_shape">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<argument index="2" name="body_shape" type="int">
			</argument>
			<argument index="3" name="area_shape" type="int">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="body_exit">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="body_exit_shape">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<argument index="2" name="body_shape" type="int">
			</argument>
			<argument index="3" name="area_shape" type="int">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="AudioServer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="sample_create">
			<return type="RID">
			</return>
			<argument index="0" name="format" type="int">
			</argument>
			<argument index="1" name="stereo" type="bool">
			</argument>
			<argument index="2" name="length" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_description">
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="description" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_description" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_format" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_is_stereo" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_length" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_signed_data">
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="data" type="RealArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_data">
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RawArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_data" qualifiers="const">
			<return type="RawArray">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_mix_rate">
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="mix_rate" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_mix_rate" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_loop_format">
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="loop_format" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_loop_format" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_loop_begin">
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_loop_begin" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_set_loop_end">
			<argument index="0" name="sample" type="RID">
			</argument>
			<argument index="1" name="pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="sample_get_loop_end" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="voice_play">
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="sample" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_volume">
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="volume" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_pan">
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="pan" type="real">
			</argument>
			<argument index="2" name="depth" type="real" default="0">
			</argument>
			<argument index="3" name="height" type="real" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_filter">
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="type" type="int">
			</argument>
			<argument index="2" name="cutoff" type="real">
			</argument>
			<argument index="3" name="resonance" type="real">
			</argument>
			<argument index="4" name="gain" type="real" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_chorus">
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="chorus" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_reverb">
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="room" type="int">
			</argument>
			<argument index="2" name="reverb" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_mix_rate">
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="rate" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_positional">
			<argument index="0" name="voice" type="RID">
			</argument>
			<argument index="1" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_volume" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_pan" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_pan_height" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_pan_depth" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_filter_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_filter_cutoff" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_filter_resonance" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_chorus" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_reverb_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_reverb" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_get_mix_rate" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_is_positional" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_stop">
			<argument index="0" name="voice" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="free">
			<argument index="0" name="rid" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_stream_global_volume_scale">
			<argument index="0" name="scale" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stream_global_volume_scale" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_mixer_global_volume_scale">
			<argument index="0" name="scale" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mixer_global_volume_scale" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="SAMPLE_FORMAT_PCM8" value="0">
		</constant>
		<constant name="SAMPLE_FORMAT_PCM16" value="1">
		</constant>
		<constant name="SAMPLE_FORMAT_IMA_ADPCM" value="2">
		</constant>
		<constant name="SAMPLE_LOOP_NONE" value="0">
		</constant>
		<constant name="SAMPLE_LOOP_FORWARD" value="1">
		</constant>
		<constant name="SAMPLE_LOOP_PING_PONG" value="2">
		</constant>
		<constant name="FILTER_NONE" value="0">
		</constant>
		<constant name="FILTER_LOWPASS" value="1">
		</constant>
		<constant name="FILTER_BANDPASS" value="2">
		</constant>
		<constant name="FILTER_HIPASS" value="3">
		</constant>
		<constant name="FILTER_NOTCH" value="4">
		</constant>
		<constant name="FILTER_BANDLIMIT" value="6">
		</constant>
		<constant name="REVERB_SMALL" value="0">
		</constant>
		<constant name="REVERB_MEDIUM" value="1">
		</constant>
		<constant name="REVERB_LARGE" value="2">
		</constant>
		<constant name="REVERB_HALL" value="3">
		</constant>
	</constants>
</class>
<class name="AudioServerSW" inherits="AudioServer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="AudioStream" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="play">
			<description>
			</description>
		</method>
		<method name="stop">
			<description>
			</description>
		</method>
		<method name="is_playing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_loop">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_loop" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_stream_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_loop_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="seek_pos">
			<argument index="0" name="pos" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_length" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_update_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="update">
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="UPDATE_NONE" value="0">
		</constant>
		<constant name="UPDATE_IDLE" value="1">
		</constant>
		<constant name="UPDATE_THREAD" value="2">
		</constant>
	</constants>
</class>
<class name="AudioStreamGibberish" inherits="AudioStream" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_phonemes">
			<argument index="0" name="phonemes" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_phonemes" qualifiers="const">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_pitch_scale">
			<argument index="0" name="pitch_scale" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pitch_scale" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_pitch_random_scale">
			<argument index="0" name="pitch_random_scale" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pitch_random_scale" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_xfade_time">
			<argument index="0" name="sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_xfade_time" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="AudioStreamMPC" inherits="AudioStreamResampled" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_file">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_file" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="AudioStreamOGGVorbis" inherits="AudioStreamResampled" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="AudioStreamResampled" inherits="AudioStream" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="AudioStreamSpeex" inherits="AudioStreamResampled" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_file">
			<argument index="0" name="file" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_file" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="BCSFX" inherits="ScenarioFX" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="BGColorFX" inherits="ScenarioFX" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="BGImageFX" inherits="ScenarioFX" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="BaseButton" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_pressed">
			<argument index="0" name="pressed" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_pressed" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_toggle_mode">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_toggle_mode" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_disabled">
			<argument index="0" name="disabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_disabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_click_on_press">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_click_on_press" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="toggled">
			<argument index="0" name="pressed" type="bool">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="pressed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="BodyShape" inherits="Spatial" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="BoxContainer" inherits="Container" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="BoxShape" inherits="Shape" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_extents">
			<argument index="0" name="extents" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_extents" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Button" inherits="BaseButton" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_text">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_text" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_icon">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_icon" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="set_flat">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_clip_text">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_clip_text" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_flat" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ButtonArray" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_button">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_icon_button">
			<argument index="0" name="icon" type="Object">
			</argument>
			<argument index="1" name="text" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_button_text">
			<argument index="0" name="button" type="int">
			</argument>
			<argument index="1" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_button_icon">
			<argument index="0" name="button" type="int">
			</argument>
			<argument index="1" name="icon" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_button_text" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="button" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_button_icon" qualifiers="const">
			<return type="Object">
			</return>
			<argument index="0" name="button" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_button_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selected" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_hovered" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_selected">
			<argument index="0" name="button" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="erase_button">
			<argument index="0" name="button" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear">
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="button_selected">
			<argument index="0" name="button" type="int">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="ALIGN_BEGIN" value="0">
		</constant>
		<constant name="ALIGN_CENTER" value="1">
		</constant>
		<constant name="ALIGN_END" value="2">
		</constant>
		<constant name="ALIGN_FILL" value="3">
		</constant>
		<constant name="ALIGN_EXPAND_FILL" value="4">
		</constant>
	</constants>
</class>
<class name="ButtonGroup" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_pressed_button" qualifiers="const">
			<return type="BaseButton">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pressed_button_index" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_focused_button" qualifiers="const">
			<return type="BaseButton">
			</return>
			<description>
			</description>
		</method>
		<method name="get_button_list" qualifiers="const">
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
		<method name="set_pressed_button">
			<argument index="0" name="button" type="BaseButton">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Camera" inherits="Spatial" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="project_ray_normal" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="screen_point" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="project_local_ray_normal" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="screen_point" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="project_ray_origin" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="screen_point" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="unproject_position" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="world_point" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="project_position" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="screen_point" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_perspective">
			<argument index="0" name="fov" type="real">
			</argument>
			<argument index="1" name="z_near" type="real">
			</argument>
			<argument index="2" name="z_far" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_orthogonal">
			<argument index="0" name="size" type="real">
			</argument>
			<argument index="1" name="z_near" type="real">
			</argument>
			<argument index="2" name="z_far" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="make_current">
			<description>
			</description>
		</method>
		<method name="clear_current">
			<description>
			</description>
		</method>
		<method name="is_current" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_camera_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<description>
			</description>
		</method>
		<method name="get_fov" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_size" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_zfar" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_znear" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_projection" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PROJECTION_PERSPECTIVE" value="0">
		</constant>
		<constant name="PROJECTION_ORTHOGONAL" value="1">
		</constant>
	</constants>
</class>
<class name="Camera2D" inherits="ScreenProximity2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_offset">
			<argument index="0" name="offset" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_offset" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_centered">
			<argument index="0" name="centered" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_centered" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="make_current">
			<description>
			</description>
		</method>
		<method name="is_current" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_limit">
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="limit" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_limit" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_drag_margin">
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="drag_margin" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_drag_margin" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_camera_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="force_update_scroll">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="CanvasItem" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="edit_set_state">
			<argument index="0" name="state" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="edit_get" qualifiers="const">
			<description>
			</description>
		</method>
		<method name="edit_set_rect">
			<argument index="0" name="rect" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="edit_rotate">
			<argument index="0" name="degrees" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_canvas_item" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="is_visible" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_hidden" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="show">
			<description>
			</description>
		</method>
		<method name="hide">
			<description>
			</description>
		</method>
		<method name="update">
			<description>
			</description>
		</method>
		<method name="set_as_toplevel">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_set_as_toplevel" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_blend_mode">
			<argument index="0" name="blend_mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_blend_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_opacity">
			<argument index="0" name="opacity" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_opacity" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_self_opacity">
			<argument index="0" name="self_opacity" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_self_opacity" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="draw_line">
			<argument index="0" name="from" type="Vector2">
			</argument>
			<argument index="1" name="to" type="Vector2">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<argument index="3" name="width" type="real" default="1">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_rect">
			<argument index="0" name="rect" type="Rect2">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_circle">
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<argument index="1" name="radius" type="real">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_texture">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<argument index="1" name="pos" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_texture_rect">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<argument index="1" name="rect" type="Rect2">
			</argument>
			<argument index="2" name="tile" type="bool" default="false">
			</argument>
			<argument index="3" name="modulate" type="Color" default="Color(1,1,1,1)">
			</argument>
			<argument index="4" name="transpose" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_texture_rect_region">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<argument index="1" name="rect" type="Rect2">
			</argument>
			<argument index="2" name="src_rect" type="Rect2">
			</argument>
			<argument index="3" name="modulate" type="Color" default="Color(1,1,1,1)">
			</argument>
			<argument index="4" name="transpose" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_style_box">
			<argument index="0" name="style_box" type="StyleBox">
			</argument>
			<argument index="1" name="rect" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_primitive">
			<argument index="0" name="points" type="Vector2Array">
			</argument>
			<argument index="1" name="colors" type="ColorArray">
			</argument>
			<argument index="2" name="uvs" type="Vector2Array" default="Array()">
			</argument>
			<argument index="3" name="texture" type="Texture" default="Object()">
			</argument>
			<argument index="4" name="width" type="real" default="1">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_polygon">
			<argument index="0" name="points" type="Vector2Array">
			</argument>
			<argument index="1" name="colors" type="ColorArray">
			</argument>
			<argument index="2" name="uvs" type="Vector2Array">
			</argument>
			<argument index="3" name="texture" type="Texture" default="Array()">
			</argument>
			<argument index="4" name="arg4" type="real" default="Object()">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_colored_polygon">
			<argument index="0" name="points" type="Vector2Array">
			</argument>
			<argument index="1" name="color" type="ColorArray">
			</argument>
			<argument index="2" name="uvs" type="Vector2Array">
			</argument>
			<argument index="3" name="texture" type="Texture" default="Array()">
			</argument>
			<argument index="4" name="arg4" type="real" default="Object()">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_string">
			<argument index="0" name="font" type="Font">
			</argument>
			<argument index="1" name="pos" type="Vector2">
			</argument>
			<argument index="2" name="text" type="String">
			</argument>
			<argument index="3" name="modulate" type="Color" default="Color(1,1,1,1)">
			</argument>
			<argument index="4" name="clip_w" type="int" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_char">
			<return type="real">
			</return>
			<argument index="0" name="font" type="Font">
			</argument>
			<argument index="1" name="pos" type="Vector2">
			</argument>
			<argument index="2" name="char" type="String">
			</argument>
			<argument index="3" name="next" type="String">
			</argument>
			<argument index="4" name="modulate" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_set_transform">
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<argument index="1" name="rot" type="real">
			</argument>
			<argument index="2" name="scale" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_transform_notify">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_transform_notify_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="item_rect_changed">
			<description>
			</description>
		</signal>
		<signal name="draw">
			<description>
			</description>
		</signal>
		<signal name="visibility_changed">
			<description>
			</description>
		</signal>
		<signal name="hide">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="BLEND_MODE_MIX" value="0">
		</constant>
		<constant name="BLEND_MODE_ADD" value="1">
		</constant>
		<constant name="BLEND_MODE_SUB" value="2">
		</constant>
		<constant name="BLEND_MODE_MUL" value="3">
		</constant>
		<constant name="NOTIFICATION_DRAW" value="30">
		</constant>
		<constant name="NOTIFICATION_VISIBILITY_CHANGED" value="31">
		</constant>
		<constant name="NOTIFICATION_ENTER_CANVAS" value="32">
		</constant>
		<constant name="NOTIFICATION_EXIT_CANVAS" value="33">
		</constant>
		<constant name="NOTIFICATION_TRANSFORM_CHANGED" value="34">
		</constant>
	</constants>
</class>
<class name="CanvasLayer" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_layer">
			<argument index="0" name="layer" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_layer" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_transform">
			<argument index="0" name="transform" type="Matrix32">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_transform" qualifiers="const">
			<return type="Matrix32">
			</return>
			<description>
			</description>
		</method>
		<method name="set_offset">
			<argument index="0" name="offset" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_offset" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_rotation">
			<argument index="0" name="rotation" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_rotation" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_scale">
			<argument index="0" name="scale" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_scale" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_canvas" qualifiers="const">
			<return type="Canvas">
			</return>
			<description>
			</description>
		</method>
		<method name="get_viewport" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="CapsuleShape" inherits="Shape" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_radius">
			<argument index="0" name="radius" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_radius" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_height">
			<argument index="0" name="height" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="CapsuleShape2D" inherits="Shape2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_radius">
			<argument index="0" name="radius" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_radius" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_height">
			<argument index="0" name="height" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="CenterContainer" inherits="Container" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="CheckButton" inherits="BaseButton" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_text">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_text" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="CircleShape2D" inherits="Shape2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_radius">
			<argument index="0" name="radius" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_radius" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="CollisionObject2D" inherits="Node2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_shape">
			<argument index="0" name="shape" type="Shape2D">
			</argument>
			<argument index="1" name="transform" type="Matrix32" default="1,0, 0,1, 0,0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shape_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_shape">
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<argument index="1" name="shape" type="Shape">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_shape_transform">
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<argument index="1" name="transform" type="Matrix32">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shape" qualifiers="const">
			<return type="Shape2D">
			</return>
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shape_transform" qualifiers="const">
			<return type="Matrix32">
			</return>
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_shape">
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_shapes">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="CollisionPolygon2D" inherits="Node2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="CollisionShape2D" inherits="Node2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="ColorPicker" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_color">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color" qualifiers="const">
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
		<method name="set_show_alpha">
			<argument index="0" name="show" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_showing_alpha" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="color_changed">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="ConcavePolygonShape" inherits="Shape" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_faces">
			<argument index="0" name="faces" type="Vector3Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_faces" qualifiers="const">
			<return type="Vector3Array">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ConcavePolygonShape2D" inherits="Shape2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_segments">
			<argument index="0" name="segments" type="Vector2Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_segments" qualifiers="const">
			<return type="Vector2Array">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ConfirmationDialog" inherits="AcceptDialog" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_cancel">
			<return type="Button">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Container" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="queue_sort">
			<description>
			</description>
		</method>
		<method name="fit_child_in_rect">
			<argument index="0" name="child" type="Control">
			</argument>
			<argument index="1" name="rect" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="sort_children">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_SORT_CHILDREN" value="50">
		</constant>
	</constants>
</class>
<class name="Control" inherits="CanvasItem" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="accept_event">
			<description>
			</description>
		</method>
		<method name="get_minimum_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="is_window" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_window" qualifiers="const">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_anchor">
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="anchor_mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_anchor" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_margin">
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="offset" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_anchor_and_margin">
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="anchor_mode" type="int">
			</argument>
			<argument index="2" name="offset" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_begin">
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_end">
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_pos">
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_size">
			<argument index="0" name="size" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_global_pos">
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_margin" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_begin" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_end" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_parent_area_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_global_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_global_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_area_as_parent_rect">
			<argument index="0" name="margin" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="show_modal">
			<argument index="0" name="exclusive" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_focus_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_focus" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="grab_focus">
			<description>
			</description>
		</method>
		<method name="release_focus">
			<description>
			</description>
		</method>
		<method name="get_focus_owner" qualifiers="const">
			<return type="Control">
			</return>
			<description>
			</description>
		</method>
		<method name="set_h_size_flags">
			<argument index="0" name="flags" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_h_size_flags" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_stretch_ratio">
			<argument index="0" name="ratio" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stretch_ratio" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_v_size_flags">
			<argument index="0" name="flags" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_v_size_flags" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_theme">
			<argument index="0" name="theme" type="Theme">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_theme" qualifiers="const">
			<return type="Theme">
			</return>
			<description>
			</description>
		</method>
		<method name="add_icon_override">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_style_override">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="stylebox" type="StyleBox">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_font_override">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="font" type="Font">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_color_override">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_constant_override">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="constant" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_icon" qualifiers="const">
			<return type="Texture">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stylebox" qualifiers="const">
			<return type="StyleBox">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_font" qualifiers="const">
			<return type="Font">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_constant" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_parent_control" qualifiers="const">
			<return type="Control">
			</return>
			<description>
			</description>
		</method>
		<method name="set_tooltip">
			<argument index="0" name="tooltip" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tooltip" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="atpos" type="Vector2" default="Vector2(0,0)">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_cursor_shape">
			<argument index="0" name="shape" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_default_cursor_shape" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_cursor_shape" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="pos" type="Vector2" default="Vector2(0,0)">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_focus_neighbour">
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="neighbour" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_focus_neighbour" qualifiers="const">
			<return type="NodePath">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_ignore_mouse">
			<argument index="0" name="ignore" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_ignoring_mouse" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="focus_enter">
			<description>
			</description>
		</signal>
		<signal name="mouse_enter">
			<description>
			</description>
		</signal>
		<signal name="resized">
			<description>
			</description>
		</signal>
		<signal name="minimum_size_changed">
			<description>
			</description>
		</signal>
		<signal name="size_flags_changed">
			<description>
			</description>
		</signal>
		<signal name="focus_exit">
			<description>
			</description>
		</signal>
		<signal name="input_event">
			<description>
			</description>
		</signal>
		<signal name="mouse_exit">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="ANCHOR_BEGIN" value="0">
		</constant>
		<constant name="ANCHOR_END" value="1">
		</constant>
		<constant name="ANCHOR_RATIO" value="2">
		</constant>
		<constant name="FOCUS_NONE" value="0">
		</constant>
		<constant name="FOCUS_CLICK" value="1">
		</constant>
		<constant name="FOCUS_ALL" value="2">
		</constant>
		<constant name="NOTIFICATION_RESIZED" value="34">
		</constant>
		<constant name="NOTIFICATION_MOUSE_ENTER" value="35">
		</constant>
		<constant name="NOTIFICATION_MOUSE_EXIT" value="36">
		</constant>
		<constant name="NOTIFICATION_FOCUS_ENTER" value="37">
		</constant>
		<constant name="NOTIFICATION_FOCUS_EXIT" value="38">
		</constant>
		<constant name="NOTIFICATION_THEME_CHANGED" value="39">
		</constant>
		<constant name="NOTIFICATION_MODAL_CLOSE" value="40">
		</constant>
		<constant name="CURSOR_ARROW" value="0">
		</constant>
		<constant name="CURSOR_IBEAM" value="1">
		</constant>
		<constant name="CURSOR_POINTING_HAND" value="2">
		</constant>
		<constant name="CURSOR_CROSS" value="3">
		</constant>
		<constant name="CURSOR_WAIT" value="4">
		</constant>
		<constant name="CURSOR_BUSY" value="5">
		</constant>
		<constant name="CURSOR_DRAG" value="6">
		</constant>
		<constant name="CURSOR_CAN_DROP" value="7">
		</constant>
		<constant name="CURSOR_FORBIDDEN" value="8">
		</constant>
		<constant name="CURSOR_VSIZE" value="9">
		</constant>
		<constant name="CURSOR_HSIZE" value="10">
		</constant>
		<constant name="CURSOR_BDIAGSIZE" value="11">
		</constant>
		<constant name="CURSOR_FDIAGSIZE" value="12">
		</constant>
		<constant name="CURSOR_MOVE" value="13">
		</constant>
		<constant name="CURSOR_VSPLIT" value="14">
		</constant>
		<constant name="CURSOR_HSPLIT" value="15">
		</constant>
		<constant name="CURSOR_HELP" value="16">
		</constant>
	</constants>
</class>
<class name="ConvexPolygonShape" inherits="Shape" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_planes">
			<argument index="0" name="planes" type="Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_planes" qualifiers="const">
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ConvexPolygonShape2D" inherits="Shape2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_points">
			<argument index="0" name="points" type="Vector2Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_points" qualifiers="const">
			<return type="Vector2Array">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="DOFBlurFX" inherits="ScenarioFX" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="DampedSpringJoint2D" inherits="Joint2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_length">
			<argument index="0" name="length" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_length" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_rest_length">
			<argument index="0" name="rest_length" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_rest_length" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_stiffness">
			<argument index="0" name="stiffness" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stiffness" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_damping">
			<argument index="0" name="damping" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_damping" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="DirectionalLight" inherits="Light" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="DynamicBody" inherits="PhysicsBody" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_mass">
			<argument index="0" name="mass" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_friction">
			<argument index="0" name="friction" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_bounce">
			<argument index="0" name="bounce" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mass" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_friction" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_bounce" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_linear_velocity">
			<argument index="0" name="linear_velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_linear_velocity" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_angular_velocity">
			<argument index="0" name="angular_velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_angular_velocity" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_sleeping">
			<argument index="0" name="sleeping" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_sleeping" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_applied_force">
			<argument index="0" name="applied_force" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_applied_force" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_applied_torque">
			<argument index="0" name="applied_torque" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_applied_torque" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="apply_local_impulse">
			<argument index="0" name="pos" type="Vector3">
			</argument>
			<argument index="1" name="impulse" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_axis_velocity">
			<argument index="0" name="axis_velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_direct_state_control">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_direct_state_control_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_omit_force_integration">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_omitting_force_integration" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="DynamicCharacterBody" inherits="DynamicBody" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="DynamicCustomBody" inherits="DynamicBody" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="DynamicRigidBody" inherits="DynamicBody" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="EmptyControl" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_minsize">
			<argument index="0" name="minsize" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_minsize" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="_File" inherits="Reference" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="open">
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="flags" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="close">
			<description>
			</description>
		</method>
		<method name="is_open" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="seek">
			<argument index="0" name="pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="seek_end">
			<argument index="0" name="pos" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_len" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="eof_reached" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_8" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_16" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_32" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_64" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_float" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_double" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_real" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_buffer" qualifiers="const">
			<return type="RawArray">
			</return>
			<argument index="0" name="len" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_line" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_endian_swap">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_endian_swap">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_error" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_var" qualifiers="const">
			<description>
			</description>
		</method>
		<method name="store_8">
			<argument index="0" name="value" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_16">
			<argument index="0" name="value" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_32">
			<argument index="0" name="value" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_64">
			<argument index="0" name="value" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_float">
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_double">
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_real">
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_buffer">
			<argument index="0" name="buffer" type="RawArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_line">
			<argument index="0" name="line" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_string">
			<argument index="0" name="string" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_var">
			<argument index="0" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="file_exists" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="READ" value="1">
		</constant>
		<constant name="WRITE" value="2">
		</constant>
		<constant name="READ_WRITE" value="3">
		</constant>
	</constants>
</class>
<class name="FileDialog" inherits="ConfirmationDialog" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="clear_filters">
			<description>
			</description>
		</method>
		<method name="add_filter">
			<argument index="0" name="filter" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_current_dir" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_current_file" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_current_path" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_current_dir">
			<argument index="0" name="dir" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_current_file">
			<argument index="0" name="file" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_current_path">
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_vbox">
			<return type="VBoxContainer">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="dir_selected">
			<argument index="0" name="dir" type="String">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="file_selected">
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="MODE_OPEN_FILE" value="0">
		</constant>
		<constant name="MODE_OPEN_DIR" value="1">
		</constant>
		<constant name="MODE_SAVE_FILE" value="2">
		</constant>
	</constants>
</class>
<class name="FixedMaterial" inherits="Material" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_shader">
			<argument index="0" name="shader" type="Shader">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shader" qualifiers="const">
			<return type="Shader">
			</return>
			<description>
			</description>
		</method>
		<method name="set_parameter">
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_parameter" qualifiers="const">
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_texture">
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_texgen_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texgen_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_texcoord_mode">
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texcoord_mode" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_uv_transform">
			<argument index="0" name="transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_uv_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<description>
			</description>
		</method>
		<method name="set_detail_blend_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_detail_blend_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PARAM_DIFFUSE" value="0">
		</constant>
		<constant name="PARAM_DETAIL" value="1">
		</constant>
		<constant name="PARAM_SPECULAR" value="2">
		</constant>
		<constant name="PARAM_EMISSION" value="3">
		</constant>
		<constant name="PARAM_SPECULAR_EXP" value="4">
		</constant>
		<constant name="PARAM_GLOW" value="5">
		</constant>
		<constant name="PARAM_NORMAL" value="6">
		</constant>
		<constant name="PARAM_SHADE_PARAM" value="7">
		</constant>
		<constant name="PARAM_MAX" value="8">
		</constant>
		<constant name="TEXGEN_SPHERE" value="1">
		</constant>
		<constant name="TEXGEN_SCREEN" value="2">
		</constant>
		<constant name="TEXGEN_SCREENZ" value="3">
		</constant>
		<constant name="TEXGEN_LOCAL_XY" value="0">
		</constant>
		<constant name="TEXCOORD_TEXGEN" value="3">
		</constant>
		<constant name="TEXCOORD_UV" value="0">
		</constant>
		<constant name="TEXCOORD_UV_TRANSFORM" value="1">
		</constant>
		<constant name="TEXCOORD_UV2" value="2">
		</constant>
	</constants>
</class>
<class name="FogFX" inherits="ScenarioFX" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="FollowCamera" inherits="Camera" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_orbit">
			<argument index="0" name="orbit" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_orbit" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_orbit_x">
			<argument index="0" name="x" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_orbit_y">
			<argument index="0" name="y" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_min_orbit_x">
			<argument index="0" name="x" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_min_orbit_x" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_max_orbit_x">
			<argument index="0" name="x" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_max_orbit_x" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_height">
			<argument index="0" name="height" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_inclination">
			<argument index="0" name="inclination" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_inclination" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="rotate_orbit">
			<argument index="0" name="arg0" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_distance">
			<argument index="0" name="distance" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_distance" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_max_distance">
			<argument index="0" name="max_distance" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_max_distance" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_min_distance">
			<argument index="0" name="min_distance" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_min_distance" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_clip">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_clip" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autoturn">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_autoturn" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autoturn_tolerance">
			<argument index="0" name="degrees" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_autoturn_tolerance" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autoturn_speed">
			<argument index="0" name="speed" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_autoturn_speed" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_smoothing">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_smoothing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_rotation_smoothing">
			<argument index="0" name="amount" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_rotation_smoothing" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_translation_smoothing">
			<argument index="0" name="amount" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_translation_smoothing" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_use_lookat_target">
			<argument index="0" name="use" type="bool">
			</argument>
			<argument index="1" name="lookat" type="Vector3" default="Vector3(0, 0, 0)">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Font" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_height">
			<argument index="0" name="px" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_ascent">
			<argument index="0" name="px" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_ascent" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_descent" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="add_kerning_pair">
			<argument index="0" name="char_a" type="int">
			</argument>
			<argument index="1" name="char_b" type="int">
			</argument>
			<argument index="2" name="kerning" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_kerning_pair" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_texture">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_char">
			<argument index="0" name="character" type="int">
			</argument>
			<argument index="1" name="texture" type="int">
			</argument>
			<argument index="2" name="rect" type="Rect2">
			</argument>
			<argument index="3" name="align" type="Vector2" default="Vector2(0,0)">
			</argument>
			<argument index="4" name="advance" type="real" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_char_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="char" type="int">
			</argument>
			<argument index="1" name="next" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_string_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="string" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear">
			<description>
			</description>
		</method>
		<method name="draw" qualifiers="const">
			<argument index="0" name="canvas_item" type="RID">
			</argument>
			<argument index="1" name="pos" type="Vector2">
			</argument>
			<argument index="2" name="string" type="String">
			</argument>
			<argument index="3" name="modulate" type="Color" default="Color(1,1,1,1)">
			</argument>
			<argument index="4" name="clip_w" type="int" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_char" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="canvas_item" type="RID">
			</argument>
			<argument index="1" name="pos" type="Vector2">
			</argument>
			<argument index="2" name="char" type="int">
			</argument>
			<argument index="3" name="next" type="int" default="-1">
			</argument>
			<argument index="4" name="modulate" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="GDNativeClass" inherits="Reference" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="new">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="GDScript" inherits="Script" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="new">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="GammaFX" inherits="ScenarioFX" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="_Geometry" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="build_box_planes">
			<return type="Array">
			</return>
			<argument index="0" name="extents" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="build_cylinder_planes">
			<return type="Array">
			</return>
			<argument index="0" name="radius" type="real">
			</argument>
			<argument index="1" name="height" type="real">
			</argument>
			<argument index="2" name="sides" type="int">
			</argument>
			<argument index="3" name="axis" type="int" default="2">
			</argument>
			<description>
			</description>
		</method>
		<method name="build_capsule_planes">
			<return type="Array">
			</return>
			<argument index="0" name="radius" type="real">
			</argument>
			<argument index="1" name="height" type="real">
			</argument>
			<argument index="2" name="sides" type="int">
			</argument>
			<argument index="3" name="lats" type="int">
			</argument>
			<argument index="4" name="axis" type="int" default="2">
			</argument>
			<description>
			</description>
		</method>
		<method name="segment_intersects_circle">
			<return type="real">
			</return>
			<argument index="0" name="segment_from" type="Vector2">
			</argument>
			<argument index="1" name="segment_to" type="Vector2">
			</argument>
			<argument index="2" name="circle_pos" type="Vector2">
			</argument>
			<argument index="3" name="circle_radius" type="real">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="GeometryInstance" inherits="VisualInstance" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_visible">
			<argument index="0" name="visible" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_visible" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_material_override">
			<argument index="0" name="material" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_material_override" qualifiers="const">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Globals" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="has" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_order">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_order" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_persisting">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_persisting" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="localize_path" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="globalize_path" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="GlowFX" inherits="ScenarioFX" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="GridMap" inherits="Spatial" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_theme">
			<argument index="0" name="theme" type="MeshLibrary">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_theme" qualifiers="const">
			<return type="MeshLibrary">
			</return>
			<description>
			</description>
		</method>
		<method name="set_cell_size">
			<argument index="0" name="size" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_cell_size" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_octant_size">
			<argument index="0" name="size" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_octant_size" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_width">
			<argument index="0" name="width" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_width" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_height">
			<argument index="0" name="height" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_depth">
			<argument index="0" name="depth" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_depth" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_cell_item">
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="z" type="int">
			</argument>
			<argument index="3" name="item" type="int">
			</argument>
			<argument index="4" name="orientation" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_cell_item" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="z" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_cell_item_orientation" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="z" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="resource_changed">
			<argument index="0" name="arg0" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_center_x">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_center_x" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_center_y">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_center_y" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_center_z">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_center_z" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_clip">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<argument index="1" name="clipabove" type="bool" default="true">
			</argument>
			<argument index="2" name="floor" type="int" default="0">
			</argument>
			<argument index="3" name="axis" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="crate_area">
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="area" type="AABB">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_bounds" qualifiers="const">
			<return type="AABB">
			</return>
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_exterior_portal">
			<argument index="0" name="area" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_name">
			<argument index="0" name="area" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_is_exterior_portal" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_portal_disable_distance">
			<argument index="0" name="area" type="int">
			</argument>
			<argument index="1" name="distance" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_portal_disable_distance" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_portal_disable_color">
			<argument index="0" name="area" type="int">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_portal_disable_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="erase_area">
			<argument index="0" name="area" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_unused_area_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="INVALID_CELL_ITEM" value="-1">
		</constant>
	</constants>
</class>
<class name="GrooveJoint2D" inherits="Joint2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_length">
			<argument index="0" name="length" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_length" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_initial_offset">
			<argument index="0" name="offset" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_initial_offset" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="HBoxContainer" inherits="BoxContainer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="HButtonArray" inherits="ButtonArray" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="HDRFX" inherits="ScenarioFX" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="HScrollBar" inherits="ScrollBar" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="HSeparator" inherits="Separator" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="HSlider" inherits="Slider" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="IP" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="resolve_hostname">
			<return type="String">
			</return>
			<argument index="0" name="host" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="resolve_hostname_queue_item">
			<return type="int">
			</return>
			<argument index="0" name="host" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_resolve_item_status" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_resolve_item_address" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="erase_resolve_item">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="RESOLVER_STATUS_NONE" value="0">
		</constant>
		<constant name="RESOLVER_STATUS_WAITING" value="1">
		</constant>
		<constant name="RESOLVER_STATUS_DONE" value="2">
		</constant>
		<constant name="RESOLVER_STATUS_ERROR" value="3">
		</constant>
		<constant name="RESOLVER_MAX_QUERIES" value="32">
		</constant>
		<constant name="RESOLVER_INVALID_ID" value="-1">
		</constant>
	</constants>
</class>
<class name="IP_Unix" inherits="IP" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="InputMap" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="InterpolatedCamera" inherits="Camera" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_target_path">
			<argument index="0" name="target_path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_target_path" qualifiers="const">
			<return type="NodePath">
			</return>
			<description>
			</description>
		</method>
		<method name="set_target">
			<argument index="0" name="target" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_speed">
			<argument index="0" name="speed" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_speed" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_interpolation_enabled">
			<argument index="0" name="target_path" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_interpolation_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Joint2D" inherits="Node2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_node_a">
			<argument index="0" name="node" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_node_a" qualifiers="const">
			<return type="NodePath">
			</return>
			<description>
			</description>
		</method>
		<method name="set_node_b">
			<argument index="0" name="node" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_node_b" qualifiers="const">
			<return type="NodePath">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Label" inherits="Range" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_align">
			<argument index="0" name="align" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_align" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_valign">
			<argument index="0" name="valign" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_valign" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_text">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_text" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autowrap">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_autowrap" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_line_height" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_line_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="ALIGN_LEFT" value="0">
		</constant>
		<constant name="ALIGN_CENTER" value="1">
		</constant>
		<constant name="ALIGN_RIGHT" value="2">
		</constant>
		<constant name="ALIGN_FILL" value="3">
		</constant>
		<constant name="VALIGN_TOP" value="0">
		</constant>
		<constant name="VALIGN_CENTER" value="1">
		</constant>
		<constant name="VALIGN_BOTTOM" value="2">
		</constant>
		<constant name="VALIGN_FILL" value="3">
		</constant>
	</constants>
</class>
<class name="Light" inherits="VisualInstance" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_parameter">
			<argument index="0" name="variable" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_parameter" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_color">
			<argument index="0" name="color" type="int">
			</argument>
			<argument index="1" name="value" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_project_shadows">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_project_shadows" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_projector">
			<argument index="0" name="projector" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_projector" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="set_operator">
			<argument index="0" name="operator" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_operator" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PARAM_RADIUS" value="2">
		</constant>
		<constant name="PARAM_ENERGY" value="3">
		</constant>
		<constant name="PARAM_ATTENUATION" value="4">
		</constant>
		<constant name="PARAM_SPOT_ANGLE" value="1">
		</constant>
		<constant name="PARAM_SPOT_ATTENUATION" value="4">
		</constant>
		<constant name="PARAM_SHADOW_DARKENING" value="5">
		</constant>
		<constant name="COLOR_AMBIENT" value="0">
		</constant>
		<constant name="COLOR_DIFFUSE" value="1">
		</constant>
		<constant name="COLOR_SPECULAR" value="2">
		</constant>
	</constants>
</class>
<class name="LineEdit" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="clear">
			<description>
			</description>
		</method>
		<method name="select_all">
			<description>
			</description>
		</method>
		<method name="set_text">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_text" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_cursor_pos">
			<argument index="0" name="pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_cursor_pos" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_max_length">
			<argument index="0" name="chars" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_max_length" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="append_at_cursor">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_editable">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_editable" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_secret">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_secret" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="select" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="text_entered">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="text_changed">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="LineShape2D" inherits="Shape2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_normal">
			<argument index="0" name="normal" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_normal" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_d">
			<argument index="0" name="d" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_d" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="MainLoop" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="input_event">
			<argument index="0" name="arg0" type="InputEvent">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NOTIFICATION_WM_FOCUS_IN" value="5">
		</constant>
		<constant name="NOTIFICATION_WM_FOCUS_OUT" value="6">
		</constant>
		<constant name="NOTIFICATION_WM_QUIT_REQUEST" value="7">
		</constant>
	</constants>
</class>
<class name="MarginContainer" inherits="Container" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Material" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_flag">
			<argument index="0" name="flag" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_flag" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="flag" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_hint">
			<argument index="0" name="hint" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_hint" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="hint" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_blend_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_blend_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_shade_model">
			<argument index="0" name="model" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shade_model" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_line_width">
			<argument index="0" name="width" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_line_width" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_shader_param">
			<argument index="0" name="param" type="String">
			</argument>
			<argument index="1" name="arg1" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shader_param" qualifiers="const">
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="FLAG_VISIBLE" value="0">
		</constant>
		<constant name="FLAG_DOUBLE_SIDED" value="1">
		</constant>
		<constant name="FLAG_INVERT_FACES" value="2">
		</constant>
		<constant name="FLAG_UNSHADED" value="3">
		</constant>
		<constant name="FLAG_ONTOP" value="4">
		</constant>
		<constant name="FLAG_WIREFRAME" value="5">
		</constant>
		<constant name="FLAG_BILLBOARD_TOGGLE" value="6">
		</constant>
		<constant name="FLAG_MAX" value="7">
		</constant>
		<constant name="HINT_DECAL" value="0">
		</constant>
		<constant name="HINT_OPAQUE_PRE_PASS" value="1">
		</constant>
		<constant name="HINT_NO_SHADOW" value="2">
		</constant>
		<constant name="HINT_NO_DEPTH_DRAW" value="3">
		</constant>
		<constant name="HINT_MAX" value="4">
		</constant>
		<constant name="SHADE_MODEL_LAMBERT" value="0">
		</constant>
		<constant name="SHADE_MODEL_LAMBERT_WRAP" value="1">
		</constant>
		<constant name="SHADE_MODEL_FRESNEL" value="2">
		</constant>
		<constant name="SHADE_MODEL_TOON" value="3">
		</constant>
		<constant name="SHADE_MODEL_CUSTOM_0" value="4">
		</constant>
		<constant name="SHADE_MODEL_CUSTOM_1" value="5">
		</constant>
		<constant name="SHADE_MODEL_CUSTOM_2" value="6">
		</constant>
		<constant name="SHADE_MODEL_CUSTOM_3" value="7">
		</constant>
		<constant name="BLEND_MODE_MIX" value="0">
		</constant>
		<constant name="BLEND_MODE_ADD" value="1">
		</constant>
		<constant name="BLEND_MODE_SUB" value="2">
		</constant>
	</constants>
</class>
<class name="MenuButton" inherits="Button" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_popup">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="about_to_show">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="Mesh" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_morph_target">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_morph_target_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_morph_target_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="index" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_morph_targets">
			<description>
			</description>
		</method>
		<method name="set_morph_target_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_morph_target_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="add_surface">
			<argument index="0" name="primitive" type="int">
			</argument>
			<argument index="1" name="format" type="int">
			</argument>
			<argument index="2" name="array_len" type="int">
			</argument>
			<argument index="3" name="index_array_len" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_surface_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="surface_remove">
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="surface_set_array">
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<argument index="1" name="array" type="int">
			</argument>
			<argument index="2" name="data" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="surface_get_array" qualifiers="const">
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<argument index="1" name="array" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="surface_get_array_len" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="surface_get_array_index_len" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="surface_get_format" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="surface_get_primitive_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="surface_set_material">
			<argument index="0" name="surf_idx:Material" type="int">
			</argument>
			<argument index="1" name="arg1" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="surface_get_material" qualifiers="const">
			<return type="Material">
			</return>
			<argument index="0" name="surf_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NO_INDEX_ARRAY" value="-1">
		</constant>
		<constant name="ARRAY_WEIGHTS_SIZE" value="4">
		</constant>
		<constant name="ARRAY_VERTEX" value="0">
		</constant>
		<constant name="ARRAY_NORMAL" value="1">
		</constant>
		<constant name="ARRAY_TANGENT" value="2">
		</constant>
		<constant name="ARRAY_COLOR" value="3">
		</constant>
		<constant name="ARRAY_TEX_UV" value="4">
		</constant>
		<constant name="ARRAY_TEX_UV2" value="5">
		</constant>
		<constant name="ARRAY_BONES" value="6">
		</constant>
		<constant name="ARRAY_WEIGHTS" value="7">
		</constant>
		<constant name="ARRAY_INDEX" value="8">
		</constant>
		<constant name="ARRAY_FORMAT_VERTEX" value="1">
		</constant>
		<constant name="ARRAY_FORMAT_NORMAL" value="2">
		</constant>
		<constant name="ARRAY_FORMAT_TANGENT" value="4">
		</constant>
		<constant name="ARRAY_FORMAT_COLOR" value="8">
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV" value="16">
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV2" value="32">
		</constant>
		<constant name="ARRAY_FORMAT_BONES" value="64">
		</constant>
		<constant name="ARRAY_FORMAT_WEIGHTS" value="128">
		</constant>
		<constant name="ARRAY_FORMAT_INDEX" value="256">
		</constant>
		<constant name="PRIMITIVE_POINTS" value="0">
		</constant>
		<constant name="PRIMITIVE_LINES" value="1">
		</constant>
		<constant name="PRIMITIVE_LINE_STRIP" value="2">
		</constant>
		<constant name="PRIMITIVE_LINE_LOOP" value="3">
		</constant>
		<constant name="PRIMITIVE_TRIANGLES" value="4">
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_STRIP" value="5">
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_FAN" value="6">
		</constant>
	</constants>
</class>
<class name="MeshInstance" inherits="GeometryInstance" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_mesh">
			<argument index="0" name="mesh" type="Mesh">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mesh" qualifiers="const">
			<return type="Mesh">
			</return>
			<description>
			</description>
		</method>
		<method name="get_aabb" qualifiers="const">
			<return type="AABB">
			</return>
			<description>
			</description>
		</method>
		<method name="create_trimesh_collision">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="MeshLibrary" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="create_item">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_name">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_mesh">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="mesh" type="Mesh">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_shape">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="shape" type="Shape">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_mesh" qualifiers="const">
			<return type="Mesh">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_shape" qualifiers="const">
			<return type="Shape">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_item">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear">
			<description>
			</description>
		</method>
		<method name="get_item_list" qualifiers="const">
			<return type="IntArray">
			</return>
			<description>
			</description>
		</method>
		<method name="get_last_unused_item_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="MultiMesh" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_mesh">
			<argument index="0" name="mesh" type="Mesh">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mesh" qualifiers="const">
			<return type="Mesh">
			</return>
			<description>
			</description>
		</method>
		<method name="set_instance_count">
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_instance_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_instance_transform">
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_instance_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_instance_color">
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_instance_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_aabb">
			<argument index="0" name="arg0" type="AABB">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_aabb" qualifiers="const">
			<return type="AABB">
			</return>
			<description>
			</description>
		</method>
		<method name="generate_aabb">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="MultiMeshInstance" inherits="GeometryInstance" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_multimesh">
			<argument index="0" name="multimesh" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_multimesh" qualifiers="const">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Node" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_name">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="add_child">
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_child">
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_and_delete_child">
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_child_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_child" qualifiers="const">
			<return type="Node">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_node" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_node" qualifiers="const">
			<return type="Node">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_parent" qualifiers="const">
			<return type="Parent">
			</return>
			<description>
			</description>
		</method>
		<method name="has_node_and_resource" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_node_and_resource">
			<return type="Array">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_inside_scene" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_a_parent_of" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_greater_than" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_path" qualifiers="const">
			<return type="NodePath">
			</return>
			<description>
			</description>
		</method>
		<method name="get_path_to" qualifiers="const">
			<return type="NodePath">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_to_group">
			<argument index="0" name="group" type="String">
			</argument>
			<argument index="1" name="arg1" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_from_group">
			<argument index="0" name="group" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_in_group" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="move_child">
			<argument index="0" name="child_node" type="Node">
			</argument>
			<argument index="1" name="to_pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="raise">
			<description>
			</description>
		</method>
		<method name="set_owner">
			<argument index="0" name="owner" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_owner" qualifiers="const">
			<return type="Node">
			</return>
			<description>
			</description>
		</method>
		<method name="remove_and_skip">
			<description>
			</description>
		</method>
		<method name="get_index" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="print_tree">
			<description>
			</description>
		</method>
		<method name="set_filename">
			<argument index="0" name="filename" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_filename" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="propagate_notification">
			<argument index="0" name="what" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_process">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_process_time" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="is_processing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_idle_process">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_idle_process_time" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="is_idle_processing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_process_input">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_processing_input" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_process_unhandled_input">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_processing_unhandled_input" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_process_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_process_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="can_process" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="print_stray_nodes">
			<description>
			</description>
		</method>
		<method name="set_world">
			<argument index="0" name="world" type="World">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_world" qualifiers="const">
			<return type="World">
			</return>
			<description>
			</description>
		</method>
		<method name="get_current_world" qualifiers="const">
			<return type="World">
			</return>
			<description>
			</description>
		</method>
		<method name="get_scene" qualifiers="const">
			<return type="SceneMainLoop">
			</return>
			<description>
			</description>
		</method>
		<method name="duplicate" qualifiers="const">
			<return type="Node">
			</return>
			<description>
			</description>
		</method>
		<method name="replace_by">
			<argument index="0" name="node" type="Node">
			</argument>
			<argument index="1" name="keep_data" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="enter_scene">
			<description>
			</description>
		</signal>
		<signal name="renamed">
			<description>
			</description>
		</signal>
		<signal name="exit_scene">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_ENTER_SCENE" value="10">
		</constant>
		<constant name="NOTIFICATION_EXIT_SCENE" value="11">
		</constant>
		<constant name="NOTIFICATION_MOVED_IN_PARENT" value="12">
		</constant>
		<constant name="NOTIFICATION_CHILDREN_CONFIGURED" value="13">
		</constant>
		<constant name="NOTIFICATION_PROCESS" value="16">
		</constant>
		<constant name="NOTIFICATION_IDLE_PROCESS" value="17">
		</constant>
		<constant name="NOTIFICATION_PARENTED" value="18">
		</constant>
		<constant name="NOTIFICATION_UNPARENTED" value="19">
		</constant>
		<constant name="NOTIFICATION_ENTER_WORLD" value="20">
		</constant>
		<constant name="NOTIFICATION_EXIT_WORLD" value="21">
		</constant>
		<constant name="NOTIFICATION_PAUSED" value="14">
		</constant>
		<constant name="NOTIFICATION_UNPAUSED" value="15">
		</constant>
		<constant name="PROCESS_NORMAL" value="0">
		</constant>
		<constant name="PROCESS_PAUSE" value="1">
		</constant>
		<constant name="PROCESS_ALWAYS" value="2">
		</constant>
	</constants>
</class>
<class name="Node2D" inherits="CanvasItem" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_pos">
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_rot">
			<argument index="0" name="rot" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_scale">
			<argument index="0" name="scale" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_rot" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_scale" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_global_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="_OS" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_mouse_show">
			<argument index="0" name="show" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_mouse_grab">
			<argument index="0" name="grab" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_mouse_grab_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_mouse_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_clipboard">
			<argument index="0" name="clipboard" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_clipboard" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_video_mode">
			<argument index="0" name="size" type="Vector2">
			</argument>
			<argument index="1" name="fullscreen" type="bool">
			</argument>
			<argument index="2" name="resizable" type="bool">
			</argument>
			<argument index="3" name="screen" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_video_mode_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="screen" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_video_mode_fullscreen" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="screen" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_video_mode_resizable" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="screen" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_fullscreen_mode_list" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="screen" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_iterations_per_second">
			<argument index="0" name="iterations_per_second" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_iterations_per_second" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_low_processor_usage_mode">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_in_low_processor_usage_mode" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_executable_path" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="execute">
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="arguments" type="StringArray">
			</argument>
			<argument index="2" name="blocking" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="kill">
			<return type="int">
			</return>
			<argument index="0" name="pid" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_environment" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="environment" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_environment" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="environment" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_cmdline_args">
			<return type="StringArray">
			</return>
			<description>
			</description>
		</method>
		<method name="get_main_loop" qualifiers="const">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="get_date" qualifiers="const">
			<return type="Dictionary">
			</return>
			<description>
			</description>
		</method>
		<method name="get_time" qualifiers="const">
			<return type="Dictionary">
			</return>
			<description>
			</description>
		</method>
		<method name="delay_usec" qualifiers="const">
			<argument index="0" name="usec" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_ticks_msec" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_locale" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="can_draw" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_frames_drawn">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="is_stdout_verbose" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_mouse_button_state" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="dump_memory_to_file">
			<argument index="0" name="file" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="dump_resources_to_file">
			<argument index="0" name="file" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="print_resources_in_use">
			<argument index="0" name="short" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="print_all_resources">
			<argument index="0" name="tofile" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_static_memory_usage" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_static_memory_peak_usage" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_dynamic_memory_usage" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="DAY_SUNDAY" value="0">
		</constant>
		<constant name="DAY_MONDAY" value="1">
		</constant>
		<constant name="DAY_TUESDAY" value="2">
		</constant>
		<constant name="DAY_WEDNESDAY" value="3">
		</constant>
		<constant name="DAY_THURSDAY" value="4">
		</constant>
		<constant name="DAY_FRIDAY" value="5">
		</constant>
		<constant name="DAY_SATURDAY" value="6">
		</constant>
		<constant name="MONTH_JANUARY" value="0">
		</constant>
		<constant name="MONTH_FEBRUARY" value="1">
		</constant>
		<constant name="MONTH_MARCH" value="2">
		</constant>
		<constant name="MONTH_APRIL" value="3">
		</constant>
		<constant name="MONTH_MAY" value="4">
		</constant>
		<constant name="MONTH_JUNE" value="5">
		</constant>
		<constant name="MONTH_JULY" value="6">
		</constant>
		<constant name="MONTH_AUGUST" value="7">
		</constant>
		<constant name="MONTH_SEPTEMBER" value="8">
		</constant>
		<constant name="MONTH_OCTOBER" value="9">
		</constant>
		<constant name="MONTH_NOVEMBER" value="10">
		</constant>
		<constant name="MONTH_DECEMBER" value="11">
		</constant>
	</constants>
</class>
<class name="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_type" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="is_type" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set">
			<argument index="0" name="property" type="String">
			</argument>
			<argument index="1" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get" qualifiers="const">
			<argument index="0" name="property" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_property_list" qualifiers="const">
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
		<method name="notification">
			<argument index="0" name="what" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_instance_ID" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_script">
			<argument index="0" name="script" type="Script">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_script" qualifiers="const">
			<return type="Script">
			</return>
			<description>
			</description>
		</method>
		<method name="set_meta">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_meta" qualifiers="const">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_meta" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_meta_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<description>
			</description>
		</method>
		<method name="call">
			<argument index="0" name="method" type="String">
			</argument>
			<argument index="1" name="arg1" type="var" default="NULL">
			</argument>
			<argument index="2" name="arg2" type="var" default="NULL">
			</argument>
			<argument index="3" name="arg3" type="var" default="NULL">
			</argument>
			<argument index="4" name="arg4" type="var" default="NULL">
			</argument>
			<description>
			</description>
		</method>
		<method name="call_deferred">
			<argument index="0" name="method" type="String">
			</argument>
			<argument index="1" name="arg1" type="var" default="NULL">
			</argument>
			<argument index="2" name="arg2" type="var" default="NULL">
			</argument>
			<argument index="3" name="arg3" type="var" default="NULL">
			</argument>
			<argument index="4" name="arg4" type="var" default="NULL">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_user_signal">
			<argument index="0" name="signal" type="String">
			</argument>
			<argument index="1" name="arguments" type="Array" default="Array()">
			</argument>
			<description>
			</description>
		</method>
		<method name="emit_signal">
			<argument index="0" name="signal" type="String">
			</argument>
			<argument index="1" name="arguments" type="Array" default="Array()">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_signal_list" qualifiers="const">
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
		<method name="connect">
			<argument index="0" name="signal" type="String">
			</argument>
			<argument index="1" name="target" type="Object">
			</argument>
			<argument index="2" name="method" type="String">
			</argument>
			<argument index="3" name="binds" type="Array" default="Array()">
			</argument>
			<argument index="4" name="flags" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="disconnect">
			<argument index="0" name="signal" type="String">
			</argument>
			<argument index="1" name="target" type="Object">
			</argument>
			<argument index="2" name="method" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_connected" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="signal" type="String">
			</argument>
			<argument index="1" name="target" type="Object">
			</argument>
			<argument index="2" name="method" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_block_signals">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_blocking_signals" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_message_translation">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="can_translate_messages">
			<argument index="0" name="arg0" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="XL_MESSAGE" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="message" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="tr" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="message" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NOTIFICATION_POSTINITIALIZE" value="0">
		</constant>
		<constant name="NOTIFICATION_PREDELETE" value="1">
		</constant>
		<constant name="CONNECT_DEFERRED" value="1">
		</constant>
		<constant name="CONNECT_PERSIST" value="2">
		</constant>
		<constant name="CONNECT_ONESHOT" value="4">
		</constant>
	</constants>
</class>
<class name="OmniLight" inherits="Light" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="OptimizedSaver" inherits="Reference" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_target_platform">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_target_platform" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_target_name">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_property">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="optimize_object">
			<return type="bool">
			</return>
			<argument index="0" name="obj" type="Object">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="OptionButton" inherits="Button" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_item">
			<argument index="0" name="label" type="String">
			</argument>
			<argument index="1" name="id" type="int" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_icon_item">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<argument index="1" name="label" type="String">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_text">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_icon">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_disabled">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="disabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_ID">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_metadata">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="metadata" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_text" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_icon" qualifiers="const">
			<return type="Texture">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_ID" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_metadata" qualifiers="const">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_item_disabled" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="add_separator">
			<description>
			</description>
		</method>
		<method name="clear">
			<description>
			</description>
		</method>
		<method name="select">
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_selected" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selected_ID" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selected_metadata" qualifiers="const">
			<description>
			</description>
		</method>
		<method name="remove_item">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="item_selected">
			<argument index="0" name="ID" type="int">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="PHashTranslation" inherits="Translation" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PacketPeer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PacketPeerStream" inherits="PacketPeer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_stream_peer">
			<argument index="0" name="peer" type="StreamPeer">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Panel" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="ParallaxBackground" inherits="CanvasLayer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_scroll_offset">
			<argument index="0" name="ofs" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_scroll_offset" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_scroll_base_offset">
			<argument index="0" name="ofs" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_scroll_base_offset" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_scroll_base_scale">
			<argument index="0" name="scale" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_scroll_base_scale" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_limit_begin">
			<argument index="0" name="ofs" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_limit_begin" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_limit_end">
			<argument index="0" name="ofs" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_limit_end" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ParallaxLayer" inherits="Node2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_motion_scale">
			<argument index="0" name="scale" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_motion_scale" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_motion_wrap_begin">
			<argument index="0" name="wrap_begin" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_motion_wrap_begin" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_motion_wrap_end">
			<argument index="0" name="wrap_end" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_motion_wrap_end" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Particles" inherits="VisualInstance" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_amount">
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_amount" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_emitting">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_emitting" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_visibility_aabb">
			<argument index="0" name="aabb" type="AABB">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_visibility_aabb" qualifiers="const">
			<return type="AABB">
			</return>
			<description>
			</description>
		</method>
		<method name="set_emission_half_extents">
			<argument index="0" name="half_extents" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_emission_half_extents" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_emission_base_velocity">
			<argument index="0" name="base_velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_emission_base_velocity" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_emission_points">
			<argument index="0" name="points" type="Vector3Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_emission_points" qualifiers="const">
			<return type="Vector3Array">
			</return>
			<description>
			</description>
		</method>
		<method name="set_gravity_normal">
			<argument index="0" name="normal" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_gravity_normal" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_variable">
			<argument index="0" name="variable" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_variable" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="variable" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_randomness">
			<argument index="0" name="variable" type="int">
			</argument>
			<argument index="1" name="randomness" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_randomness" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_color_phase_pos">
			<argument index="0" name="phase" type="int">
			</argument>
			<argument index="1" name="pos" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color_phase_pos" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="phase" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_color_phase_color">
			<argument index="0" name="phase" type="int">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color_phase_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="phase" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_material">
			<argument index="0" name="material" type="Material">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_material" qualifiers="const">
			<return type="Material">
			</return>
			<description>
			</description>
		</method>
		<method name="set_emit_timeout">
			<argument index="0" name="arg0" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_emit_timeout" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_height_from_velocity">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_height_from_velocity" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_color_phases">
			<argument index="0" name="count" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color_phases" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="VAR_LIFETIME" value="0">
		</constant>
		<constant name="VAR_SPREAD" value="1">
		</constant>
		<constant name="VAR_GRAVITY" value="2">
		</constant>
		<constant name="VAR_LINEAR_VELOCITY" value="3">
		</constant>
		<constant name="VAR_ANGULAR_VELOCITY" value="4">
		</constant>
		<constant name="VAR_LINEAR_ACCELERATION" value="5">
		</constant>
		<constant name="VAR_DRAG" value="6">
		</constant>
		<constant name="VAR_TANGENTIAL_ACCELERATION" value="7">
		</constant>
		<constant name="VAR_INITIAL_SIZE" value="9">
		</constant>
		<constant name="VAR_FINAL_SIZE" value="10">
		</constant>
		<constant name="VAR_INITIAL_ANGLE" value="11">
		</constant>
		<constant name="VAR_HEIGHT" value="12">
		</constant>
		<constant name="VAR_HEIGHT_SPEED_SCALE" value="13">
		</constant>
		<constant name="VAR_MAX" value="14">
		</constant>
	</constants>
</class>
<class name="Particles2D" inherits="Node2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_emitting">
			<argument index="0" name="active" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_emitting" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_amount">
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_amount" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_lifetime">
			<argument index="0" name="lifetime" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_lifetime" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_pre_process_time">
			<argument index="0" name="time" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pre_process_time" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_emit_timeout">
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_emit_timeout" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_param">
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_param" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_randomness">
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_randomness" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_texture">
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="set_emissor_offset">
			<argument index="0" name="offset" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_emissor_offset" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_emission_half_extents">
			<argument index="0" name="extents" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_emission_half_extents" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_color_phases">
			<argument index="0" name="phases" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color_phases" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_color_phase_color">
			<argument index="0" name="phase" type="int">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color_phase_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="phase" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_color_phase_pos">
			<argument index="0" name="phase" type="int">
			</argument>
			<argument index="1" name="pos" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color_phase_pos" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="phase" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="pre_process">
			<argument index="0" name="time" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_use_local_space">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_using_local_space" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_initial_velocity">
			<argument index="0" name="velocity" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_initial_velocity" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="testee">
			<argument index="0" name="arg0" type="int" default="0">
			</argument>
			<argument index="1" name="arg1" type="int" default="1">
			</argument>
			<argument index="2" name="arg2" type="int" default="2">
			</argument>
			<argument index="3" name="arg3" type="int" default="3">
			</argument>
			<argument index="4" name="arg4" type="int" default="4">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PARAM_DIRECTION" value="0">
		</constant>
		<constant name="PARAM_SPREAD" value="1">
		</constant>
		<constant name="PARAM_LINEAR_VELOCITY" value="2">
		</constant>
		<constant name="PARAM_SPIN_VELOCITY" value="3">
		</constant>
		<constant name="PARAM_GRAVITY_DIRECTION" value="4">
		</constant>
		<constant name="PARAM_GRAVITY_STRENGTH" value="5">
		</constant>
		<constant name="PARAM_RADIAL_ACCEL" value="6">
		</constant>
		<constant name="PARAM_TANGENTIAL_ACCEL" value="7">
		</constant>
		<constant name="PARAM_INITIAL_SIZE" value="9">
		</constant>
		<constant name="PARAM_FINAL_SIZE" value="10">
		</constant>
		<constant name="PARAM_HUE_VARIATION" value="11">
		</constant>
		<constant name="PARAM_MAX" value="12">
		</constant>
		<constant name="MAX_COLOR_PHASES" value="4">
		</constant>
	</constants>
</class>
<class name="PathRemap" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_remap">
			<argument index="0" name="from" type="String">
			</argument>
			<argument index="1" name="to" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_remap">
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_remap" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="erase_remap">
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_remaps">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Physics2DDirectBodyState" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_total_gravity" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_total_density" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_inverse_mass" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_inverse_inertia" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_linear_velocity">
			<argument index="0" name="velocity" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_linear_velocity" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_angular_velocity">
			<argument index="0" name="velocity" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_angular_velocity" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_transform">
			<argument index="0" name="transform" type="Matrix32">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_transform" qualifiers="const">
			<return type="Matrix32">
			</return>
			<description>
			</description>
		</method>
		<method name="set_sleep_state">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_sleeping" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_contact_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_contact_local_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_local_normal" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_local_shape" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_id" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_object" qualifiers="const">
			<return type="Object">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_shape" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_velocity_at_pos" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_step" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="integrate_forces">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Physics2DDirectBodyStateSW" inherits="Physics2DDirectBodyState" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Physics2DServer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="shape_create">
			<return type="RID">
			</return>
			<argument index="0" name="type" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="shape_set_data">
			<argument index="0" name="shape" type="RID">
			</argument>
			<argument index="1" name="data" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="shape_get_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shape_get_data" qualifiers="const">
			<argument index="0" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="space_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="space_set_active">
			<argument index="0" name="space" type="RID">
			</argument>
			<argument index="1" name="active" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="space_is_active" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="space" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="space_set_param">
			<argument index="0" name="space" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<argument index="2" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="space_get_param" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="space" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="area_set_space">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="space" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_space" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_add_shape">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="shape" type="int">
			</argument>
			<argument index="2" name="transform" type="RID" default="1,0, 0,1, 0,0">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_shape" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_shape_transform">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<argument index="2" name="transform" type="Matrix32">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_shape_count" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_shape" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_shape_transform" qualifiers="const">
			<return type="Matrix32">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_remove_shape">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_clear_shapes">
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_param" qualifiers="const">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_transform" qualifiers="const">
			<return type="Matrix32">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_param" qualifiers="const">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_transform" qualifiers="const">
			<return type="Matrix32">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_attach_object_instance_ID">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_object_instance_ID" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_create">
			<return type="RID">
			</return>
			<argument index="0" name="mode" type="int" default="1">
			</argument>
			<argument index="1" name="init_sleeping" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_space">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="space" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_space" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_mode">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_mode" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_add_shape">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape" type="RID">
			</argument>
			<argument index="2" name="transform" type="Matrix32" default="1,0, 0,1, 0,0">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_shape">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<argument index="2" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_shape_transform">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<argument index="2" name="transform" type="Matrix32">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_shape_count" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_shape" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_shape_transform" qualifiers="const">
			<return type="Matrix32">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_remove_shape">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_clear_shapes">
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_attach_object_instance_ID">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_object_instance_ID" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_enable_continuous_collision_detection">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_is_continuous_collision_detection_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_param">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<argument index="2" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_param" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_static_simulate_motion">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="new_xform" type="Matrix32">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_state">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="state" type="int">
			</argument>
			<argument index="2" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_state" qualifiers="const">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="state" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_apply_impulse">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="pos" type="Vector2">
			</argument>
			<argument index="2" name="impulse" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_axis_velocity">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="axis_velocity" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_add_collision_exception">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="excepted_body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_remove_collision_exception">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="excepted_body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_max_contacts_reported">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="amount" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_max_contacts_reported" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_omit_force_integration">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_is_omitting_force_integration" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="pin_joint_create">
			<return type="RID">
			</return>
			<argument index="0" name="anchor" type="Vector2">
			</argument>
			<argument index="1" name="body_a" type="RID">
			</argument>
			<argument index="2" name="body_b" type="RID" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="groove_joint_create">
			<return type="RID">
			</return>
			<argument index="0" name="groove1_a" type="Vector2">
			</argument>
			<argument index="1" name="groove2_a" type="Vector2">
			</argument>
			<argument index="2" name="anchor_b" type="Vector2">
			</argument>
			<argument index="3" name="body_a" type="RID" default="RID()">
			</argument>
			<argument index="4" name="body_b" type="RID" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="damped_spring_joint_create">
			<return type="RID">
			</return>
			<argument index="0" name="anchor_a" type="Vector2">
			</argument>
			<argument index="1" name="anchor_b" type="Vector2">
			</argument>
			<argument index="2" name="body_a" type="RID">
			</argument>
			<argument index="3" name="body_b" type="RID" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="damped_string_joint_set_param">
			<argument index="0" name="joint" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<argument index="2" name="value" type="real" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="damped_string_joint_get_param" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="joint" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="joint_get_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="joint" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_create">
			<return type="RID">
			</return>
			<argument index="0" name="receiver" type="Object">
			</argument>
			<argument index="1" name="callback" type="String">
			</argument>
			<argument index="2" name="userdata" type="var" default="NULL">
			</argument>
			<argument index="3" name="persist" type="bool" default="true">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_body_state">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_body_direct_state">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_area">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="space" type="RID">
			</argument>
			<argument index="2" name="notify_hint_only" type="bool" default="false">
			</argument>
			<argument index="3" name="exclude" type="Array" default="Array()">
			</argument>
			<argument index="4" name="usermask" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_ray">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="from" type="Vector2">
			</argument>
			<argument index="2" name="dir" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_segment">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="from" type="Vector2">
			</argument>
			<argument index="2" name="to" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_shape">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="shape" type="RID">
			</argument>
			<argument index="2" name="transform" type="Matrix32">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_clear">
			<argument index="0" name="query" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_get_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="query" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_get_target" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="query" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="free">
			<argument index="0" name="rid" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_active">
			<argument index="0" name="active" type="bool">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="SHAPE_LINE" value="0">
		</constant>
		<constant name="SHAPE_SEGMENT" value="1">
		</constant>
		<constant name="SHAPE_CIRCLE" value="2">
		</constant>
		<constant name="SHAPE_RECTANGLE" value="3">
		</constant>
		<constant name="SHAPE_CAPSULE" value="4">
		</constant>
		<constant name="SHAPE_CONVEX_POLYGON" value="5">
		</constant>
		<constant name="SHAPE_CONCAVE_POLYGON" value="6">
		</constant>
		<constant name="SHAPE_CUSTOM" value="7">
		</constant>
		<constant name="AREA_PARAM_OVERRIDE_PARAMS" value="0">
		</constant>
		<constant name="AREA_PARAM_GRAVITY" value="1">
		</constant>
		<constant name="AREA_PARAM_GRAVITY_VECTOR" value="2">
		</constant>
		<constant name="AREA_PARAM_GRAVITY_IS_POINT" value="3">
		</constant>
		<constant name="AREA_PARAM_GRAVITY_POINT_ATTENUATION" value="4">
		</constant>
		<constant name="AREA_PARAM_DENSITY" value="5">
		</constant>
		<constant name="AREA_PARAM_PRIORITY" value="6">
		</constant>
		<constant name="BODY_MODE_STATIC" value="0">
		</constant>
		<constant name="BODY_MODE_RIGID" value="1">
		</constant>
		<constant name="BODY_MODE_CHARACTER" value="2">
		</constant>
		<constant name="BODY_PARAM_BOUNCE" value="0">
		</constant>
		<constant name="BODY_PARAM_FRICTION" value="1">
		</constant>
		<constant name="BODY_PARAM_MASS" value="2">
		</constant>
		<constant name="BODY_PARAM_MAX" value="3">
		</constant>
		<constant name="BODY_STATE_TRANSFORM" value="0">
		</constant>
		<constant name="BODY_STATE_LINEAR_VELOCITY" value="1">
		</constant>
		<constant name="BODY_STATE_ANGULAR_VELOCITY" value="2">
		</constant>
		<constant name="BODY_STATE_SLEEPING" value="3">
		</constant>
		<constant name="JOINT_PIN" value="0">
		</constant>
		<constant name="JOINT_GROOVE" value="1">
		</constant>
		<constant name="JOINT_DAMPED_SPRING" value="2">
		</constant>
		<constant name="DAMPED_STRING_REST_LENGTH" value="0">
		</constant>
		<constant name="DAMPED_STRING_STIFFNESS" value="1">
		</constant>
		<constant name="DAMPED_STRING_DAMPING" value="2">
		</constant>
		<constant name="TYPE_BODY" value="0">
		</constant>
		<constant name="TYPE_AREA" value="1">
		</constant>
		<constant name="AREA_BODY_ADDED" value="0">
		</constant>
		<constant name="AREA_BODY_REMOVED" value="1">
		</constant>
		<constant name="QUERY_NONE" value="0">
		</constant>
		<constant name="QUERY_BODY_STATE" value="1">
		</constant>
		<constant name="QUERY_BODY_DIRECT_STATE" value="2">
		</constant>
		<constant name="QUERY_AREA_MONITOR" value="3">
		</constant>
		<constant name="QUERY_INTERSECTION" value="4">
		</constant>
	</constants>
</class>
<class name="Physics2DServerSW" inherits="Physics2DServer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PhysicsBody" inherits="Spatial" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_shape">
			<argument index="0" name="shape" type="Shape">
			</argument>
			<argument index="1" name="transform" type="Transform" default="Transform()">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shape_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_shape">
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<argument index="1" name="shape" type="Shape">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_shape_transform">
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<argument index="1" name="transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shape" qualifiers="const">
			<return type="Shape">
			</return>
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shape_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_shape">
			<argument index="0" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_shapes">
			<description>
			</description>
		</method>
		<method name="get_body" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="set_max_contacts_reported">
			<argument index="0" name="contacts" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_max_contacts_reported" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_contacts_reported_depth_treshold">
			<argument index="0" name="depth" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contacts_reported_depth_treshold" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="PhysicsBody2D" inherits="CollisionObject2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PhysicsDirectBodyState" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_total_gravity" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="get_total_density" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_inverse_mass" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_inverse_inertia_tensor" qualifiers="const">
			<return type="Matrix3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_linear_velocity">
			<argument index="0" name="velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_linear_velocity" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_angular_velocity">
			<argument index="0" name="velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_angular_velocity" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="set_transform">
			<argument index="0" name="transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<description>
			</description>
		</method>
		<method name="set_sleep_state">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_sleeping" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_contact_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_contact_local_pos" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_local_normal" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_local_shape" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_pos" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_id" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_shape" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_contact_collider_velocity_at_pos" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="contact_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="PhysicsDirectBodyStateSW" inherits="PhysicsDirectBodyState" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PhysicsServer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="shape_create">
			<return type="RID">
			</return>
			<argument index="0" name="shape_type" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="shape_set_data">
			<argument index="0" name="shape" type="RID">
			</argument>
			<argument index="1" name="data" type="var" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="shape_get_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shape_get_data" qualifiers="const">
			<argument index="0" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="space_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="area_create">
			<return type="RID">
			</return>
			<argument index="0" name="space" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_param">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<argument index="2" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_shape">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_bounds">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="bounds" type="Dictionary">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_set_transform">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_param" qualifiers="const">
			<argument index="0" name="area" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_shape" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_bounds" qualifiers="const">
			<return type="Dictionary">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="area_get_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_create">
			<return type="RID">
			</return>
			<argument index="0" name="space" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_mode">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_mode" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_add_shape">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape" type="RID">
			</argument>
			<argument index="2" name="transform" type="Transform" default="Transform()">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_shape">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<argument index="2" name="shape" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_shape_transform">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<argument index="2" name="transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_shape_count" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_shape" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_shape_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="shape_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_attach_object_instance_ID">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="ID" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_object_instance_ID" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_user_flags">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="user_flags" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_user_flags" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_param">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<argument index="2" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_param" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_static_simulate_motion">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="motion" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_state">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="state" type="int">
			</argument>
			<argument index="2" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_state" qualifiers="const">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="state" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_applied_force">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="applied_force" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_applied_force" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_applied_torque">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="applied_torque" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_get_applied_torque" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_set_axis_velocity">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="axis_velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_apply_impulse">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="pos" type="Vector3">
			</argument>
			<argument index="2" name="impulse" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_add_collision_exception">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="against_body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="body_remove_collision_exception">
			<argument index="0" name="body" type="RID">
			</argument>
			<argument index="1" name="against_body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_create">
			<return type="RID">
			</return>
			<argument index="0" name="receiver" type="Object">
			</argument>
			<argument index="1" name="callback" type="String">
			</argument>
			<argument index="2" name="userdata" type="var">
			</argument>
			<argument index="3" name="persist" type="bool" default="true">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_body_state">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_body_direct_state">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="body" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_area">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="area" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="space" type="RID">
			</argument>
			<argument index="2" name="exclude" type="Array" default="Array()">
			</argument>
			<argument index="3" name="usermask" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_ray">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="origin" type="Vector3">
			</argument>
			<argument index="2" name="dir" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_segment">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="from" type="Vector3">
			</argument>
			<argument index="2" name="to" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_shape">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="shape" type="RID">
			</argument>
			<argument index="2" name="arg2" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_intersection_bounds">
			<argument index="0" name="query" type="RID">
			</argument>
			<argument index="1" name="bounds" type="Dictionary">
			</argument>
			<argument index="2" name="arg2" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_clear">
			<argument index="0" name="query" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_get_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="query" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="query_get_target" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="query" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="free">
			<argument index="0" name="rid" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_active">
			<argument index="0" name="active" type="bool">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="SHAPE_PLANE" value="0">
		</constant>
		<constant name="SHAPE_SPHERE" value="2">
		</constant>
		<constant name="SHAPE_BOX" value="3">
		</constant>
		<constant name="SHAPE_CAPSULE" value="4">
		</constant>
		<constant name="SHAPE_CONVEX_POLYGON" value="5">
		</constant>
		<constant name="SHAPE_CONCAVE_POLYGON" value="6">
		</constant>
		<constant name="SHAPE_HEIGHTMAP" value="7">
		</constant>
		<constant name="SHAPE_CUSTOM" value="8">
		</constant>
		<constant name="AREA_PARAM_OVERRIDE_PARAMS" value="0">
		</constant>
		<constant name="AREA_PARAM_GRAVITY" value="1">
		</constant>
		<constant name="AREA_PARAM_GRAVITY_VECTOR" value="2">
		</constant>
		<constant name="AREA_PARAM_GRAVITY_IS_POINT" value="3">
		</constant>
		<constant name="AREA_PARAM_GRAVITY_POINT_ATTENUATION" value="4">
		</constant>
		<constant name="AREA_PARAM_DENSITY" value="5">
		</constant>
		<constant name="AREA_PARAM_PRIORITY" value="6">
		</constant>
		<constant name="BODY_MODE_STATIC" value="0">
		</constant>
		<constant name="BODY_MODE_RIGID" value="1">
		</constant>
		<constant name="BODY_MODE_CHARACTER" value="2">
		</constant>
		<constant name="BODY_PARAM_BOUNCE" value="0">
		</constant>
		<constant name="BODY_PARAM_FRICTION" value="1">
		</constant>
		<constant name="BODY_PARAM_MASS" value="2">
		</constant>
		<constant name="BODY_STATE_TRANSFORM" value="0">
		</constant>
		<constant name="BODY_STATE_LINEAR_VELOCITY" value="1">
		</constant>
		<constant name="BODY_STATE_ANGULAR_VELOCITY" value="2">
		</constant>
		<constant name="BODY_STATE_SLEEPING" value="3">
		</constant>
		<constant name="HINGE_VAR_ANGULAR_ONLY" value="0">
		</constant>
		<constant name="HINGE_VAR_LOWER_LIMIT" value="1">
		</constant>
		<constant name="HINGE_VAR_HIGHER_LIMIT" value="2">
		</constant>
		<constant name="HINGE_VAR_LIMIT_SOFTNESS" value="3">
		</constant>
		<constant name="HINGE_VAR_RELAXATION" value="4">
		</constant>
		<constant name="HINGE_VAR_MOTOR_ENABLED" value="5">
		</constant>
		<constant name="HINGE_VAR_MOTOR_TARGET_VELOCITY" value="6">
		</constant>
		<constant name="HINGE_VAR_MOTOR_IMPULSE" value="7">
		</constant>
		<constant name="CONE_TWIST_VAR_SWING_SPAN_LIMIT_1" value="0">
		</constant>
		<constant name="CONE_TWIST_VAR_SWING_SPAN_LIMIT_2" value="1">
		</constant>
		<constant name="CONE_TWIST_VAR_TWIST_SPAN_LIMIT" value="2">
		</constant>
		<constant name="CONE_TWIST_VAR_BIAS" value="3">
		</constant>
		<constant name="CONE_TWIST_VAR_RELAXATION" value="4">
		</constant>
		<constant name="TYPE_BODY" value="0">
		</constant>
		<constant name="TYPE_AREA" value="1">
		</constant>
		<constant name="QUERY_NONE" value="0">
		</constant>
		<constant name="QUERY_BODY_STATE" value="1">
		</constant>
		<constant name="QUERY_BODY_DIRECT_STATE" value="2">
		</constant>
		<constant name="QUERY_AREA_MONITOR" value="3">
		</constant>
		<constant name="QUERY_INTERSECTION" value="4">
		</constant>
	</constants>
</class>
<class name="PhysicsServerSW" inherits="PhysicsServer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PinJoint2D" inherits="Joint2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PlaneShape" inherits="Shape" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_plane">
			<argument index="0" name="plane" type="Plane">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_plane" qualifiers="const">
			<return type="Plane">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Popup" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="popup_centered">
			<argument index="0" name="size" type="Vector2" default="Vector2(0,0)">
			</argument>
			<description>
			</description>
		</method>
		<method name="popup_centered_ratio">
			<argument index="0" name="ratio" type="real" default="0.75">
			</argument>
			<description>
			</description>
		</method>
		<method name="popup_centered_minsize">
			<argument index="0" name="minsize" type="Vector2" default="Vector2(0,0)">
			</argument>
			<description>
			</description>
		</method>
		<method name="popup">
			<description>
			</description>
		</method>
		<method name="set_exclusive">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_exclusive" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="about_to_show">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_POST_POPUP" value="80">
		</constant>
	</constants>
</class>
<class name="PopupDialog" inherits="Popup" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="PopupMenu" inherits="Popup" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_icon_item">
			<argument index="0" name="texture" type="Object">
			</argument>
			<argument index="1" name="label" type="String">
			</argument>
			<argument index="2" name="id" type="int" default="-1">
			</argument>
			<argument index="3" name="accel" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_item">
			<argument index="0" name="label" type="String">
			</argument>
			<argument index="1" name="id" type="int" default="-1">
			</argument>
			<argument index="2" name="accel" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_icon_check_item">
			<argument index="0" name="texture" type="Object">
			</argument>
			<argument index="1" name="label" type="String">
			</argument>
			<argument index="2" name="id" type="int" default="-1">
			</argument>
			<argument index="3" name="accel" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_check_item">
			<argument index="0" name="label" type="String">
			</argument>
			<argument index="1" name="id" type="int" default="-1">
			</argument>
			<argument index="2" name="accel" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_submenu_item">
			<argument index="0" name="label" type="String">
			</argument>
			<argument index="1" name="submenu" type="int">
			</argument>
			<argument index="2" name="id" type="int" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_text">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_icon">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="icon" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_accelerator">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="accel" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_metadata">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="metadata" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_checked">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_disabled">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="disabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_submenu">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="submenu" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_as_separator">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_as_checkable">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_item_ID">
			<argument index="0" name="idx" type="int">
			</argument>
			<argument index="1" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_text" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_icon" qualifiers="const">
			<return type="Object">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_metadata" qualifiers="const">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_accelerator" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_submenu" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_item_separator" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_item_checkable" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_item_checked" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_item_disabled" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_ID" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_index" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_item_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="add_separator">
			<description>
			</description>
		</method>
		<method name="remove_item">
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear">
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="item_pressed">
			<argument index="0" name="ID" type="int">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="PopupPanel" inherits="Popup" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Portal" inherits="VisualInstance" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_shape">
			<argument index="0" name="points" type="Vector2Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shape" qualifiers="const">
			<return type="Vector2Array">
			</return>
			<description>
			</description>
		</method>
		<method name="set_enabled">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_disable_distance">
			<argument index="0" name="distance" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_disable_distance" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_disabled_color">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_disabled_color" qualifiers="const">
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
		<method name="set_connect_range">
			<argument index="0" name="range" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_connect_range" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Position2D" inherits="Node2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Position3D" inherits="Spatial" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="ProximityGroup" inherits="Spatial" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_group_name">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="broadcast">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="parameters" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_dispatch_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_grid_radius">
			<argument index="0" name="radius" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_grid_radius" qualifiers="const">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="broadcast">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="parameters" type="Array">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="ProximityGroup2D" inherits="Node2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_group_size">
			<argument index="0" name="size" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_group_size" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_group_notifym">
			<argument index="0" name="notify" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_group_notify" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="grouped">
			<argument index="0" name="pgroup" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="ungrouped">
			<argument index="0" name="pgroup" type="Object">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="Range" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_val" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_value" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_min" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_max" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_step" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_page" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_unit_value" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_rounded_values" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_val">
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_value">
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_min">
			<argument index="0" name="minimum" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_max">
			<argument index="0" name="maximum" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_step">
			<argument index="0" name="step" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_page">
			<argument index="0" name="pagesize" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_unit_value">
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_rounded_values">
			<argument index="0" name="arg0" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_exp_unit_value">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_unit_value_exp" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="share">
			<argument index="0" name="with" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="unshare">
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="value_changed">
			<argument index="0" name="value" type="real">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="changed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="RayShape" inherits="Shape" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_length">
			<argument index="0" name="length" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_length" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="RectangleShape2D" inherits="Shape2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_extents">
			<argument index="0" name="extents" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_extents" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Reference" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="init_ref">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="reference">
			<description>
			</description>
		</method>
		<method name="unreference">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ReferenceFrame" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Resource" inherits="Reference" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_path">
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_path" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_name">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_rid" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="changed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="_ResourceLoader" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="load">
			<return type="Resource">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="type_hint" type="String" default="&quot;&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_recognized_extensions_for_type">
			<return type="StringArray">
			</return>
			<argument index="0" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ResourcePreloader" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_resource">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="resource" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_resource">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="rename_resource">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="newname" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_resource" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_resource" qualifiers="const">
			<return type="Object">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_resource_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="_ResourceSaver" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="save">
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="resource" type="Resource">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_recognized_extensions">
			<return type="StringArray">
			</return>
			<argument index="0" name="type" type="Object">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="RichTextLabel" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_text">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_image">
			<argument index="0" name="image" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="newline">
			<description>
			</description>
		</method>
		<method name="push_font">
			<argument index="0" name="font" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_color">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_align">
			<argument index="0" name="align" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_indent">
			<argument index="0" name="level" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_list">
			<argument index="0" name="type" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_meta">
			<argument index="0" name="data" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="push_underline">
			<description>
			</description>
		</method>
		<method name="pop">
			<description>
			</description>
		</method>
		<method name="clear">
			<description>
			</description>
		</method>
		<method name="set_meta_underline">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_meta_underlined" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_scroll_active">
			<argument index="0" name="active" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_scroll_active" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_scroll_follow">
			<argument index="0" name="follow" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_scroll_following" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_tab_size">
			<argument index="0" name="spaces" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tab_size" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="meta_clicked">
			<argument index="0" name="meta" type="Nil">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="ALIGN_LEFT" value="0">
		</constant>
		<constant name="ALIGN_CENTER" value="1">
		</constant>
		<constant name="ALIGN_RIGHT" value="2">
		</constant>
		<constant name="ALIGN_FILL" value="3">
		</constant>
		<constant name="LIST_NUMBERS" value="0">
		</constant>
		<constant name="LIST_LETTERS" value="1">
		</constant>
		<constant name="LIST_DOTS" value="2">
		</constant>
		<constant name="ITEM_MAIN" value="0">
		</constant>
		<constant name="ITEM_TEXT" value="1">
		</constant>
		<constant name="ITEM_IMAGE" value="2">
		</constant>
		<constant name="ITEM_NEWLINE" value="3">
		</constant>
		<constant name="ITEM_FONT" value="4">
		</constant>
		<constant name="ITEM_COLOR" value="5">
		</constant>
		<constant name="ITEM_UNDERLINE" value="6">
		</constant>
		<constant name="ITEM_ALIGN" value="7">
		</constant>
		<constant name="ITEM_INDENT" value="8">
		</constant>
		<constant name="ITEM_LIST" value="9">
		</constant>
		<constant name="ITEM_META" value="10">
		</constant>
	</constants>
</class>
<class name="RigidBody2D" inherits="PhysicsBody2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_mass">
			<argument index="0" name="mass" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mass" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_weight">
			<argument index="0" name="weight" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_weight" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_friction">
			<argument index="0" name="friction" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_friction" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_bounce">
			<argument index="0" name="bounce" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bounce" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_linear_velocity">
			<argument index="0" name="linear_velocity" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_linear_velocity" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_angular_velocity">
			<argument index="0" name="angular_velocity" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_angular_velocity" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_max_contacts_reported">
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_max_contacts_reported" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_use_custom_integrator">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_using_custom_integrator">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_contact_monitor">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_contact_monitor_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_use_continuous_collision_detection">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_using_continuous_collision_detection" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_axis_velocity">
			<argument index="0" name="axis_velocity" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="apply_impulse">
			<argument index="0" name="pos" type="Vector2">
			</argument>
			<argument index="1" name="impulse" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_active">
			<argument index="0" name="active" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_active" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="body_enter">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="body_enter_shape">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<argument index="2" name="body_shape" type="int">
			</argument>
			<argument index="3" name="local_shape" type="int">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="body_exit">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="body_exit_shape">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<argument index="2" name="body_shape" type="int">
			</argument>
			<argument index="3" name="local_shape" type="int">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="MODE_STATIC" value="1">
		</constant>
		<constant name="MODE_RIGID" value="0">
		</constant>
		<constant name="MODE_CHARACTER" value="2">
		</constant>
	</constants>
</class>
<class name="Room" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_bounds">
			<argument index="0" name="bsp_tree" type="Dictionary">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bounds" qualifiers="const">
			<return type="Dictionary">
			</return>
			<description>
			</description>
		</method>
		<method name="set_geometry_hint">
			<argument index="0" name="triangles" type="Vector3Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_geometry_hint" qualifiers="const">
			<return type="Vector3Array">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="RoomInstance" inherits="VisualInstance" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_room">
			<argument index="0" name="room" type="Room">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_room" qualifiers="const">
			<return type="Room">
			</return>
			<description>
			</description>
		</method>
		<method name="compute_room_from_subtree">
			<description>
			</description>
		</method>
		<method name="set_simulate_acoustics">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_simulating_acoustics" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SSAOFX" inherits="ScenarioFX" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Sample" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="create">
			<argument index="0" name="format" type="int">
			</argument>
			<argument index="1" name="stereo" type="bool">
			</argument>
			<argument index="2" name="length" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_format" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="is_stereo" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_length" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_data">
			<argument index="0" name="data" type="RawArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_data" qualifiers="const">
			<return type="RawArray">
			</return>
			<description>
			</description>
		</method>
		<method name="set_mix_rate">
			<argument index="0" name="hz" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mix_rate" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_loop_format">
			<argument index="0" name="format" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_loop_format" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_loop_begin">
			<argument index="0" name="pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_loop_begin" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_loop_end">
			<argument index="0" name="pos" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_loop_end" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="FORMAT_PCM8" value="0">
		</constant>
		<constant name="FORMAT_PCM16" value="1">
		</constant>
		<constant name="FORMAT_IMA_ADPCM" value="2">
		</constant>
		<constant name="LOOP_NONE" value="0">
		</constant>
		<constant name="LOOP_FORWARD" value="1">
		</constant>
		<constant name="LOOP_PING_PONG" value="2">
		</constant>
	</constants>
</class>
<class name="SampleLibrary" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_sample">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="sample" type="Sample">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_sample" qualifiers="const">
			<return type="Sample">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_sample" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_sample">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SamplePlayer" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_sample_library">
			<argument index="0" name="library" type="SampleLibrary">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_sample_library" qualifiers="const">
			<return type="SampleLibrary">
			</return>
			<description>
			</description>
		</method>
		<method name="set_voice_count">
			<argument index="0" name="max_voices" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_voice_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="play">
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="unique" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="stop">
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="stop_all">
			<description>
			</description>
		</method>
		<method name="set_mix_rate">
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="hz" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_pitch_scale">
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="ratio" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_volume">
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="nrg" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_volume_db">
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="nrg" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_pan">
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="pan" type="real">
			</argument>
			<argument index="2" name="depth" type="real" default="0">
			</argument>
			<argument index="3" name="height" type="real" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_filter">
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="type" type="int">
			</argument>
			<argument index="2" name="cutoff_hz" type="real">
			</argument>
			<argument index="3" name="resonance" type="real">
			</argument>
			<argument index="4" name="gain" type="real" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_chorus">
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="send" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_reverb">
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="room_type" type="int">
			</argument>
			<argument index="2" name="send" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mix_rate" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pitch_scale" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_volume" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_volume_db" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pan" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pan_depth" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pan_height" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_filter_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_filter_cutoff" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_filter_resonance" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_filter_gain" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_chorus" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_reverb_room" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_reverb" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_pitch_scale">
			<argument index="0" name="ratio" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_volume">
			<argument index="0" name="nrg" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_volume_db">
			<argument index="0" name="db" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_pan">
			<argument index="0" name="pan" type="real">
			</argument>
			<argument index="1" name="depth" type="real" default="0">
			</argument>
			<argument index="2" name="height" type="real" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_filter">
			<argument index="0" name="type" type="int">
			</argument>
			<argument index="1" name="cutoff_hz" type="real">
			</argument>
			<argument index="2" name="resonance" type="real">
			</argument>
			<argument index="3" name="gain" type="real" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_chorus">
			<argument index="0" name="send" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_reverb">
			<argument index="0" name="room_type" type="int">
			</argument>
			<argument index="1" name="send" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_default_pitch_scale" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_volume" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_volume_db" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_pan" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_pan_depth" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_pan_height" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_filter_type" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_filter_cutoff" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_filter_resonance" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_filter_gain" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_chorus" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_reverb_room" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_reverb" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="is_active" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_voice_active" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="FILTER_NONE" value="0">
		</constant>
		<constant name="FILTER_LOWPASS" value="1">
		</constant>
		<constant name="FILTER_BANDPASS" value="2">
		</constant>
		<constant name="FILTER_HIPASS" value="3">
		</constant>
		<constant name="FILTER_NOTCH" value="4">
		</constant>
		<constant name="FILTER_PEAK" value="5">
		</constant>
		<constant name="FILTER_BANDLIMIT" value="6">
		</constant>
		<constant name="FILTER_LOW_SHELF" value="7">
		</constant>
		<constant name="FILTER_HIGH_SHELF" value="8">
		</constant>
		<constant name="REVERB_SMALL" value="0">
		</constant>
		<constant name="REVERB_MEDIUM" value="1">
		</constant>
		<constant name="REVERB_LARGE" value="2">
		</constant>
		<constant name="REVERB_HALL" value="3">
		</constant>
	</constants>
</class>
<class name="ScenarioFX" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="SceneIO" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="load">
			<return type="Object">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="save">
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="scene" type="Object">
			</argument>
			<argument index="2" name="flags" type="int" default="0">
			</argument>
			<argument index="3" name="optimizer" type="Object" default="Object()">
			</argument>
			<description>
			</description>
		</method>
		<method name="load_interactive">
			<return type="SceneInteractiveLoader">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SceneMainLoop" inherits="MainLoop" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_default_world" qualifiers="const">
			<return type="World">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_viewport" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_viewport_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_canvas" qualifiers="const">
			<return type="Canvas">
			</return>
			<description>
			</description>
		</method>
		<method name="get_default_space_2d" qualifiers="const">
			<return type="Space2D">
			</return>
			<description>
			</description>
		</method>
		<method name="notify_group">
			<argument index="0" name="call_flags" type="int">
			</argument>
			<argument index="1" name="group" type="String">
			</argument>
			<argument index="2" name="notification" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_group">
			<argument index="0" name="call_flags" type="int">
			</argument>
			<argument index="1" name="group" type="String">
			</argument>
			<argument index="2" name="property" type="String">
			</argument>
			<argument index="3" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_root_node">
			<return type="Node">
			</return>
			<description>
			</description>
		</method>
		<method name="set_root_node">
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_auto_accept_quit">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_editor_hint">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_editor_hint" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_pause">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_paused" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_input_as_handled">
			<description>
			</description>
		</method>
		<method name="get_frame" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="quit">
			<description>
			</description>
		</method>
		<method name="call_group">
			<argument index="0" name="flags" type="int">
			</argument>
			<argument index="1" name="group" type="String">
			</argument>
			<argument index="2" name="method" type="String">
			</argument>
			<argument index="3" name="arg0" type="var" default="NULL">
			</argument>
			<argument index="4" name="arg1" type="var" default="NULL">
			</argument>
			<argument index="5" name="arg2" type="var" default="NULL">
			</argument>
			<argument index="6" name="arg3" type="var" default="NULL">
			</argument>
			<argument index="7" name="arg4" type="var" default="NULL">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="screen_resized">
			<description>
			</description>
		</signal>
		<signal name="node_removed">
			<argument index="0" name="node" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="tree_changed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="GROUP_CALL_DEFAULT" value="0">
		</constant>
		<constant name="GROUP_CALL_REVERSE" value="1">
		</constant>
		<constant name="GROUP_CALL_REALTIME" value="2">
		</constant>
		<constant name="GROUP_CALL_UNIQUE" value="4">
		</constant>
	</constants>
</class>
<class name="ScenePreloader" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="load_scene">
			<return type="int">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_scene_path" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="instance" qualifiers="const">
			<return type="Node">
			</return>
			<description>
			</description>
		</method>
		<method name="can_instance" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ScreenProximity2D" inherits="ProximityGroup2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="enter_screen">
			<description>
			</description>
		</method>
		<method name="exit_screen">
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="enter_screen">
			<description>
			</description>
		</signal>
		<signal name="exit_screen">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="Script" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="can_instance" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="instance_has" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="base_object" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_source_code" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_source_code" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_source_code">
			<argument index="0" name="source" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="reload">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="ScrollBar" inherits="Range" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_custom_step">
			<argument index="0" name="step" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_custom_step" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SegmentShape2D" inherits="Shape2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_a">
			<argument index="0" name="a" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_a" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_b">
			<argument index="0" name="b" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_b" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Separator" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Shader" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_vertex_code">
			<argument index="0" name="code" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_vertex_code" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_fragment_code">
			<argument index="0" name="code" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_fragment_code" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_use_world_transform">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_using_world_transform" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_param">
			<argument index="0" name="param" type="String">
			</argument>
			<argument index="1" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_param" qualifiers="const">
			<argument index="0" name="param" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_param_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="MODE_MATERIAL" value="0">
		</constant>
		<constant name="MODE_POST_PROCESS" value="1">
		</constant>
	</constants>
</class>
<class name="ShaderMaterial" inherits="Material" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_shader">
			<argument index="0" name="shader" type="Shader">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_shader" qualifiers="const">
			<return type="Shader">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Shape" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Shape2D" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Skeleton" inherits="Spatial" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="add_bone">
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="find_bone" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bone_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bone_parent" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_bone_parent">
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="parent_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bone_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_bone_rest" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_bone_rest">
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="rest" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="bind_child_node_to_bone">
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="unbind_child_node_from_bone">
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bound_child_nodes_to_bone" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_bones">
			<description>
			</description>
		</method>
		<method name="get_bone_pose" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_bone_pose">
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="pose" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bone_custom_pose" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_bone_custom_pose">
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<argument index="1" name="custom_pose" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bone_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="bone_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NOTIFICATION_UPDATE_SKELETON" value="50">
		</constant>
	</constants>
</class>
<class name="SkyBoxFX" inherits="ScenarioFX" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Slider" inherits="Range" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_ticks">
			<argument index="0" name="count" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_ticks" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_ticks_on_borders" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_ticks_on_borders">
			<argument index="0" name="ticks_on_border" type="bool">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SoundRoomParams" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_param">
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_param" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_reverb_mode">
			<argument index="0" name="reverb_mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_reverb_mode" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_force_params_to_all_sources">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_forcing_params_to_all_sources">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Spatial" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_transform">
			<argument index="0" name="local" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<description>
			</description>
		</method>
		<method name="set_global_transform">
			<argument index="0" name="global" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_global_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<description>
			</description>
		</method>
		<method name="get_parent_spatial" qualifiers="const">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="update_gizmo">
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NOTIFICATION_UPDATE_GIZMO" value="43">
		</constant>
		<constant name="NOTIFICATION_TRANSFORM_CHANGED" value="40">
		</constant>
		<constant name="NOTIFICATION_SCENARIO_CHANGED" value="41">
		</constant>
	</constants>
</class>
<class name="SpatialPlayer" inherits="Spatial" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_param">
			<argument index="0" name="param" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_param" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="param" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PARAM_VOLUME_DB" value="0">
		</constant>
		<constant name="PARAM_PITCH_SCALE" value="1">
		</constant>
		<constant name="PARAM_ATTENUATION_MIN_DISTANCE" value="2">
		</constant>
		<constant name="PARAM_ATTENUATION_MAX_DISTANCE" value="3">
		</constant>
		<constant name="PARAM_ATTENUATION_DISTANCE_EXP" value="4">
		</constant>
		<constant name="PARAM_EMISSION_CONE_DEGREES" value="5">
		</constant>
		<constant name="PARAM_EMISSION_CONE_ATTENUATION_DB" value="6">
		</constant>
		<constant name="PARAM_MAX" value="7">
		</constant>
	</constants>
</class>
<class name="SpatialSamplePlayer" inherits="SpatialPlayer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_sample_library">
			<argument index="0" name="library" type="SampleLibrary">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_sample_library" qualifiers="const">
			<return type="SampleLibrary">
			</return>
			<description>
			</description>
		</method>
		<method name="set_polyphony">
			<argument index="0" name="voices" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_polyphony" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="play">
			<return type="int">
			</return>
			<argument index="0" name="sample" type="String">
			</argument>
			<argument index="1" name="voice" type="int" default="-2">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_pitch_scale">
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="ratio" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="voice_set_volume_scale_db">
			<argument index="0" name="voice" type="int">
			</argument>
			<argument index="1" name="db" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_voice_active" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="stop_voice">
			<argument index="0" name="voice" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="stop_all">
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="INVALID_VOICE" value="-1">
		</constant>
		<constant name="NEXT_VOICE" value="-2">
		</constant>
	</constants>
</class>
<class name="SpatialSoundServer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="SpatialSoundServerSW" inherits="SpatialSoundServer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="SpatialStreamPlayer" inherits="SpatialPlayer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_stream">
			<argument index="0" name="stream" type="Stream">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stream" qualifiers="const">
			<return type="Stream">
			</return>
			<description>
			</description>
		</method>
		<method name="play">
			<description>
			</description>
		</method>
		<method name="stop">
			<description>
			</description>
		</method>
		<method name="is_playing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_loop">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_loop" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_stream_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_loop_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="seek_pos">
			<argument index="0" name="time" type="real">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SphereShape" inherits="Shape" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_radius">
			<argument index="0" name="radius" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_radius" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SpinBox" inherits="Range" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_suffix">
			<argument index="0" name="suffix" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_suffix" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_prefix">
			<argument index="0" name="prefix" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_prefix" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="set_editable">
			<argument index="0" name="editable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_editable" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SpotLight" inherits="Light" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Sprite" inherits="Node2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_texture">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="set_centered">
			<argument index="0" name="centered" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_centered" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_flip_h">
			<argument index="0" name="flip_h" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_flipped_h" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_flip_v">
			<argument index="0" name="flip_v" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_flipped_v" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_region">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_region" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_region_rect">
			<argument index="0" name="rect" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_region_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_frame">
			<argument index="0" name="frame" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_frame" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_vframes">
			<argument index="0" name="vframes" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_vframes" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_hframes">
			<argument index="0" name="hframes" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_hframes" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_modulate">
			<argument index="0" name="modulate" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_modulate" qualifiers="const">
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SquirrelScript" inherits="Script" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="StaticBody" inherits="PhysicsBody" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_simulated_motion">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_simulating_motion" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="simulate_motion">
			<argument index="0" name="new_transform" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="create_shapes_from_child_meshes">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StaticBody2D" inherits="PhysicsBody2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_simulate_motion">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_simulating_motion" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_constant_linear_velocity">
			<argument index="0" name="vel" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_constant_angular_velocity">
			<argument index="0" name="vel" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_constant_linear_velocity" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_constant_angular_velocity" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StreamPeer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="put_data">
			<return type="int">
			</return>
			<argument index="0" name="data" type="RawArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="put_partial_data">
			<return type="Array">
			</return>
			<argument index="0" name="data" type="RawArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_data">
			<return type="Array">
			</return>
			<argument index="0" name="bytes" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_partial_data">
			<return type="Array">
			</return>
			<argument index="0" name="bytes" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StreamPeerTCP" inherits="StreamPeer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="connect">
			<return type="int">
			</return>
			<argument index="0" name="host" type="String">
			</argument>
			<argument index="1" name="ip" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_connected" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_connected_host" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_connected_port" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="disconnect">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StreamPlayer" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_stream">
			<argument index="0" name="stream" type="Stream">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stream" qualifiers="const">
			<return type="Stream">
			</return>
			<description>
			</description>
		</method>
		<method name="play">
			<description>
			</description>
		</method>
		<method name="stop">
			<description>
			</description>
		</method>
		<method name="is_playing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_paused">
			<argument index="0" name="paused" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_paused" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_loop">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_loop" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_volume">
			<argument index="0" name="volume" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_volume" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_volume_db">
			<argument index="0" name="db" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_volume_db" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_stream_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_loop_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="seek_pos">
			<argument index="0" name="time" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_autoplay">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_autoplay" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_length" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StyleBox" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="test_mask" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="point" type="Vector2">
			</argument>
			<argument index="1" name="rect" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_default_margin">
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="offset" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_default_margin" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_margin" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="margin" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_minimum_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_center_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_offset" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="draw" qualifiers="const">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StyleBoxEmpty" inherits="StyleBox" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="StyleBoxFlat" inherits="StyleBox" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_bg_color">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_bg_color" qualifiers="const">
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
		<method name="set_light_color">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_light_color" qualifiers="const">
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
		<method name="set_dark_color">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_dark_color" qualifiers="const">
			<return type="Color">
			</return>
			<description>
			</description>
		</method>
		<method name="set_border_size">
			<argument index="0" name="size" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_border_size" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_border_blend">
			<argument index="0" name="blend" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_border_blend" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_draw_center">
			<argument index="0" name="size" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_draw_center" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StyleBoxImageMask" inherits="StyleBox" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_image">
			<argument index="0" name="image" type="Image">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_image" qualifiers="const">
			<return type="Image">
			</return>
			<description>
			</description>
		</method>
		<method name="set_expand">
			<argument index="0" name="expand" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_expand" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_expand_margin_size">
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="size" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_expand_margin_size" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="StyleBoxTexture" inherits="StyleBox" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_texture">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="set_margin_size">
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="size" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_margin_size" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_expand_margin_size">
			<argument index="0" name="margin" type="int">
			</argument>
			<argument index="1" name="size" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_expand_margin_size" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_draw_center">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_draw_center" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="SurfaceTool" inherits="Reference" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="begin">
			<argument index="0" name="primitive" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_vertex">
			<argument index="0" name="vertex" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_color">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_normal">
			<argument index="0" name="normal" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_tangent">
			<argument index="0" name="tangent" type="Plane">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_uv">
			<argument index="0" name="uv" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_uv2">
			<argument index="0" name="uv2" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_bones">
			<argument index="0" name="bones" type="IntArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_weights">
			<argument index="0" name="weights" type="RealArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_material">
			<argument index="0" name="material" type="Material">
			</argument>
			<description>
			</description>
		</method>
		<method name="index">
			<description>
			</description>
		</method>
		<method name="deindex">
			<description>
			</description>
		</method>
		<method name="generate_flat_normals">
			<description>
			</description>
		</method>
		<method name="generate_smooth_normals">
			<description>
			</description>
		</method>
		<method name="generate_tangents">
			<description>
			</description>
		</method>
		<method name="commit">
			<return type="Mesh">
			</return>
			<argument index="0" name="existing" type="Mesh" default="Object()">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="TCP_Server" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="listen">
			<return type="int">
			</return>
			<argument index="0" name="port" type="int">
			</argument>
			<argument index="1" name="accepted_hosts" type="StringArray" default="StringArray()">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_connection_available" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="take_connection">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="stop">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="TabContainer" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_tab_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_current_tab">
			<argument index="0" name="tab_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_current_tab" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_tab_align">
			<argument index="0" name="align" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tab_align" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_tabs_visible">
			<argument index="0" name="visible" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="are_tabs_visible" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_tab_title">
			<argument index="0" name="tab_idx" type="int">
			</argument>
			<argument index="1" name="title" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tab_title" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="tab_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_tab_icon">
			<argument index="0" name="tab_idx" type="int">
			</argument>
			<argument index="1" name="icon" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tab_icon" qualifiers="const">
			<return type="Texture">
			</return>
			<argument index="0" name="tab_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="tab_changed">
			<argument index="0" name="tab" type="int">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="TestCube" inherits="GeometryInstance" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="TextEdit" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_text">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="insert_text_at_cursor">
			<argument index="0" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_line_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_text">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_line">
			<return type="String">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_column">
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_line">
			<argument index="0" name="line" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_get_column" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="cursor_get_line" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_readonly">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_wrap">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_max_chars">
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cut">
			<description>
			</description>
		</method>
		<method name="copy">
			<description>
			</description>
		</method>
		<method name="paste">
			<description>
			</description>
		</method>
		<method name="select_all">
			<description>
			</description>
		</method>
		<method name="select">
			<argument index="0" name="from_line" type="int">
			</argument>
			<argument index="1" name="from_column" type="int">
			</argument>
			<argument index="2" name="to_line" type="int">
			</argument>
			<argument index="3" name="to_column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_selection_active" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection_from_line" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection_from_column" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection_to_line" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection_to_column" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selection_text" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="search" qualifiers="const">
			<return type="IntArray">
			</return>
			<argument index="0" name="flags" type="String">
			</argument>
			<argument index="1" name="from_line" type="int">
			</argument>
			<argument index="2" name="from_column" type="int">
			</argument>
			<argument index="3" name="to_line" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="undo">
			<description>
			</description>
		</method>
		<method name="redo">
			<description>
			</description>
		</method>
		<method name="clear_undo_history">
			<description>
			</description>
		</method>
		<method name="set_syntax_coloring">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_syntax_coloring_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="add_keyword_color">
			<argument index="0" name="keyword" type="String">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_color_region">
			<argument index="0" name="begin_key" type="String">
			</argument>
			<argument index="1" name="end_key" type="String">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<argument index="3" name="line_only" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_symbol_color">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_custom_bg_color">
			<argument index="0" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_colors">
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="text_changed">
			<description>
			</description>
		</signal>
		<signal name="cursor_changed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="SEARCH_MATCH_CASE" value="1">
		</constant>
		<constant name="SEARCH_WHOLE_WORDS" value="2">
		</constant>
		<constant name="SEARCH_BACKWARDS" value="4">
		</constant>
	</constants>
</class>
<class name="Texture" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="create">
			<argument index="0" name="width" type="int">
			</argument>
			<argument index="1" name="height" type="int">
			</argument>
			<argument index="2" name="format" type="int">
			</argument>
			<argument index="3" name="flags" type="int">
			</argument>
			<argument index="4" name="arg4" type="int" default="7">
			</argument>
			<description>
			</description>
		</method>
		<method name="create_from_image">
			<argument index="0" name="image" type="Image">
			</argument>
			<argument index="1" name="flags" type="int" default="7">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_flags">
			<argument index="0" name="flags" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_flags" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_format" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="load">
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_data">
			<argument index="0" name="image" type="Image">
			</argument>
			<argument index="1" name="cube_side" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_data" qualifiers="const">
			<return type="Image">
			</return>
			<argument index="0" name="cube_side" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_width" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_size" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_rid" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="has_alpha" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="draw" qualifiers="const">
			<argument index="0" name="canvas_item" type="RID">
			</argument>
			<argument index="1" name="pos" type="Vector2">
			</argument>
			<argument index="2" name="modulate" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="FLAG_MIPMAPS" value="1">
		</constant>
		<constant name="FLAG_REPEAT" value="2">
		</constant>
		<constant name="FLAG_FILTER" value="4">
		</constant>
		<constant name="FLAG_CUBEMAP" value="8">
		</constant>
		<constant name="FLAG_VIDEO_SURFACE" value="16">
		</constant>
		<constant name="FLAGS_DEFAULT" value="7">
		</constant>
		<constant name="CUBEMAP_LEFT" value="0">
		</constant>
		<constant name="CUBEMAP_RIGHT" value="1">
		</constant>
		<constant name="CUBEMAP_BOTTOM" value="2">
		</constant>
		<constant name="CUBEMAP_TOP" value="3">
		</constant>
		<constant name="CUBEMAP_FRONT" value="4">
		</constant>
		<constant name="CUBEMAP_BACK" value="5">
		</constant>
	</constants>
</class>
<class name="TextureButton" inherits="BaseButton" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_normal_texture">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_pressed_texture">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_hover_texture">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_disabled_texture">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_focused_texture">
			<argument index="0" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_click_mask">
			<argument index="0" name="texture:Image" type="Image">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_normal_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pressed_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="get_hover_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="get_disabled_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="get_focused_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<description>
			</description>
		</method>
		<method name="get_click_mask" qualifiers="const">
			<return type="Image">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="TextureFrame" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_texture">
			<argument index="0" name="texture" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_texture" qualifiers="const">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_expand">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_expand" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="TextureProgress" inherits="Range" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_under_texture">
			<argument index="0" name="tex" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_under_texture" qualifiers="const">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_progress_texture">
			<argument index="0" name="tex" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_progress_texture" qualifiers="const">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
		<method name="set_over_texture">
			<argument index="0" name="tex" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_over_texture" qualifiers="const">
			<return type="Object">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Theme" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_icon">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<argument index="2" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_icon" qualifiers="const">
			<return type="Texture">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_icon" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_icon">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_icon_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_stylebox">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<argument index="2" name="texture" type="StyleBox">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stylebox" qualifiers="const">
			<return type="StyleBox">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_stylebox" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_stylebox">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stylebox_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_font">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<argument index="2" name="font" type="Font">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_font" qualifiers="const">
			<return type="Font">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_font" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_font">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_font_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_color">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_color" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_color">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_color_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_constant">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<argument index="2" name="constant" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_constant" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_constant" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_constant">
			<argument index="0" name="name" type="String">
			</argument>
			<argument index="1" name="type" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_constant_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_type_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="copy_default_theme">
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="TileMap" inherits="Node2D" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_tileset">
			<argument index="0" name="tileset" type="TileSet">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tileset" qualifiers="const">
			<return type="TileSet">
			</return>
			<description>
			</description>
		</method>
		<method name="set_cell_size">
			<argument index="0" name="size" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_cell_size" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_quadrant_size">
			<argument index="0" name="size" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_quadrant_size" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_center_x">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_center_x" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_center_y">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_center_y" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_cell">
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<argument index="2" name="tile" type="int">
			</argument>
			<argument index="3" name="flip_x" type="bool" default="false">
			</argument>
			<argument index="4" name="flip_y" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_cell" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_cell_x_flipped" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_cell_y_flipped" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="x" type="int">
			</argument>
			<argument index="1" name="y" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear">
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="INVALID_CELL" value="-1">
		</constant>
	</constants>
</class>
<class name="TileSet" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="create_tile">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="tile_set_name">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="tile_get_name" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="tile_set_texture">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="tile_get_texture" qualifiers="const">
			<return type="Texture">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="tile_set_offset">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="offset" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="tile_get_offset" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="tile_set_region">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="region" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="tile_get_region" qualifiers="const">
			<return type="Rect2">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="tile_set_shape">
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="shape" type="Shape2D">
			</argument>
			<description>
			</description>
		</method>
		<method name="tile_get_shape" qualifiers="const">
			<return type="Shape2D">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_tile">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear">
			<description>
			</description>
		</method>
		<method name="get_last_unused_tile_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="find_tile_by_name" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tiles_ids" qualifiers="const">
			<return type="Array">
			</return>			
			<description>
			
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="Timer" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_wait_time">
			<argument index="0" name="time_sec" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_wait_time" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_one_shot">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_one_shot" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autostart">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_autostart" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="start">
			<description>
			</description>
		</method>
		<method name="stop">
			<description>
			</description>
		</method>
		<method name="get_time_left" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="timeout">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
<class name="Translation" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_locale">
			<argument index="0" name="locale" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_locale" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="add_message">
			<argument index="0" name="src_message" type="String">
			</argument>
			<argument index="1" name="xlated_message" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_message" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="src_message" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="erase_message">
			<argument index="0" name="src_message" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_message_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="TranslationServer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Tree" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="clear">
			<description>
			</description>
		</method>
		<method name="create_item">
			<return type="TreeItem">
			</return>
			<argument index="0" name="parent" type="TreeItem" default="Object()">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_root">
			<return type="TreeItem">
			</return>
			<description>
			</description>
		</method>
		<method name="set_column_min_width">
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_column_expand">
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_column_width" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_hide_root">
			<argument index="0" name="arg0" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_next_selected">
			<return type="TreeItem">
			</return>
			<argument index="0" name="from" type="TreeItem">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_selected" qualifiers="const">
			<return type="TreeItem">
			</return>
			<description>
			</description>
		</method>
		<method name="get_selected_column" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pressed_button" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="set_select_mode">
			<argument index="0" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_columns">
			<argument index="0" name="amount" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_columns" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_edited" qualifiers="const">
			<return type="TreeItem">
			</return>
			<description>
			</description>
		</method>
		<method name="get_edited_column" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_custom_popup_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_item_area_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<argument index="0" name="item" type="TreeItem">
			</argument>
			<argument index="1" name="column" type="int" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="ensure_cursor_is_visible">
			<description>
			</description>
		</method>
		<method name="set_column_titles_visible">
			<argument index="0" name="visible" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="are_column_titles_visible" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_column_title">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="title" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_column_title" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_scroll" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<signals>
		<signal name="item_activated">
			<description>
			</description>
		</signal>
		<signal name="multi_selected">
			<argument index="0" name="item" type="Object">
			</argument>
			<argument index="1" name="column" type="int">
			</argument>
			<argument index="2" name="selected" type="bool">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="custom_popup_edited">
			<argument index="0" name="arrow_clicked" type="bool">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="item_edited">
			<description>
			</description>
		</signal>
		<signal name="item_selected">
			<description>
			</description>
		</signal>
		<signal name="cell_selected">
			<description>
			</description>
		</signal>
		<signal name="button_pressed">
			<argument index="0" name="item" type="Object">
			</argument>
			<argument index="1" name="column" type="int">
			</argument>
			<argument index="2" name="id" type="int">
			</argument>
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="SELECT_SINGLE" value="0">
		</constant>
		<constant name="SELECT_ROW" value="1">
		</constant>
		<constant name="SELECT_MULTI" value="2">
		</constant>
	</constants>
</class>
<class name="TreeItem" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_cell_mode">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_cell_mode" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_checked">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="checked" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_checked" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_text">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="text" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_text" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_icon">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="texture" type="Texture">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_icon" qualifiers="const">
			<return type="Texture">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_icon_region">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="region" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_icon_region" qualifiers="const">
			<return type="Rect2">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_icon_max_width">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="width" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_icon_max_width" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_range">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="value" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_range" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_range_config">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="min" type="real">
			</argument>
			<argument index="2" name="max" type="real">
			</argument>
			<argument index="3" name="step" type="real">
			</argument>
			<argument index="4" name="expr" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_range_config">
			<return type="Dictionary">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_metadata">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="meta" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_metadata" qualifiers="const">
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_collapsed">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_collapsed">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_next">
			<return type="TreeItem">
			</return>
			<description>
			</description>
		</method>
		<method name="get_prev">
			<return type="TreeItem">
			</return>
			<description>
			</description>
		</method>
		<method name="get_parent">
			<return type="TreeItem">
			</return>
			<description>
			</description>
		</method>
		<method name="get_children">
			<return type="TreeItem">
			</return>
			<description>
			</description>
		</method>
		<method name="get_next_visible">
			<return type="TreeItem">
			</return>
			<description>
			</description>
		</method>
		<method name="get_prev_visible">
			<return type="TreeItem">
			</return>
			<description>
			</description>
		</method>
		<method name="remove_child">
			<argument index="0" name="child" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_selectable">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="selectable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_selectable" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_selected">
			<return type="bool">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="select">
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="deselect">
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_editable">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_editable">
			<return type="bool">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_custom_color">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_custom_color">
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_custom_bg_color">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="clear_custom_bg_color">
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_custom_bg_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_button">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="button" type="Texture">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_button_count" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_button" qualifiers="const">
			<return type="Texture">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="button_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="erase_button">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="button_idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_tooltip">
			<argument index="0" name="column" type="int">
			</argument>
			<argument index="1" name="tooltip" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_tooltip" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="column" type="int">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="CELL_MODE_STRING" value="0">
		</constant>
		<constant name="CELL_MODE_CHECK" value="1">
		</constant>
		<constant name="CELL_MODE_RANGE" value="2">
		</constant>
		<constant name="CELL_MODE_ICON" value="3">
		</constant>
		<constant name="CELL_MODE_CUSTOM" value="4">
		</constant>
	</constants>
</class>
<class name="VBoxContainer" inherits="BoxContainer" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="VButtonArray" inherits="ButtonArray" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="VScrollBar" inherits="ScrollBar" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="VSeparator" inherits="Separator" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="VSlider" inherits="Slider" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="VideoPlayer" inherits="Control" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_stream">
			<argument index="0" name="stream" type="Stream">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_stream" qualifiers="const">
			<return type="Stream">
			</return>
			<description>
			</description>
		</method>
		<method name="play">
			<description>
			</description>
		</method>
		<method name="stop">
			<description>
			</description>
		</method>
		<method name="is_playing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_paused">
			<argument index="0" name="paused" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_paused" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_volume">
			<argument index="0" name="volume" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_volume" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_volume_db">
			<argument index="0" name="db" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_volume_db" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="get_stream_name" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_pos" qualifiers="const">
			<return type="real">
			</return>
			<description>
			</description>
		</method>
		<method name="set_autoplay">
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_autoplay" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="set_expand">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_expand" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="VideoStream" inherits="AudioStreamResampled" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_pending_frame_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="pop_frame">
			<return type="Image">
			</return>
			<description>
			</description>
		</method>
		<method name="peek_frame" qualifiers="const">
			<return type="Image">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="VideoStreamTheora" inherits="VideoStream" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
	</methods>
	<constants>
	</constants>
</class>
<class name="Viewport" inherits="Node" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_rect">
			<argument index="0" name="rect" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_visible_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="set_transparent_background">
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_transparent_background" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_viewport" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="VisualInstance" inherits="Spatial" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_base">
			<argument index="0" name="base" type="RID">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="VisualServer" inherits="Object" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="texture_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="texture_create_from_image">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="Image">
			</argument>
			<argument index="1" name="arg1" type="int" default="7">
			</argument>
			<description>
			</description>
		</method>
		<method name="texture_set_flags">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="texture_get_flags" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="texture_get_width" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="texture_get_height" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_create">
			<return type="RID">
			</return>
			<argument index="0" name="mode" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_set_mode">
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="mode" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_get_mode" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="shader" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_set_vertex_code">
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="code" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_get_vertex_code" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="shader" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_set_fragment_code">
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="code" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_get_fragment_code" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="shader" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_set_param">
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="param" type="String">
			</argument>
			<argument index="2" name="value" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_get_param" qualifiers="const">
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="param" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_get_param_list" qualifiers="const">
			<return type="StringArray">
			</return>
			<argument index="0" name="shader" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_set_use_world_transform">
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="shader_is_using_world_transform" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="shader" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="material_set_shader">
			<argument index="0" name="shader" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_get_shader" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_set_param">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<argument index="2" name="arg2" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_get_param" qualifiers="const">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_set_flag">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_get_flag" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_set_blend_mode">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_get_blend_mode" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_set_line_width">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="material_get_line_width" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_set_parameter">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_get_parameter" qualifiers="const">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_set_texture">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_get_texture" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_set_texgen_mode">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_get_texgen_mode" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_set_texcoord_mode">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_get_texcoord_mode" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_set_uv_transform">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="fixed_material_get_uv_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="mesh_add_surface">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<argument index="3" name="arg3" type="int">
			</argument>
			<argument index="4" name="arg4" type="int" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_set_array">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<argument index="3" name="arg3" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_array" qualifiers="const">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_set_material">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<argument index="3" name="arg3" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_material" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_array_len" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_array_index_len" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_format" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_primitive_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_erase_surface">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_get_surface_count" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="multimesh_set_mesh">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_set_aabb">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="AABB">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_instance_set_transform">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_instance_set_color">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_get_mesh" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_get_aabb" qualifiers="const">
			<return type="AABB">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="AABB">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_instance_get_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="multimesh_instance_get_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="poly_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="poly_set_material">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<argument index="2" name="arg2" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="poly_clear">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="particles_set_amount">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_amount" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_emitting">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_is_emitting" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_visibility_aabb">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="AABB">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_visibility_aabb" qualifiers="const">
			<return type="AABB">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_variable">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_variable" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_randomness">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_randomness" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_color_phases">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_color_phases" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_color_phase_pos">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_color_phase_pos" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_color_phase_color">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_color_phase_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_attractors">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_attractors" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_attractor_pos">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_attractor_pos" qualifiers="const">
			<return type="Vector3">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_attractor_strength">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_get_attractor_strength" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_material">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<argument index="2" name="arg2" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_set_height_from_velocity">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="particles_has_height_from_velocity" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_create">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_get_type" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_set_color">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_get_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_set_shadow">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_has_shadow" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_set_volumetric">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_is_volumetric" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_set_projector">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_get_projector" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_set_var">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="light_get_var" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="skeleton_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="skeleton_resize">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="skeleton_get_bone_count" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="skeleton_bone_set_transform">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="skeleton_bone_get_transform">
			<return type="Transform">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="room_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="room_set_bounds">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Dictionary">
			</argument>
			<description>
			</description>
		</method>
		<method name="room_get_bounds" qualifiers="const">
			<return type="Dictionary">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="portal_set_shape">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Vector2Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_get_shape" qualifiers="const">
			<return type="Vector2Array">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_set_enabled">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_is_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_set_disable_distance">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_get_disable_distance" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_set_disabled_color">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="portal_get_disabled_color" qualifiers="const">
			<return type="Color">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="camera_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="camera_set_perspective">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<argument index="3" name="arg3" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="camera_set_orthogonal">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<argument index="3" name="arg3" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="camera_set_transform">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="viewport_set_rect">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_get_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_attach_camera">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID" default="RID()">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_get_attached_camera" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_get_scenario" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_attach_canvas">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_remove_canvas">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="scenario_set_debug">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_get_effects" qualifiers="const">
			<return type="StringArray">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_set_active">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<argument index="2" name="arg2" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_is_active" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_get_effect_params" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_get_effect_param" qualifiers="const">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<argument index="2" name="arg2" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="scenario_fx_set_effect_param">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="String">
			</argument>
			<argument index="2" name="arg2" type="String">
			</argument>
			<argument index="3" name="arg3" type="var">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="instance_get_base" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_get_base_aabb" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_set_transform">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Transform">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_get_transform" qualifiers="const">
			<return type="Transform">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_attach_object_instance_ID">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_get_object_instance_ID" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_attach_skeleton">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_get_skeleton" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_set_room">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_get_room" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_set_exterior">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_is_exterior" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instances_cull_aabb" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="arg0" type="AABB">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instances_cull_ray" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="arg0" type="Vector3">
			</argument>
			<argument index="1" name="arg1" type="Vector3">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instances_cull_convex" qualifiers="const">
			<return type="Array">
			</return>
			<argument index="0" name="arg0" type="Vector3">
			</argument>
			<argument index="1" name="arg1" type="Vector3">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_geometry_set_visible">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_geometry_is_visible" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_geometry_override_material_param" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="instance_geometry_get_material_param" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="canvas_item_create">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_parent">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_get_parent" qualifiers="const">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_transform">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Matrix32">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_custom_rect">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<argument index="2" name="arg2" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_clip">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_opacity">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_get_opacity" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_set_self_opacity">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_get_self_opacity" qualifiers="const">
			<return type="real">
			</return>
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_line">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Vector2">
			</argument>
			<argument index="2" name="arg2" type="Vector2">
			</argument>
			<argument index="3" name="arg3" type="Color">
			</argument>
			<argument index="4" name="arg4" type="real" default="1">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_rect">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<argument index="2" name="arg2" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_texture_rect">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<argument index="3" name="arg3" type="bool">
			</argument>
			<argument index="4" name="arg4" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_texture_rect_region">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<argument index="3" name="arg3" type="Rect2">
			</argument>
			<argument index="4" name="arg4" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_style_box">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Rect2">
			</argument>
			<argument index="2" name="arg2" type="RID">
			</argument>
			<argument index="3" name="arg3" type="RealArray">
			</argument>
			<argument index="4" name="arg4" type="Color" default="Color(1,1,1,1)">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_add_circle">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Vector2">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<argument index="3" name="arg3" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="viewport_set_canvas_transform">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="RID">
			</argument>
			<argument index="2" name="arg2" type="Matrix32">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_clear">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="canvas_item_raise">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_rotation">
			<argument index="0" name="arg0" type="real">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_texture">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Vector2">
			</argument>
			<argument index="2" name="arg2" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_visible">
			<argument index="0" name="arg0" type="bool">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="cursor_set_pos">
			<argument index="0" name="arg0" type="Vector2">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="make_sphere_mesh">
			<return type="RID">
			</return>
			<argument index="0" name="arg0" type="int">
			</argument>
			<argument index="1" name="arg1" type="int">
			</argument>
			<argument index="2" name="arg2" type="real">
			</argument>
			<description>
			</description>
		</method>
		<method name="mesh_add_surface_from_planes">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<argument index="1" name="arg1" type="Array">
			</argument>
			<description>
			</description>
		</method>
		<method name="free">
			<argument index="0" name="arg0" type="RID">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
		<constant name="NO_INDEX_ARRAY" value="-1">
		</constant>
		<constant name="CUSTOM_ARRAY_SIZE" value="8">
		</constant>
		<constant name="ARRAY_WEIGHTS_SIZE" value="4">
		</constant>
		<constant name="MAX_PARTICLE_COLOR_PHASES" value="4">
		</constant>
		<constant name="MAX_PARTICLE_ATTRACTORS" value="4">
		</constant>
		<constant name="MAX_CURSORS" value="8">
		</constant>
		<constant name="TEXTURE_FLAG_MIPMAPS" value="1">
		</constant>
		<constant name="TEXTURE_FLAG_REPEAT" value="2">
		</constant>
		<constant name="TEXTURE_FLAG_FILTER" value="4">
		</constant>
		<constant name="TEXTURE_FLAG_CUBEMAP" value="8">
		</constant>
		<constant name="TEXTURE_FLAGS_DEFAULT" value="7">
		</constant>
		<constant name="CUBEMAP_LEFT" value="0">
		</constant>
		<constant name="CUBEMAP_RIGHT" value="1">
		</constant>
		<constant name="CUBEMAP_BOTTOM" value="2">
		</constant>
		<constant name="CUBEMAP_TOP" value="3">
		</constant>
		<constant name="CUBEMAP_FRONT" value="4">
		</constant>
		<constant name="CUBEMAP_BACK" value="5">
		</constant>
		<constant name="SHADER_MATERIAL" value="0">
		</constant>
		<constant name="SHADER_POST_PROCESS" value="1">
		</constant>
		<constant name="MATERIAL_FLAG_VISIBLE" value="0">
		</constant>
		<constant name="MATERIAL_FLAG_DOUBLE_SIDED" value="1">
		</constant>
		<constant name="MATERIAL_FLAG_INVERT_FACES" value="2">
		</constant>
		<constant name="MATERIAL_FLAG_UNSHADED" value="3">
		</constant>
		<constant name="MATERIAL_FLAG_ONTOP" value="4">
		</constant>
		<constant name="MATERIAL_FLAG_WIREFRAME" value="5">
		</constant>
		<constant name="MATERIAL_FLAG_BILLBOARD" value="6">
		</constant>
		<constant name="MATERIAL_FLAG_MAX" value="7">
		</constant>
		<constant name="MATERIAL_BLEND_MODE_MIX" value="0">
		</constant>
		<constant name="MATERIAL_BLEND_MODE_ADD" value="1">
		</constant>
		<constant name="MATERIAL_BLEND_MODE_SUB" value="2">
		</constant>
		<constant name="MATERIAL_BLEND_MODE_MUL" value="3">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_DIFFUSE" value="0">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_DETAIL" value="1">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_SPECULAR" value="2">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_EMISSION" value="3">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_SPECULAR_EXP" value="4">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_GLOW" value="5">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_NORMAL" value="6">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_SHADE_PARAM" value="7">
		</constant>
		<constant name="FIXED_MATERIAL_PARAM_MAX" value="8">
		</constant>
		<constant name="FIXED_MATERIAL_TEXGEN_SPHERE" value="1">
		</constant>
		<constant name="FIXED_MATERIAL_TEXGEN_SCREEN" value="2">
		</constant>
		<constant name="FIXED_MATERIAL_TEXGEN_SCREENZ" value="3">
		</constant>
		<constant name="FIXED_MATERIAL_TEXGEN_LOCAL_XY" value="0">
		</constant>
		<constant name="FIXED_MATERIAL_TEXCOORD_TEXGEN" value="3">
		</constant>
		<constant name="FIXED_MATERIAL_TEXCOORD_UV" value="0">
		</constant>
		<constant name="FIXED_MATERIAL_TEXCOORD_UV_TRANSFORM" value="1">
		</constant>
		<constant name="FIXED_MATERIAL_TEXCOORD_UV2" value="2">
		</constant>
		<constant name="ARRAY_VERTEX" value="0">
		</constant>
		<constant name="ARRAY_NORMAL" value="1">
		</constant>
		<constant name="ARRAY_TANGENT" value="2">
		</constant>
		<constant name="ARRAY_COLOR" value="3">
		</constant>
		<constant name="ARRAY_TEX_UV" value="4">
		</constant>
		<constant name="ARRAY_BONES" value="6">
		</constant>
		<constant name="ARRAY_WEIGHTS" value="7">
		</constant>
		<constant name="ARRAY_INDEX" value="8">
		</constant>
		<constant name="ARRAY_MAX" value="9">
		</constant>
		<constant name="ARRAY_FORMAT_VERTEX" value="1">
		</constant>
		<constant name="ARRAY_FORMAT_NORMAL" value="2">
		</constant>
		<constant name="ARRAY_FORMAT_TANGENT" value="4">
		</constant>
		<constant name="ARRAY_FORMAT_COLOR" value="8">
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV" value="16">
		</constant>
		<constant name="ARRAY_FORMAT_BONES" value="64">
		</constant>
		<constant name="ARRAY_FORMAT_WEIGHTS" value="128">
		</constant>
		<constant name="ARRAY_FORMAT_INDEX" value="256">
		</constant>
		<constant name="PRIMITIVE_POINTS" value="0">
		</constant>
		<constant name="PRIMITIVE_LINES" value="1">
		</constant>
		<constant name="PRIMITIVE_LINE_STRIP" value="2">
		</constant>
		<constant name="PRIMITIVE_LINE_LOOP" value="3">
		</constant>
		<constant name="PRIMITIVE_TRIANGLES" value="4">
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_STRIP" value="5">
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_FAN" value="6">
		</constant>
		<constant name="PRIMITIVE_MAX" value="7">
		</constant>
		<constant name="PARTICLE_LIFETIME" value="0">
		</constant>
		<constant name="PARTICLE_SPREAD" value="1">
		</constant>
		<constant name="PARTICLE_GRAVITY" value="2">
		</constant>
		<constant name="PARTICLE_LINEAR_VELOCITY" value="3">
		</constant>
		<constant name="PARTICLE_ANGULAR_VELOCITY" value="4">
		</constant>
		<constant name="PARTICLE_LINEAR_ACCELERATION" value="5">
		</constant>
		<constant name="PARTICLE_RADIAL_ACCELERATION" value="6">
		</constant>
		<constant name="PARTICLE_TANGENTIAL_ACCELERATION" value="7">
		</constant>
		<constant name="PARTICLE_INITIAL_SIZE" value="9">
		</constant>
		<constant name="PARTICLE_FINAL_SIZE" value="10">
		</constant>
		<constant name="PARTICLE_INITIAL_ANGLE" value="11">
		</constant>
		<constant name="PARTICLE_HEIGHT" value="12">
		</constant>
		<constant name="PARTICLE_HEIGHT_SPEED_SCALE" value="13">
		</constant>
		<constant name="PARTICLE_VAR_MAX" value="14">
		</constant>
		<constant name="LIGHT_DIRECTIONAL" value="0">
		</constant>
		<constant name="LIGHT_OMNI" value="1">
		</constant>
		<constant name="LIGHT_SPOT" value="2">
		</constant>
		<constant name="LIGHT_COLOR_AMBIENT" value="0">
		</constant>
		<constant name="LIGHT_COLOR_DIFFUSE" value="1">
		</constant>
		<constant name="LIGHT_COLOR_SPECULAR" value="2">
		</constant>
		<constant name="LIGHT_VAR_SPOT_ATTENUATION" value="0">
		</constant>
		<constant name="LIGHT_VAR_SPOT_ANGLE" value="1">
		</constant>
		<constant name="LIGHT_VAR_RADIUS" value="2">
		</constant>
		<constant name="LIGHT_VAR_ENERGY" value="3">
		</constant>
		<constant name="LIGHT_VAR_ATTENUATION" value="4">
		</constant>
		<constant name="LIGHT_VAR_MAX" value="6">
		</constant>
		<constant name="SCENARIO_DEBUG_DISABLED" value="0">
		</constant>
		<constant name="SCENARIO_DEBUG_WIREFRAME" value="1">
		</constant>
		<constant name="SCENARIO_DEBUG_OVERDRAW" value="2">
		</constant>
		<constant name="INSTANCE_MESH" value="1">
		</constant>
		<constant name="INSTANCE_MULTIMESH" value="2">
		</constant>
		<constant name="INSTANCE_POLY" value="3">
		</constant>
		<constant name="INSTANCE_PARTICLES" value="4">
		</constant>
		<constant name="INSTANCE_LIGHT" value="5">
		</constant>
		<constant name="INSTANCE_ROOM" value="6">
		</constant>
		<constant name="INSTANCE_PORTAL" value="7">
		</constant>
		<constant name="INSTANCE_GEOMETRY_MASK" value="30">
		</constant>
		<constant name="INFO_OBJECTS_IN_FRAME" value="0">
		</constant>
		<constant name="INFO_MATERIAL_CHANGES_IN_FRAME" value="1">
		</constant>
		<constant name="INFO_USAGE_VIDEO_MEM_TOTAL" value="2">
		</constant>
		<constant name="INFO_VIDEO_MEM_USED" value="3">
		</constant>
		<constant name="INFO_TEXTURE_MEM_USED" value="4">
		</constant>
		<constant name="INFO_VERTEX_MEM_USED" value="5">
		</constant>
	</constants>
</class>
<class name="WindowDialog" inherits="Popup" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="set_title">
			<argument index="0" name="title" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_title" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_close_button">
			<return type="TextureButton">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
<class name="World" inherits="Resource" category="Core">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<methods>
		<method name="get_space" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="get_scenario" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="get_sound_space" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
</doc>
